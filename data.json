[
    {
        "Pagina": 1,
        "Contenuto": "Linux\nEssentials\n\nVersion 1.6\nEnglish"
    },
    {
        "Pagina": 2,
        "Contenuto": "Table of Contents\nTOPIC 1: THE LINUX COMMUNITY AND A CAREER IN OPEN SOURCE . . . . . . . . . . . . . . . . . . . . . . . . .  1\n1.1 Linux Evolution and Popular Operating Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  2\n1.1 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3\nDistributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  4\nEmbedded Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5\nLinux and the Cloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  8\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  13\n1.2 Major Open Source Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  14\n1.2 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15\nSoftware Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  15\nPackage Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16\nPackage Removal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  19\nOffice Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  20\nWeb Browsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  22\nMultimedia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  22\nServer Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  23\nData Sharing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  24\nNetwork Administration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  25\nProgramming Languages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  26\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  29\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  31\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  32\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  33\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  35\n1.3 Open Source Software and Licensing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  36\n1.3 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  37\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  37\nDefinition of Free and Open Source Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  37\nLicenses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  40\nBusiness Models in Open Source . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  44\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  46\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  47"
    },
    {
        "Pagina": 3,
        "Contenuto": "Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  48\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  49\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  50\n1.4 ICT Skills and Working in Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  52\n1.4 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  53\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  53\nLinux User Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  53\nIndustry Uses of Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  56\nPrivacy Issues when using the Internet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  57\nEncryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  60\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  63\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  65\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  66\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  67\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  69\nTOPIC 2: FINDING YOUR WAY ON A LINUX SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  70\n2.1 Command Line Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  71\n2.1 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  72\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  72\nCommand Line Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  74\nCommand Behavior Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  75\nQuoting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  75\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  79\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  81\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  82\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  83\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  84\n2.1 Lesson 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  85\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  85\nVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  85\nManipulating Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  86\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  91\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  92\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  93\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  94\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  95\n2.2 Using the Command Line to Get Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  97\n2.2 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  98\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  98\nGetting Help on the Command Line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  98"
    },
    {
        "Pagina": 4,
        "Contenuto": "Locating files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  101\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  104\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  106\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  107\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  108\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  111\n2.3 Using Directories and Listing Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  113\n2.3 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  114\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  114\nFiles and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  114\nFile and Directory Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  115\nNavigating the Filesystem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  115\nAbsolute and Relative Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  117\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  119\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  121\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  122\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  123\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  126\n2.3 Lesson 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  127\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  127\nHome Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  127\nThe Special Relative Path for Home . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  129\nRelative-to-Home File Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  130\nHidden Files and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  131\nThe Long List Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  132\nAdditional ls Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  132\nRecursion in Bash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  133\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  135\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  137\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  138\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  139\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  141\n2.4 Creating, Moving and Deleting Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  142\n2.4 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  143\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  143\nCase Sensitivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  144\nCreating Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  144\nCreating Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  146\nRenaming Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  147\nMoving Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  148"
    },
    {
        "Pagina": 5,
        "Contenuto": "Deleting Files and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  149\nCopying Files and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  151\nGlobbing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  153\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  158\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  160\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  161\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  163\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  166\nTOPIC 3: THE POWER OF THE COMMAND LINE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  168\n3.1 Archiving Files on the Command Line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  169\n3.1 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  170\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  170\nCompression Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  171\nArchiving Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  174\nManaging ZIP files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  177\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  179\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  180\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  181\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  183\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  185\n3.2 Searching and Extracting Data from Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  186\n3.2 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  187\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  187\nI/O Redirection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  187\nCommand Line Pipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  192\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  194\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  195\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  196\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  197\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  199\n3.2 Lesson 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  200\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  200\nSearching within Files with grep. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  200\nRegular Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  201\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  205\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  206\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  207\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  208\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  210\n3.3 Turning Commands into a Script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  212"
    },
    {
        "Pagina": 6,
        "Contenuto": "3.3 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  213\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  213\nPrinting Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  213\nMaking a Script Executable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  214\nCommands and PATH. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  214\nExecute Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  215\nDefining the Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  215\nVariables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  217\nUsing Quotes with Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  219\nArguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  220\nReturning the Number of Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  221\nConditional Logic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  222\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  224\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  226\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  227\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  229\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  231\n3.3 Lesson 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  233\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  233\nExit Codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  234\nHandling Many Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  236\nFor Loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  237\nUsing Regular Expressions to Perform Error Checking . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  239\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  242\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  244\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  245\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  246\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  248\nTOPIC 4: THE LINUX OPERATING SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  249\n4.1 Choosing an Operating System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  250\n4.1 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  251\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  251\nWhat is an Operating System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  251\nChoosing a Linux Distribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  252\nNon Linux Operating Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  256\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  258\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  260\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  261\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  262\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  264"
    },
    {
        "Pagina": 7,
        "Contenuto": "4.2 Understanding Computer Hardware . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  265\n4.2 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  266\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  266\nPower Supplies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  267\nMotherboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  267\nMemory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  268\nProcessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  269\nStorage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  271\nPartitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  273\nPeripherals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  273\nDrivers and Device Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  274\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  276\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  277\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  278\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  279\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  281\n4.3 Where Data is Stored . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  282\n4.3 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  283\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  283\nPrograms and their Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  283\nThe Linux Kernel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  287\nHardware Devices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  290\nMemory and Memory Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  292\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  295\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  297\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  298\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  300\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  302\n4.3 Lesson 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  303\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  303\nProcesses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  303\nSystem Logging and System Messaging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  307\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  313\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  316\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  318\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  320\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  323\n4.4 Your Computer on the Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  325\n4.4 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  326\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  326"
    },
    {
        "Pagina": 8,
        "Contenuto": "Link Layer Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  327\nIPv4 Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  328\nIPv6 Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  333\nDNS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  336\nSockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  338\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  340\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  341\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  342\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  343\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  344\nTOPIC 5: SECURITY AND FILE PERMISSIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  346\n5.1 Basic Security and Identifying User Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  347\n5.1 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  348\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  348\nAccounts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  349\nGetting Information About Your Users . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  352\nSwitching Users and Escalating Privilege . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  354\nAccess Control Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  355\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  362\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  364\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  365\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  367\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  369\n5.2 Creating Users and Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  371\n5.2 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  372\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  372\nThe File /etc/passwd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  373\nThe File /etc/group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  374\nThe File /etc/shadow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  374\nThe File /etc/gshadow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  375\nAdding and Deleting User Accounts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  376\nThe Skeleton Directory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  378\nAdding and Deleting Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  379\nThe passwd Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  379\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  381\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  383\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  384\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  385\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  387\n5.3 Managing File Permissions and Ownership . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  390"
    },
    {
        "Pagina": 9,
        "Contenuto": "5.3 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  391\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  391\nQuerying Information about Files and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  391\nWhat about Directories? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  393\nSeeing Hidden Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  393\nUnderstanding Filetypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  394\nUnderstanding Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  395\nModifying File Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  397\nSymbolic Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  398\nNumeric Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  399\nModifying File Ownership . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  400\nQuerying Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  401\nSpecial Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  402\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  405\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  407\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  408\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  409\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  412\n5.4 Special Directories and Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  415\n5.4 Lesson 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  416\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  416\nTemporary Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  416\nUnderstanding Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  418\nGuided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  423\nExplorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  424\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  427\nAnswers to Guided Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  428\nAnswers to Explorational Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  429\nImprint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  433"
    },
    {
        "Pagina": 10,
        "Contenuto": "Topic 1: The Linux Community and a Career in Open Source\nLinux Essentials (Version 1.6) |\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     1"
    },
    {
        "Pagina": 11,
        "Contenuto": "1.1 Linux Evolution and Popular Operating Systems\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 1.1\nWeight\n2\nKey knowledge areas\n•Distributions\n•Embedded Systems\n•Linux in the Cloud\nPartial list of the used files, terms and utilities\n•Debian, Ubuntu (LTS)\n•CentOS, openSUSE, Red Hat, SUSE\n•Linux Mint, Scientific Linux\n•Raspberry Pi, Raspbian\n•Android\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n2     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 12,
        "Contenuto": "1.1 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 1 The Linux Community and a Career in Open\nSource\nObjective: 1.1 Linux Evolution and Popular Operating\nSystems\nLesson: 1 of 1\nIntroduction\nLinux is one of the most popular operating systems. Its development was started in 1991 by Linus\nTorvalds. The operating system was inspired by Unix, another operating system developed in the\n1970s by AT&T Laboratories. Unix was geared towards small computers. At the time, “small”\ncomputers were considered machines that don’t need an entire hall with air conditioning and cost\nless than one million dollars. Later, they were considered as the machines that can be lifted by\ntwo people. At that time, an affordable Unix system was not readily available on computers such\nas office computers, which were tended to be based on the x86 platform. Therefore Linus, who\nwas a student by that time, started to implement a Unix-like operating system which was\nsupposed to run on this platform.\nMostly, Linux uses the same principles and basic ideas of Unix, but Linux itself doesn’t contain\nUnix code, as it is an independent project. Linux is not backed by an individual company but by\nan international community of programmers. As it is freely available, it can be used by anyone\nwithout restrictions.\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     3"
    },
    {
        "Pagina": 13,
        "Contenuto": "Distributions\nA Linux distribution  is a bundle that consists of a Linux kernel  and a selection of applications that\nare maintained by a company or user community. A distribution’s goal is to optimize the kernel\nand the applications that run on the operating system for a certain use case or user group.\nDistributions often include distribution-specific tools for software installation and system\nadministration. This is why some distributions are mainly used for desktop environments where\nthey need to be easy to use while others are mainly used to run on servers to use the available\nresources as efficiently as possible.\nAnother way to classify distributions is by referring to the distribution family  they belong to.\nDistributions of the Debian distribution family use the package manager dpkg to manage the\nsoftware that is run on the operating system. Packages that can be installed with the package\nmanager are maintained by voluntary members of the distribution’s community. Maintainers use\nthe deb package format to specify how the software is installed on the operating system and how\nit is configured by default. Just like a distribution, a package is a bundle of software and a\ncorresponding configuration and documentation that makes it easier for the user to install,\nupdate and use the software.\nThe Debian GNU/Linux  distribution is the biggest distribution of the Debian distribution family.\nThe Debian GNU/Linux Project was launched by Ian Murdock in 1993. Today thousands of\nvolunteers are working on the project. Debian GNU/Linux aims to provide a very reliable\noperating system. It also promotes Richard Stallman’s vision of an operating system that respects\nthe freedoms of the user to run, study, distribute and improve the software. This is why it does not\nprovide any proprietary software by default.\nUbuntu  is another Debian-based distribution worth mentioning. Ubuntu was created by Mark\nShuttleworth and his team in 2004, with the mission to bring an easy to use Linux desktop\nenvironment. Ubuntu’s mission is to provide a free software to everyone across the world as well\nas to cut the cost of professional services. The distribution has a scheduled release every six\nmonths with a long-term support release every 2 years.\nRed Hat  is a Linux distribution developed and maintained by the identically named software\ncompany, which was acquired by IBM in 2019. The Red Hat Linux distribution was started in 1994\nand re-branded in 2003 to Red Hat Enterprise Linux , often abbreviated as RHEL. It is provided to\ncompanies as a reliable enterprise solution that is supported by Red Hat and comes with software\nthat aims to ease the use of Linux in professional server environments. Some of its components\nrequire fee-based subscriptions or licenses. The CentOS  project uses the freely available source\ncode of Red Hat Enterprise Linux and compiles it to a distribution which is available completely\nfree of charge, but in return does not come with commercial support.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n4     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 14,
        "Contenuto": "Both RHEL and CentOS are optimized for use in server environments. The Fedora  project was\nfounded in 2003 and creates a Linux distribution which is aimed at desktop computers. Red Hat\ninitiated and maintains the Fedora distribution ever since. Fedora is very progressive and adopts\nnew technologies very quickly and is sometimes considered a test-bed for new technologies which\nlater might be included in RHEL. All Red Hat based distributions use the package format rpm.\nThe company SUSE was founded in 1992 in Germany as a Unix service provider. The first version\nof SUSE Linux  was released in 1994. Over the years SUSE Linux became mostly known for its YaST\nconfiguration tool. This tool allows administrators to install and configure software and\nhardware, set up servers and networks. Similar to RHEL, SUSE releases SUSE Linux Enterprise\nServer , which is their commercial edition. This is less frequently released and is suitable for\nenterprise and production deployment. It is distributed as a server as well as a desktop\nenvironment, with fit-for-purpose packages. In 2004, SUSE released the openSUSE  project, which\nopened opportunities for developers and users to test and further develop the system. The\nopenSUSE distribution is freely available to download.\nIndependent distributions have been released over the years. Some of them are based on either\nRed Hat or Ubuntu, some are designed to improve a specific propriety of a system or hardware.\nThere are distributions built with specific functionalities like QubesOS , a very secure desktop\nenvironment, or Kali Linux , which provides an environment for exploiting software\nvulnerabilities, mainly used by penetration testers. Recently various super small Linux\ndistributions are designed to specifically run in Linux containers, such as Docker. There are also\ndistributions built specifically for components of embedded systems and even smart devices.\nEmbedded Systems\nEmbedded systems are a combination of computer hardware and software designed to have a\nspecific function within a larger system. Usually they are part of other devices and help to control\nthese devices. Embedded systems are found in automotive, medical and even military\napplications. Due to its wide variety of applications, a variety of operating systems based on the\nLinux kernel was developed in order to be used in embedded systems. A significant part of smart\ndevices have a Linux kernel based operating system running on it.\nTherefore, with embedded systems comes embedded software. The purpose of this software is to\naccess the hardware and make it usable. The major advantages of Linux over any proprietary\nembedded software include cross vendor platform compatibility, development, support and no\nlicense fees. Two of the most popular embedded software projects are Android, that is mainly\nused on mobile phones across a variety of vendors and Raspbian, which is used mainly on\nRaspberry Pi.\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     5"
    },
    {
        "Pagina": 15,
        "Contenuto": "Android\nAndroid is mainly a mobile operating system developed by Google. Android Inc. was founded in\n2003 in Palo Alto, California. The company initially created an operating system meant to run on\ndigital cameras. In 2005, Google bought Android Inc. and developed it to be one of the biggest\nmobile operating systems.\nThe base of Android is a modified version of the Linux kernel with additional open source\nsoftware. The operating system is mainly developed for touchscreen devices, but Google has\ndeveloped versions for TV and wrist watches. Different versions of Android have been developed\nfor game consoles, digital cameras, as well as PCs.\nAndroid is freely available in open source as Android Open Source Project  (AOSP). Google offers a\nseries of proprietary components in addition to the open source core of Android. These\ncomponents include applications such as Google Calendar, Google Maps, Google Mail, the Chrome\nbrowser as well as the Google Play Store which facilitates the easy installation of apps. Most users\nconsider these tools an integral part of their Android experience. Therefore almost all mobile\ndevices shipped with Android in Europe and America include proprietary Google software.\nAndroid on embedded devices has many advantages. The operating system is intuitive and easy to\nuse with a graphical user interface, it has a very wide developer community, therefore it is easy to\nfind help for development. It is also supported by the majority of the hardware vendors with an\nAndroid driver, therefore it is easy and cost effective to prototype an entire system.\nRaspbian and the Raspberry Pi\nRaspberry Pi is a low cost, credit-card sized computer that can function as a full-functionality\ndesktop computer, but it can be used within an embedded Linux system. It is developed by the\nRaspberry Pi Foundation, which is an educational charity based in UK. It mainly has the purpose\nto teach young people to learn to program and understand the functionality of computers. The\nRaspberry Pi can be designed and programmed to perform desired tasks or operations that are\npart of a much more complex system.\nThe specialties of the Raspberry Pi include a set of General Purpose Input-Output (GPIO) pins\nwhich can be used to attach electronic devices and extension boards. This allows using the\nRaspberry Pi as a platform for hardware development. Although it was intended for educational\npurposes, Raspberry Pis are used today in various DIY projects as well as for industrial\nprototyping when developing embedded systems.\nThe Raspberry Pi uses ARM processors. Various operating systems, including Linux, run on the\nRaspberry Pi. Since the Raspberry Pi does not contain a hard disk, the operating system is started\nfrom an SD memory card. One of the most prominent Linux distributions for the Raspberry Pi is\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n6     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 16,
        "Contenuto": "Raspbian . As the name suggests, it belongs to the Debian distribution family. It is customized to be\ninstalled on the Raspberry Pi hardware and provides more than 35000 packages optimized for this\nenvironment. Besides Raspbian, numerous other Linux distributions exist for the Raspberry Pi,\nlike, for example, Kodi, which turns the Raspberry Pi into a media center.\nLinux and the Cloud\nThe term cloud computing  refers to a standardized way of consuming computing resources, either\nby buying them from a public cloud provider or by running a private cloud. As of 2017 reports,\nLinux runs 90% of the public cloud workload. Every cloud provider, from Amazon Web Services \n(AWS) to Google Cloud Platform  (GCP), offers different forms of Linux. Even Microsoft offers\nLinux-based virtual machines in their Azure  cloud today.\nLinux is usually offered as part of Infrastructure as a Service  (IaaS) offering. IaaS instances are\nvirtual machines which are provisioned within minutes in the cloud. When starting an IaaS\ninstance, an image is chosen which contains the data that is deployed to the new instance. Cloud\nproviders offer various images containing ready to run installations of both popular Linux\ndistributions as well as own versions of Linux. The cloud user chooses an image containing their\npreferred distribution and can access a cloud instance running this distribution shortly after.\nMost cloud providers add tools to their images to adjust the installation to a specific cloud\ninstance. These tools can, for example, extend the file systems of the image to fit the actual hard\ndisk of the virtual machine.\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     7"
    },
    {
        "Pagina": 17,
        "Contenuto": "Guided Exercises\n1.How is Debian GNU/Linux different from Ubuntu? Name two aspects.\n2.What are the most common environments/platforms Linux is used for? Name three different\nenvironments/platforms and name one distribution you can use for each.\n3.You are planning to install a Linux distribution in a new environment. Name four things that\nyou should consider when choosing a distribution.\n4.Name three devices that the Android OS runs on, other than smartphones.\n5.Explain three major advantages of cloud computing.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n8     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 18,
        "Contenuto": "Explorational Exercises\n1.Considering cost and performance, which distributions are mostly suitable for a business that\naims to reduce licensing costs, while keeping performance at its highest? Explain why.\n2.What are the major advantages of the Raspberry Pi and which functions can they take in\nbusiness?\n3.What range of distributions does Amazon Cloud Services and Google Cloud offer? Name at least\nthree common ones and two different ones.\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     9"
    },
    {
        "Pagina": 19,
        "Contenuto": "Summary\nIn this lesson you learned:\n•What distributions does Linux have\n•What are Linux embedded systems\n•How are Linux embedded systems used\n•Different applicabilities of Android\n•Different uses of a Raspberry Pi\n•What is Cloud Computing\n•What role does Linux play in cloud computing\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n10     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 20,
        "Contenuto": "Answers to Guided Exercises\n1.How is Debian GNU/Linux different from Ubuntu? Name two aspects.\nUbuntu is based on a snapshot of Debian, therefore there are many similarities between them.\nHowever, there are still significant differences between them. The first one would be the\napplicability for beginners. Ubuntu is recommended for beginners because of its ease of use\nand on the other hand Debian is recommended for more advanced users. The major difference\nis the complexity of the user configuration that Ubuntu doesn’t require during the installation\nprocess.\nAnother difference would be the stability of each distribution. Debian is considered to be more\nstable compared to Ubuntu. This is because Debian receives fewer updates that are tested in\ndetail and the entire operating system is more stable. On the other hand, Ubuntu enables the\nuser to use the latest releases of software and all the new technologies.\n2.What are the most common environments/platforms Linux is used for? Name three different\nenvironments/platforms and name one distribution you can use for each.\nA few of the common environments/platforms would be smartphone, desktop and server. On\nsmartphones, it can be used by distributions such as Android. On desktop and server, it can be\nused by any distribution that is mostly suitable with the functionality of that machine, from\nDebian, Ubuntu to CentOS and Red Hat Enterprise Linux.\n3.You are planning to install a Linux distribution in a new environment. Name four things that\nyou should consider when choosing a distribution.\nWhen choosing a distribution, a few of the main things that should be considered is cost,\nperformance, scalability, how stable it is and the hardware demand of the system.\n4.Name three devices that the Android OS runs on, other than smartphones.\nOther devices that Android runs on are smart TVs, tablet computers, Android Auto and\nsmartwatches.\n5.Explain three major advantages of cloud computing.\nThe major advantages of cloud computing are flexibility, easy to recover and low use cost.\nCloud based services are easy to implement and scale, depending on the business\nrequirements. It has a major advantage in backup and recovery solutions, as it enables\nbusinesses to recover from incidents faster and with less repercussions. Furthermore, it\nreduces operation costs, as it allows to pay just for the resources that a business uses, on a\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     11"
    },
    {
        "Pagina": 21,
        "Contenuto": "subscription-based model.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n12     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 22,
        "Contenuto": "Answers to Explorational Exercises\n1.Considering cost and performance, which distributions are mostly suitable for a business that\naims to reduce licensing costs, while keeping performance at its highest? Explain why.\nOne of the most suitable distributions to be used by business is CentOS. This is because it\nincorporates all Red Hat products, which are further used within their commercial operating\nsystem, while being free to use. Similarly, Ubuntu LTS releases guarantee support for a longer\nperiod of time. The stable versions of Debian GNU/Linux are also often used in enterprise\nenvironments.\n2.What are the major advantages of the Raspberry Pi and which functions can they take in\nbusiness?\nRaspberry Pi is small in size while working as a normal computer. Furthermore, it is low cost\nand can handle web traffic and many other functionalities. It can be used as a server, a firewall\nand can be used as the main board for robots, and many other small devices.\n3.What range of distributions does Amazon Cloud Services and Google Cloud offer? Name at least\nthree common ones and two different ones.\nThe common distributions between Amazon and Google Cloud Services are Ubuntu, CentOS\nand Red Hat Enterprise Linux. Each cloud provider also offers specific distributions that the\nother one doesn’t. Amazon has Amazon Linux and Kali Linux, while Google offers the use of\nFreeBSD and Windows Servers.\nLinux Essentials (Version 1.6) | 1.1 Linux Evolution and Popular Operating Systems\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     13"
    },
    {
        "Pagina": 23,
        "Contenuto": "1.2 Major Open Source Applications\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 1.2\nWeight\n2\nKey knowledge areas\n•Desktop applications\n•Server applications\n•Development languages\n•Package management tools and repositories\nPartial list of the used files, terms and utilities\n•OpenOffice.org, LibreOffice, Thunderbird, Firefox, GIMP\n•Nextcloud, ownCloud\n•Apache HTTPD, NGINX, MariaDB, MySQL, NFS, Samba\n•C, Java, JavaScript, Perl, shell, Python, PHP\n•dpkg, apt-get, rpm, yum\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n14     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 24,
        "Contenuto": "1.2 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 1 The Linux Community and a Career in Open\nSource\nObjective: 1.2 Major Open Source Applications\nLesson: 1 of 1\nIntroduction\nAn application is a computer program whose purpose is not directly tied to the inner workings of\nthe computer, but with tasks performed by the user. Linux distributions offer many application\noptions to perform a variety of tasks, such as office applications, web browsers, multimedia\nplayers and editors, etc. There is often more than one application or tool to perform a particular\njob. It is up to the user to choose the application which best fits their needs.\nSoftware Packages\nAlmost every Linux distribution offers a pre-installed set of default applications. Besides those\npre-installed applications, a distribution has a package repository with a vast collection of\napplications available to install through its package manager . Although the various distributions\noffer roughly the same applications, several different package management systems exist for\nvarious distributions. For instance, Debian, Ubuntu and Linux Mint use the dpkg, apt-get and\napt tools to install software packages, generally referred as DEB packages . Distributions such as\nRed Hat, Fedora and CentOS use the rpm, yum and dnf commands instead, which in turn install\nRPM packages . As the application packaging is different for each distribution family, it is very\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     15"
    },
    {
        "Pagina": 25,
        "Contenuto": "important to install packages from the correct repository designed to the particular distribution.\nThe end user usually doesn’t have to worry about those details, as the distribution’s package\nmanager will choose the right packages, the required dependencies and future updates.\nDependencies are auxiliary packages needed by programs. For example, if a library provides\nfunctions for dealing with JPEG images which are used by multiple programs, this library is likely\npackaged in its own package on which all applications using the library depend.\nThe commands dpkg and rpm operate on individual package files. In practice, almost all package\nmanagement tasks are performed by the commands apt-get or apt on systems that use DEB\npackages or by yum or dnf on systems that use RPM packages. These commands work with\ncatalogues of packages, can download new packages and their dependencies, and check for newer\nversions of the installed packages.\nPackage Installation\nSuppose you have heard about a command called figlet which prints enlarged text on the\nterminal and you want to try it. However, you get the following message after executing the\ncommand figlet:\n$ figlet\n-bash: figlet: command not found\nThat probably means the package is not installed on your system. If your distribution works with\nDEB packages, you can search its repositories using apt-cache search package_name  or apt\nsearch package_name . The apt-cache  command is used to search for packages and to list\ninformation about available packages. The following command looks for any occurrences of the\nterm “figlet” in the package’s names and descriptions:\n$ apt-cache search figlet\nfiglet - Make large character ASCII banners out of ordinary text\nThe search identified a package called figlet  that corresponds to the missing command. The\ninstallation and removal of a package require special permissions granted only to the system’s\nadministrator: the user named root. On desktop systems, ordinary users can install or remove\npackages by prepending the command sudo to the installation/removal commands. That will\nrequire you to type your password to proceed. For DEB packages, the installation is performed\nwith the command apt-get install package_name  or apt install package_name :\n$ sudo apt-get install figlet\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n16     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 26,
        "Contenuto": "Reading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following NEW packages will be installed:\n  figlet\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\nAt this point the package will be downloaded and installed on the system. Any dependencies that\nthe package eventually needs will also be downloaded and installed:\nNeed to get 184 kB of archives.\nAfter this operation, 741 kB of additional disk space will be used.\nGet:1 http://archive.raspbian.org/raspbian stretch/main armhf figlet armhf 2.2.5-2 [184 kB]\nFetched 184 kB in 0s (213 kB/s)\nSelecting previously unselected package figlet.\n(Reading database ... 115701 files and directories currently installed.)\nPreparing to unpack .../figlet_2.2.5-2_armhf.deb ...\nUnpacking figlet (2.2.5-2) ...\nSetting up figlet (2.2.5-2) ...\nupdate-alternatives: using /usr/bin/figlet-figlet to provide /usr/bin/figlet (figlet) in\nauto mode\nProcessing triggers for man-db (2.7.6.1-2) ...\nAfter the download is finished, all files are copied to the proper locations, any additional\nconfiguration will be performed and the command will become available:\n$ figlet Awesome!\n    _                                         _\n   / \\__      _____  ___  ___  _ __ ___   ___| |\n  / _ \\ \\ /\\ / / _ \\/ __|/ _ \\| '_ ` _ \\ / _ \\ |\n / ___ \\ V  V /  __/\\__ \\ (_) | | | | | |  __/_|\n/_/   \\_\\_/\\_/ \\___||___/\\___/|_| |_| |_|\\___(_)\nIn distributions based on RPM packages, searches are performed using yum search\npackage_name  or dnf search package_name . Let’s say you want to display some text in a more\nirreverent way, followed by a cartoonish cow, but you are not sure about the package that can\nperform that task. As with the DEB packages, the RPM search commands accept descriptive terms:\n$ yum search speaking cow\nLast metadata expiration check: 1:30:49 ago on Tue 23 Apr 2019 11:02:33 PM -03.\n==================== Name & Summary Matched: speaking, cow ====================\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     17"
    },
    {
        "Pagina": 27,
        "Contenuto": "cowsay.noarch : Configurable speaking/thinking cow\nAfter finding a suitable package at the repository, it can be installed with yum install\npackage_name  or dnf install package_name :\n$ sudo yum install cowsay\nLast metadata expiration check: 2:41:02 ago on Tue 23 Apr 2019 11:02:33 PM -03.\nDependencies resolved.\n==============================================================================\n Package         Arch           Version               Repository         Size\n==============================================================================\nInstalling:\n cowsay          noarch         3.04-10.fc28          fedora             46 k\nTransaction Summary\n==============================================================================\nInstall  1 Package\nTotal download size: 46 k\nInstalled size: 76 k\nIs this ok [y/N]: y\nOnce again, the desired package and all its possible dependencies will be downloaded and\ninstalled:\nDownloading Packages:\ncowsay-3.04-10.fc28.noarch.rpm                    490 kB/s |  46 kB     00:00\n==============================================================================\nTotal                                              53 kB/s |  46 kB     00:00\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\nPreparing        :                                                          1/1\nInstalling       : cowsay-3.04-10.fc28.noarch                               1/1\nRunning scriptlet: cowsay-3.04-10.fc28.noarch                               1/1\nVerifying        : cowsay-3.04-10.fc28.noarch                               1/1\nInstalled:\ncowsay.noarch 3.04-10.fc28\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n18     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 28,
        "Contenuto": "Complete!\nThe command cowsay does exactly what its name implies:\n$ cowsay \"Brought to you by yum\"\n _______________________\n< Brought to you by yum >\n -----------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\nAlthough they may seem useless, commands figlet and cowsay provide a way to draw the\nattention of other users to relevant information.\nPackage Removal\nThe same commands used to install packages are used to remove them. All the commands accept\nthe remove keyword to uninstall an installed package: apt-get remove package_name  or apt\nremove package_name  for DEB packages and yum remove package_name  or dnf remove\npackage_name  for RPM packages. The sudo command is also needed to perform the removal. For\nexample, to remove the previously installed package figlet  from a DEB-based distribution:\n$ sudo apt-get remove figlet\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following packages will be REMOVED:\n  figlet\n0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.\nAfter this operation, 741 kB disk space will be freed.\nDo you want to continue? [Y/n] Y\nAfter confirming the operation, the package is erased from the system:\n(Reading database ... 115775 files and directories currently installed.)\nRemoving figlet (2.2.5-2) ...\nProcessing triggers for man-db (2.7.6.1-2) ...\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     19"
    },
    {
        "Pagina": 29,
        "Contenuto": "A similar procedure is performed on an RPM-based system. For example, to remove the\npreviously installed package cowsay  from an RPM-based distribution:\n$ sudo yum remove cowsay\nDependencies resolved.\n==================================================================================\n Package          Arch             Version                Repository         Size\n==================================================================================\nRemoving:\n cowsay           noarch           3.04-10.fc28           @fedora            76 k\nTransaction Summary\n==================================================================================\nRemove  1 Package\nFreed space: 76 k\nIs this ok [y/N]: y\nLikewise, a confirmation is requested and the package is erased from the system:\nRunning transaction check\nTransaction check succeeded.\nRunning transaction test\nTransaction test succeeded.\nRunning transaction\n  Preparing        :                                                          1/1\n  Erasing          : cowsay-3.04-10.fc28.noarch                               1/1\n  Running scriptlet: cowsay-3.04-10.fc28.noarch                               1/1\n  Verifying        : cowsay-3.04-10.fc28.noarch                               1/1\nRemoved:\n  cowsay.noarch 3.04-10.fc28\nComplete!\nThe configuration files of the removed packages are kept on the system, so they can be used again\nif the package is reinstalled in the future.\nOffice Applications\nOffice applications are used for editing files such as texts, presentations, spreadsheets and other\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n20     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 30,
        "Contenuto": "formats commonly used in an office environment. These applications are usually organised in\ncollections called office suites .\nFor a long time, the most used office suite in Linux was the OpenOffice.org  suite. OpenOffice.org\nwas an open source version of the StarOffice suite  released by Sun Microsystems . A few years later\nSun was acquired by Oracle Corporation , which in turn transferred the project to the Apache\nFoundation  and OpenOffice.org was renamed to Apache OpenOffice . Meanwhile, another office\nsuite based on the same source code was released by the Document Foundation , which named it\nLibreOffice .\nThe two projects have the same basic features and are compatible with the document formats\nfrom Microsoft Office . However, the preferred document format is the Open Document Format , a\nfully open and ISO standardized file format. The use of ODF files ensures that documents can be\ntransferred between operating systems and applications from different vendors, such as Microsoft\nOffice. The main applications offered by OpenOffice/LibreOffice are:\nWriter\nText editor\nCalc\nSpreadsheets\nImpress\nPresentations\nDraw\nVector drawing\nMath\nMath formulas\nBase\nDatabase\nBoth LibreOffice and Apache OpenOffice are open source software, but LibreOffice is licensed\nunder LGPLv3 and Apache OpenOffice is licensed under Apache License 2.0. The licensing\ndistinction implies that LibreOffice can incorporate improvements made by Apache OpenOffice,\nbut Apache OpenOffice cannot incorporate improvements made by LibreOffice. That, and a more\nactive community of developers, are the reason most distributions adopt LibreOffice as their\ndefault office suite.\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     21"
    },
    {
        "Pagina": 31,
        "Contenuto": "Web Browsers\nFor most users, the main purpose of a computer is to provide access to the Internet. Nowadays,\nweb pages can act as a full featured app, with the advantage of being accessible from anywhere,\nwithout the need of installing extra software. That makes the web browser the most important\napplication of the operating system, at least for the average user.\nTIPOne of the best sources for learning about web development is the MDN Web Docs,\navailable at https://developer.mozilla.org/ . Maintained by Mozilla, the site is full of\ntutorials for beginners and reference materials on most modern web technologies.\nThe main web browsers in the Linux environment are Google Chrome  and Mozilla Firefox .\nChrome is a web browser maintained by Google but is based on the open source browser named\nChromium , which can be installed using the distribution’s package manager and is fully\ncompatible with Chrome. Maintained by Mozilla, a non-profit organization, Firefox is a browser\nwhose origins are linked to Netscape, the first popular web browser to adopt the open source\nmodel. The Mozilla Foundation is deeply involved with the development of the open standards\nunderlying the modern web.\nMozilla also develops other applications, like the e-mail client Thunderbird . Many users opt to use\nwebmail instead of a dedicated email application, but a client like Thunderbird offers extra\nfeatures and integrates best with other applications on the desktop.\nMultimedia\nCompared to the available web applications, desktop applications are still the best option for the\ncreation of multimedia content. Multimedia related activities like video rendering often require\nhigh amounts of system resources, which are best managed by a local desktop application. Some\nof the most popular multimedia applications for the Linux environment and their uses are listed\nbelow.\nBlender\nA 3D renderer to create animations. Blender can also be used to export 3D objects to be printed\nby a 3D printer.\nGIMP\nA full-featured image editor, which can be compared with Adobe Photoshop , but has its own\nconcepts and tools to work with images. GIMP can be used to create, edit and save most bitmap\nfiles, like JPEG, PNG, GIF, TIFF and many others.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n22     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 32,
        "Contenuto": "Inkscape\nA vector graphics editor, similar to Corel Draw  or Adobe Illustrator . Inkscape’s default format is\nSVG, which is an open standard for vector graphics. SVG files can be opened by any web\nbrowser and, due to its nature as a vector graphic, it can be used in flexible layouts of web\npages.\nAudacity\nAn audio editor. Audacity can be used to filter, to apply effects and to convert between many\ndifferent audio formats, like MP3, WAV, OGG, FLAC, etc.\nImageMagick\nImageMagick is a command line tool to convert and edit most image file types. It can also be\nused to create PDF documents from image files and vice versa.\nThere are also many applications dedicated to multimedia playback. The most popular application\nfor video playback is VLC, but some users prefer other alternatives, like smplayer . Local music\nplayback also has many options, like Audacious , Banshee  and Amarok , which can also manage a\ncollection of local sound files.\nServer Programs\nWhen a web browser loads a page from a website, it actually connects to a remote computer and\nasks for a specific piece of information. In that scenario, the computer running the web browser is\ncalled the client  and the remote computer is called the server .\nThe server computer, which can be an ordinary desktop computer or specialized hardware, needs\na specific program to manage each type of information it will provide. Regarding serving web\npages, most servers around the world deploy open source server programs. This particular server\nprogram is called an HTTP server  (HTTP stands for Hyper Text Transfer Protocol ) and the most\npopular ones are Apache , Nginx  and lighttpd .\nEven simple web pages may require many requests, which can be ordinary files — called static\ncontent — or dynamic content rendered from various sources. The role of an HTTP server is to\ncollect and send all the requested data back to the browser, which then arranges the content as\ndefined by the received HTML document (HTML stands for Hyper Text Markup Language ) and\nother supporting files. Therefore, the rendering of a web page involves operations performed on\nthe server side and operations performed on the client side. Both sides can use custom scripts to\naccomplish specific tasks. On the HTTP server side, it is quite common to use the PHP scripting\nlanguage. JavaScript is the scripting language used on the client side (the web browser).\nServer programs can provide all kinds of information. It’s not uncommon to have a server\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     23"
    },
    {
        "Pagina": 33,
        "Contenuto": "program requesting information provided by other server programs. That is the case when an\nHTTP server requires information provided by a database server.\nFor instance, when a dynamic page is requested, the HTTP server usually queries a database to\ncollect all the required pieces of information and sends the dynamic content back to the client. In\na similar way, when a user registers on a website, the HTTP server gathers the data sent by the\nclient and stores it in a database.\nA database is an organized set of information. A database server stores contents in a formatted\nfashion, making it possible to read, write and link large amounts of data reliably and at great\nspeed. Open source database servers are used in many applications, not only on the Internet. Even\nlocal applications can store data by connecting to a local database server. The most common type\nof database is the relational database , where the data is organized in predefined tables. The most\npopular open source relational databases are MariaDB  (originated from MySQL ) and PostgreSQL .\nData Sharing\nIn local networks, like the ones found in offices and homes, it is desirable that computers not only\nshould be able to access the Internet, but also should be able to communicate with each other.\nSometimes a computer acts as a server, sometimes the same computer acts as a client. That is\nnecessary when one wants to access files on another computer in the network — for instance,\naccess a file stored on a desktop computer from a portable device — without the hassle of copying\nit to a USB drive or the like.\nBetween Linux machines, NFS (Network File System ) is often used. The NFS protocol is the\nstandard way to share file systems in networks equipped only with Unix/Linux machines. With\nNFS, a computer can share one or more of its directories with specific computers on the network,\nso they can read and write files in these directories. NFS can even be used to share an entire\noperating system’s directory tree with clients that will use it to boot from. These computers, called\nthin clients , are mostly often used in large networks to avoid the maintenance of each individual\noperating system on each machine.\nIf there are other types of operating systems attached to the network, it is recommended to use a\ndata sharing protocol that can be understood by all of them. This requirement is fulfilled by\nSamba . Samba implements a protocol for sharing files over the network originally made for the\nWindows operating system, but today is compatible with all major operating systems. With\nSamba, computers in the local network not only can share files, but also printers.\nOn some local networks, the authorization given upon login on a workstation is granted by a\ncentral server, called the domain controller , which manages the access to various local and remote\nresources. The domain controller is a service provided by Microsoft’s Active Directory . Linux\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n24     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 34,
        "Contenuto": "workstations can associate with a domain controller by using Samba or an authentication\nsubsystem called SSSD . As of version 4, Samba can also work as a domain controller on\nheterogeneous networks.\nIf the goal is to implement a cloud computing solution able to provide various methods of web\nbased data sharing, two alternatives should be considered: ownCloud  and Nextcloud . The two\nprojects are very similar because Nextcloud is a spin-off of ownCloud, which is not unusual\namong open source projects. Such spin-offs are usually called a fork. Both provide the same basic\nfeatures: file sharing and sync, collaborative workspaces, calendar, contacts and mail, all through\ndesktop, mobile and web interfaces. Nextcloud also provides private audio/video conferencing,\nwhilst ownCloud is more focused on file sharing and integration with third-party software. Many\nmore features are provided as plugins which can be activated later as needed.\nBoth ownCloud and Nextcloud offer a paid version with extra features and extended support.\nWhat makes them different from other commercial solutions is the ability to install Nextcloud or\nownCloud on a private server, free of charge, avoiding keeping sensitive data on an unknown\nserver. As all the services depend on HTTP communication and are written in PHP, the installation\nmust be performed on a previous configured web server, like Apache. If you consider installing\nownCloud or Nextcloud on your own server, make sure to also enable HTTPS to encrypt all\nconnections to your cloud.\nNetwork Administration\nCommunication between computers is only possible if the network is working correctly.\nNormally, the network configuration is done by a set of programs running on the router,\nresponsible for setting up and checking the network availability. In order to achieve this, two\nbasic network services are used: DHCP  (Dynamic Host Configuration Protocol ) and DNS  (Domain\nName System ).\nDHCP is responsible for assigning an IP address to the host when a network cable is connected or\nwhen the device enters a wireless network. When connecting to the Internet, the ISP’s DHCP\nserver will provide an IP address to the requesting device. A DHCP server is very useful in local\narea networks also, to automatically provide IP addresses to all connected devices. If DHCP is not\nconfigured or if it’s not working properly, it would be necessary to manually configure the IP\naddress of each device connected to the network. It is not practical to manually set the IP\naddresses on large networks or even in small networks, that’s why most network routers come\nwith a DHCP server pre-configured by default.\nThe IP address is required to communicate with another device on an IP network, but domain\nnames like www.lpi.org  are much more likely to be remembered than an IP number like\n203.0.113.165 . The domain name by itself, however, is not enough to establish the\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     25"
    },
    {
        "Pagina": 35,
        "Contenuto": "communication through the network. That is why the domain name needs to be translated to an\nIP address by a DNS server. The IP address of the DNS server is provided by the ISP’s DHCP server\nand it’s used by all connected systems to translate domain names to IP addresses.\nBoth DHCP and DNS settings can be modified by entering the web interface provided by the\nrouter. For instance, it is possible to restrict the IP assignment only to known devices or associate\na fixed IP address to specific machines. It’s also possible to change the default DNS server\nprovided by the ISP. Some third-party DNS servers, like the ones provided by Google or OpenDNS,\ncan sometimes provide faster responses and extra features.\nProgramming Languages\nAll computer programs (client and server programs, desktop applications and the operating\nsystem itself) are made using one or more programming languages. Programs can be a single file\nor a complex system of hundreds of files, which the operating system treats as an instruction\nsequence to be interpreted and performed by the processor and other devices.\nThere are numerous programming languages for very different purposes and Linux systems\nprovide a lot of them. Since open source software also includes the sources of the programs, Linux\nsystems offer developers perfect conditions to understand, modify or create software according to\ntheir own needs.\nEvery program begins as a text file, called source code . This source code is written in a more or\nless human-friendly language that describes what the program is doing. A computer processor can\nnot directly execute this code. In compiled languages , the source code is therefore be converted to\na binary file  which can then be executed by the computer. A program called compiler  is\nresponsible for doing the conversion from source code to executable form. Since the compiled\nbinary is specific to one kind of processor, the program might have to be re-compiled to run on\nanother type of computer.\nIn interpreted languages , the program does not need to be previously compiled. Instead, an\ninterpreter  reads the source code and executes its instruction every time the program is run. This\nmakes the development easier and faster, but at the same time interpreted programs tend to be\nslower than compiled programs.\nHere some of the most popular programming languages:\nJavaScript\nJavaScript is a programming language mostly used in web pages. In its origins, JavaScript\napplications were very simple, like form validation routines. As for today, JavaScript is\nconsidered a first class language and it is used to create very complex applications not only on\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n26     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 36,
        "Contenuto": "the web, but on servers and mobile devices.\nC\nThe C programming language is closely related with operating systems, particularly Unix, but it\nis used to write any kind of program to almost any kind of device. The great advantages of C\nare flexibility and speed. The same source code written in C can be compiled to run in different\nplatforms and operating systems, with little or no modification. After being compiled, however,\nthe program will run only in the targeted system.\nJava\nThe main aspect of Java is that programs written in this language are portable, which means\nthat the same program can be executed in different operating systems. Despite the name, Java\nis not related to JavaScript.\nPerl\nPerl is a programming language most used to process text content. It has a strong regular\nexpressions emphasis, which makes Perl a language suited for text filtering and parsing.\nShell\nThe shell, particularly the Bash shell, is not just a programming language, but an interactive\ninterface to run other programs. Shell programs, known as shell scripts , can automate complex\nor repetitive tasks on the command line environment.\nPython\nPython is a very popular programming language among students and professionals not directly\ninvolved with computer science. Whilst having advanced features, Python is a good way to\nstart learning programming for its easy to use approach.\nPHP\nPHP is most used as a server side scripting language for generating content for the web. Most\nonline HTML pages are not static files, but dynamic content generated by the server from\nvarious sources, like databases. PHP programs — sometimes just called PHP pages or PHP\nscripts — are often used to generate this kind of content. The term LAMP comes from the\ncombination of a Linux operating system, an Apache HTTP server, a MySQL (or MariaDB)\ndatabase and PHP programming. LAMP servers are a very popular solution for running web\nservers. Besides PHP, all of the programming languages described before can be used to\nimplement such applications too.\nC and Java are compiled languages. In order to be executed by the system, source code written in\nC is converted to binary machine code, whereas Java source code is converted to bytecode \nexecuted in a special software environment called Java Virtual Machine . JavaScript, Perl, Shell\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     27"
    },
    {
        "Pagina": 37,
        "Contenuto": "script, Python and PHP are all interpreted languages, which are also called scripting languages .\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n28     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 38,
        "Contenuto": "Guided Exercises\n1.For each of the following commands, identify whether it is associated with the Debian\npackaging system  or the Red Hat packaging system :\ndpkg\nrpm\napt-get\nyum\ndnf\n2.Which command could be used to install Blender on Ubuntu? After installation, how can the\nprogram be executed?\n3.Which application from the LibreOffice suite can be used to work with electronic\nspreadsheets?\n4.Which open-source web browser is used as the basis for the development of Google Chrome?\n5.SVG is an open standard for vector graphics. Which is the most popular application for editing\nSVG files in Linux systems?\n6.For each of the following file formats, write the name of an application able to open and edit\nthe corresponding file:\npng\ndoc\nxls\nppt\nwav\n7.Which software package allows file sharing between Linux and Windows machines over the\nlocal network?\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     29"
    },
    {
        "Pagina": 39,
        "Contenuto": "Linux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n30     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 40,
        "Contenuto": "Explorational Exercises\n1.You know that configuration files are kept even if the associated package is removed from the\nsystem. How could you automatically remove the package named cups  and its configuration\nfiles from a DEB based system?\n2.Suppose you have many TIFF image files and want to convert them to JPEG. Which software\npackage could be used to convert those files directly at the command line?\n3.Which software package do you need to install in order to be able to open Microsoft Word\ndocuments sent to you by a Windows user?\n4.Every year, linuxquestions.org promotes a survey about the most popular Linux applications.\nVisit https://www.linuxquestions.org/questions/2018-linuxquestions-org-members-choice-\nawards-128/  and find out which desktop applications are most popular among experienced\nLinux users.\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     31"
    },
    {
        "Pagina": 41,
        "Contenuto": "Summary\nIn this lesson, you learned:\n•The package management systems used in major Linux distributions\n•Open source applications that can edit popular file formats\n•The server programs underlying many important Internet and local network services\n•Common programming languages and their uses\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n32     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 42,
        "Contenuto": "Answers to Guided Exercises\n1.For each of the following commands, identify whether it is associated with the Debian\npackaging system  or the Red Hat packaging system :\ndpkg Debian packaging system\nrpm Red Hat packaging system\napt-get Debian packaging system\nyum Red Hat packaging system\ndnf Red Hat packaging system\n2.Which command could be used to install Blender on Ubuntu? After installation, how can the\nprogram be executed?\nThe command apt-get install blender . The package name should be specified in\nlowercase. The program can be executed directly from the terminal with the command\nblender or by choosing it on the applications menu.\n3.Which application from the LibreOffice suite can be used to work with electronic\nspreadsheets?\nCalc\n4.Which open-source web browser is used as the basis for the development of Google Chrome?\nChromium\n5.SVG is an open standard for vector graphics. Which is the most popular application for editing\nSVG files in Linux systems?\nInkscape\n6.For each of the following file formats, write the name of an application able to open and edit\nthe corresponding file:\npng Gimp\ndoc LibreOffice Writer\nxls LibreOffice Calc\nppt LibreOffice Impress\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     33"
    },
    {
        "Pagina": 43,
        "Contenuto": "wav Audacity\n7.Which software package allows file sharing between Linux and Windows machines over the\nlocal network?\nSamba\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n34     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 44,
        "Contenuto": "Answers to Explorational Exercises\n1.You know that configuration files are kept even if the associated package is removed from the\nsystem. How could you automatically remove the package named cups  and its configuration\nfiles from a DEB based system?\napt-get purge cups\n2.Suppose you have many TIFF image files and want to convert them to JPEG. Which software\npackage could be used to convert those files directly at the command line?\nImageMagick\n3.Which software package do you need to install in order to be able to open Microsoft Word\ndocuments sent to you by a Windows user?\nLibreOffice or OpenOffice\n4.Every year, linuxquestions.org promotes a survey about the most popular Linux applications.\nVisit https://www.linuxquestions.org/questions/2018-linuxquestions-org-members-choice-\nawards-128/  and find out which desktop applications are most popular among experienced\nLinux users.\nBrowser: Firefox. Email client: Thunderbird. Media player: VLC. Raster graphics editor: GIMP.\nLinux Essentials (Version 1.6) | 1.2 Major Open Source Applications\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     35"
    },
    {
        "Pagina": 45,
        "Contenuto": "1.3 Open Source Software and Licensing\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 1.3\nWeight\n1\nKey knowledge areas\n•Open source philosophy\n•Open source licensing\n•Free Software Foundation (FSF), Open Source Initiative (OSI)\nPartial list of the used files, terms and utilities\n•Copyleft, Permissive\n•GPL, BSD, Creative Commons\n•Free Software, Open Source Software, FOSS, FLOSS\n•Open source business models\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n36     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 46,
        "Contenuto": "1.3 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 1 The Linux Community and a Career in Open\nSource\nObjective: 1.3 Open Source Software and Licensing\nLesson: 1 of 1\nIntroduction\nWhile the terms free software  and open source software  are widely used, there are still some\nmisconceptions about their meaning. In particular, the concept of “freedom” needs closer\nexamination. Let’s start with the definition of the two terms.\nDefinition of Free and Open Source Software\nCriteria of Free Software\nFirst of all, “free” in the context of free software has nothing to do with “free of charge”, or as the\nfounder of the Free Software Foundation  (FSF), Richard Stallman, succinctly puts it:\nTo understand the concept, you should think of “free” as in “free speech,” not as in “free\nbeer”.\n— Richard Stallman, What is free software?\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     37"
    },
    {
        "Pagina": 47,
        "Contenuto": "Regardless of whether you have to pay for the software or not, there are four criteria which\nconstitute free software. Richard Stallman describes these criteria as “the four essential\nfreedoms”, the counting of which he starts from zero:\n•“The freedom to run the program as you wish, for any purpose (freedom 0).”\nWhere, how and for what purpose the software is used can neither be prescribed nor\nrestricted.\n•“The freedom to study how the program works, and change it so it does your computing as you\nwish (freedom 1). Access to the source code is a precondition for this.”\nEveryone may change the software according to their ideas and needs. This in turn\npresupposes that the so-called source code , i.e. all files of which a software consists, must be\navailable in a form readable by programmers. And, of course, this right applies to a single user\nwho may want to add a single feature, as well as to software companies that build complex\nsystems such as smartphone operating systems or router firmware.\n•“The freedom to redistribute copies so you can help others (freedom 2).”\nThis freedom explicitly encourages each user to share the software with others. It is therefore a\nmatter of the widest possible distribution and thus the widest possible community of users and\ndevelopers who, on the basis of these freedoms, further develop and improve the software for\nthe benefit of all.\n•“The freedom to distribute copies of your modified versions to others (freedom 3). By doing this\nyou can give the whole community a chance to benefit from your changes. Access to the source\ncode is a precondition for this.”\nThis is not only about the distribution of free software, but about the distribution of modified \nfree software. Anyone who makes changes to free software has the right to make the changes\navailable to others. If they do so, they are obliged to do so freely as well, i.e. they must not\nrestrict the original freedoms when distributing the software, even if they modified or\nextended it. For example, if a group of developers has different ideas about the direction of a\nspecific software than the original authors, it can split off its own development branch (called a\nfork) and continue it as a new project. But, of course, all obligations associated with these\nfreedoms remain.\nThe emphasis on the idea of freedom is also consistent insofar as every freedom movement is\ndirected against  something, namely an opponent who suppresses the postulated freedoms, who\nregards software as property and wants to keep it under lock and key. In contrast to free software,\nsuch software is called proprietary .\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n38     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 48,
        "Contenuto": "Open Source Software vs. Free Software\nFor many, free software  and open source software  are synonyms. The frequently used\nabbreviation FOSS  for Free and Open Source Software  emphasizes this commonality. FLOSS for\nFree/Libre and Open Source Software  is another popular term, which unmistakably emphasizes the\nidea of freedom also for other languages other than English. However, if one considers the origin\nand development of both terms, a differentiation is worthwhile.\nThe term free software  with the definition of the described four freedoms goes back to Richard\nStallman and the GNU project founded by him in 1985 — almost 10 years before the emergence of\nLinux. The name “GNU is not Unix” describes the intention with a wink of the eye: GNU started as\nan initiative to develop a technically convincing solution — namely the operating system\nUnix — from scratch, to make it available to the general public and to improve it continuously\nwith the general public. The openness of the source code was merely a technical and\norganizational necessity for this, but in its self-image the free software movement is still a social \nand political  — some also say ideological — movement.\nWith the success of Linux, the collaborative possibilities of the Internet, and the thousands of\nprojects and companies that emerged in this new software cosmos, the social aspect increasingly\nreceded into the background. The openness of the source code itself changed from a technical\nrequirement to a defining feature: as soon as the source code was visible, the software was\nconsidered “open source”. The social motives gave way to a more pragmatic approach to software\ndevelopment.\nFree software and open source software work on the same thing, with the same methods and in a\nworldwide community of individuals, projects and companies. But since they have come together\nfrom different directions — one social and one pragmatic-technical — there are sometimes\nconflicts. These conflicts arise when the results of the joint work do not correspond to the original\ngoals of both movements. This happens especially when software reveals its sources but does not\nrespect the four freedoms of free software at the same time, for example when there are\nrestrictions on disclosure, change, or connections with other software components.\nThe license  under which the software is available determines which conditions a software is\nsubject to with regard to use, distribution and modification. And because requirements and\nmotives can be very different, countless different licenses have been created in the FOSS area. Due\nto the much more fundamental approach of the free software movement, it is not surprising that\nit does not recognize many open source licenses as “free” and therefore rejects them. Conversely,\nthis is hardly the case due to the much more pragmatic open source approach.\nLet’s take a brief look at the actually very complex area of licenses below.\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     39"
    },
    {
        "Pagina": 49,
        "Contenuto": "Licenses\nUnlike a refrigerator or a car, software is not a physical  product, but a digital  product. Thus, a\ncompany cannot actually transfer ownership of such a product by selling it and changing the\nphysical possession — rather, it transfers the rights of use to that product, and the user\ncontractually agrees to those rights of use. Which rights of use these are and above all are not is\nrecorded in the software license, and thus it becomes understandable how important the\nregulations contained therein are.\nWhile large vendors of proprietary software, such as Microsoft or SAP, have their own licenses\nthat are precisely tailored to their products, the advocates of free and open source software have\nfrom the outset striven for clarity and general validity of their licenses, because after all, every\nuser should understand them and, if necessary, use them himself for his own developments.\nHowever, it should not be concealed that this ideal of simplicity can hardly be achieved because\ntoo many specific requirements and internationally not always compatible legal understandings\nstand in the way of this. To give just one example: German and American copyright law are\nfundamentally different. According to German law there is one person  as author  (more precisely:\nUrheber ), whose work is his intellectual property . While the author can grant permission to use his\nwork, he can not assign or give up his authorship. The latter is alien to American law. Here, too,\nthere is an author (who, however, can also be a company or an institution), but he only has\nexploitation rights which he can transfer in part or in full and thus completely detach himself\nfrom his work. An internationally valid licence must be interpreted with respect of different\nlegislation.\nThe consequences are numerous and sometimes very different FOSS licenses. Worse, still, are\ndifferent versions of a license, or a mix of licenses (within a project, or even when connecting\nmultiple projects) which can cause confusion or even legal disputes.\nBoth the representatives of free software and the advocates of the clearly economically oriented\nopen source movement created their own organizations, which today are decisively responsible\nfor the formulation of software licenses according to their principles and support their members\nin their enforcement.\nCopyleft\nThe already mentioned Free Software Foundation  (FSF) has formulated the GNU General Public\nLicense  (GPL) as one of the most important licenses for free software, which is used by many\nprojects, e.g. the Linux kernel. In addition, it has released licenses with case-specific\ncustomizations, such as the GNU Lesser General Public License  (LGPL), which governs the\ncombination of free software with modifications made to code where the source code for the\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n40     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 50,
        "Contenuto": "modifications do not have to be released to the public, the GNU Affero General Public License \n(AGPL), which covers selling access to hosted software, or the GNU Free Documentation License \n(FDL), which extends freedom principles to software documentation. In addition, the FSF makes\nrecommendations for or against third-party licenses, and affiliated projects such as GPL-\nViolations.org investigate suspected violations of free licenses.\nThe FSF calls the principle according to which a free license also applies to modified variants of\nthe software copyleft  — in contrast to the principle of restrictive copyright which it rejects. The\nidea, therefore, is to transfer the liberal principles of a software license as unrestrictedly as\npossible to future variants of the software in order to prevent subsequent restrictions.\nWhat sounds obvious and simple, however, leads to considerable complications in practice, which\nis why critics often call the copyleft principle “viral”, since it is transmitted to subsequent\nversions.\nFrom what has been said it follows, for example, that two software components that are licensed\nunder different copyleft licenses might not be combinable with each other, since both licenses\ncannot be transferred to the subsequent product at the same time. This can even apply to different\nversions of the same license!\nFor this reason, newer licenses or license versions often no longer grasp the copyleft so rigorously.\nAlready the mentioned GNU Lesser General Public License  (LGPL) is in this sense a concession to\nbe able to connect free software with “non-free” components, as it is frequently done with so-\ncalled libraries . Libraries contain subroutines or routines, which in turn are used by various other\nprograms. This leads to the common situation where proprietary software calls such a subroutine\nfrom a free library.\nAnother way to avoid license conflicts is dual licensing , where one software is licensed under\ndifferent licenses, e.g. a free license and a proprietary license. A typical use case is a free version\nof a software which might only be used when respecting the copyleft restrictions and the\nalternative offering to obtain the software under a different license which frees the licensee from\ncertain restriction in return for a fee which could be used to fund the development of the\nsoftware.\nIt should therefore become clear that the choice of license for software projects should be made\nwith much caution, since the cooperation with other projects, the combinability with other\ncomponents and also the future design of the own product depend on it. The copyleft presents\ndevelopers with special challenges in this respect.\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     41"
    },
    {
        "Pagina": 51,
        "Contenuto": "Open Source Definition and Permissive Licenses\nOn the open source side, it is the Open Source Initiative  (OSI), founded in 1998 by Eric S. Raymond\nand Bruce Perens, which is mainly concerned with licensing issues. It has also developed a\nstandardized procedure for checking software licenses for compliance with its Open Source\nDefinition . More than 80 recognized open source licenses can currently be found on the OSI\nwebsite.\nHere they also list licenses as “OSI-approved” that explicitly contradict the copyleft principle,\nespecially the BSD licenses  group. The Berkeley Software Distribution  (BSD) is a variant of the Unix\noperating system originally developed at the University of Berkeley, which later gave rise to free\nprojects such as NetBSD , FreeBSD  and OpenBSD . The licenses underlying these projects are often\nreferred to as permissive . In contrast to copyleft licenses, they do not have the aim of establishing\nthe terms of use of modified variants. Rather, the maximum freedom should help the software to\nbe as widely distributed as possible by leaving the editors of the software alone to decide how to\nproceed with the edits — whether, for example, they also release them or treat them as closed\nsource and distribute them commercially.\nThe 2-Clause BSD License , also called Simplified BSD License  or FreeBSD License , proves how\nreduced such a permissive license can be. In addition to the standardized liability clause, which\nprotects developers from liability claims arising from damage caused by the software, the license\nconsists of only the following two rules:\nRedistribution and use in source and binary forms, with or without modification, are\npermitted provided that the following conditions are met:\n1.Redistributions of source code must retain the above copyright notice, this list of\nconditions and the following disclaimer.\n2.Redistributions in binary form must reproduce the above copyright notice, this list of\nconditions and the following disclaimer in the documentation and/or other materials\nprovided with the distribution.\nCreative Commons\nThe successful development concept of FLOSS and the associated technological progress led to\nattempts to transfer the open source principle to other, non-technical areas. The preparation and\nprovision of knowledge, as well as the creative cooperation in solving complex tasks, are now\nregarded as evidence of the extended, content-related open source principle.\nThis led to the need to create reliable foundations in these areas as well, according to which work\nresults can be shared and processed. Since the available software licenses were hardly suitable for\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n42     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 52,
        "Contenuto": "this, there were numerous attempts to convert the specific requirements from scientific work to\ndigitized works of art “in the spirit of open source” into similarly handy licenses.\nBy far the most important initiative of this kind today is Creative Commons  (CC), which\nsummarizes its concerns as follows:\nCreative Commons is a global nonprofit organization that enables sharing and reuse of\ncreativity and knowledge through the provision of free legal tools.\n— https://creativecommons.org/faq/#what-is-creative-commons-and-what-do-you-do\nWith Creative Commons, the focus of rights assignment goes back from the distributor to the\nauthor. An example: In traditional publishing, an author usually transfers all publishing rights\n(printing, translation, etc.) to a publisher, who in turn ensures the best possible distribution of the\nwork. The significantly changed distribution channels of the Internet now put the author in a\nposition to exercise many of these publishing rights herself and to decide for herself how her\nwork may be used. Creative Commons gives the opportunity to determine this simply and legally\nreliably, but Creative Commons wants more: authors are encouraged to make their works\navailable as a contribution to a general process of exchange and cooperation. Unlike traditional\ncopyright, which gives the author all the rights that they can transfer to others as needed, the\nCreative Commons approach takes the opposite approach: the author makes her work available to\nthe community, but can choose from a set of features those that need to be considered when using\nthe work — the more features she chooses, the more restrictive the license.\nAnd so the “Choose a License” principle of CC asks an author step by step for the individual\nproperties and generates the recommended license, which the author can last assign to the work\nas text and icon.\nFor a better understanding, here is an overview of the six possible combinations and licenses\noffered by CC:\nCC BY (“Attribution”)\nThe free license that allows anyone to edit and distribute the work as long as they name the\nauthor.\nCC BY-SA (“Attribution-ShareAlike”)\nAs CC BY, except that the modified work may only be distributed under the same license. The\nprinciple reminds of the copyleft, because the license is “inherited” here as well.\nCC BY-ND (“Attribution-NoDerivatives”)\nLike CC BY, except that the work may only be passed on unmodified.\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     43"
    },
    {
        "Pagina": 53,
        "Contenuto": "CC BY-NC (“Attribution-NonCommercial”)\nThe work may be edited and distributed by naming the author, but only under non-commercial\nconditions.\nCC BY-NC-SA (“Attribution-NonCommercial-ShareAlike”)\nAs BY-NC, except that the work may only be shared under the same conditions (i.e. a copyleft-\nlike license).\nCC BY-NC-ND (“Attribution-NonCommercial-NoDerivatives”)\nThe most restrictive license: the distribution is allowed with attribution of the author, but only\nunchanged and under non-commercial conditions.\nBusiness Models in Open Source\nIn retrospect, the triumph of FLOSS acts like a grassroots movement of technophile idealists who,\nindependent of economic constraints and free of monetary dependencies, put their work at the\nservice of the general public. At the same time, companies worth billions have been created in the\nFLOSS environment; to name just one, the US company Red Hat  founded in 1993 with annual sales\nof over 3 billion USD (2018), which was taken over by the IT giant IBM in 2018.\nSo let’s take a look at the tension between the free and mostly free-of-charge distribution of high-\nquality software and the business models for its creators, because one thing should be clear: The\ncountless highly qualified developers of free software must also earn money, and the originally\npurely non-commercial FLOSS environment must therefore develop sustainable business models\nin order to preserve its own cosmos.\nA common approach, especially for larger projects in the initial phase, is the so-called\ncrowdfunding , i.e. the collection of money donations via a platform like Kickstarter . In return, the\ndonors receive a pre-defined bonus from the developers in the event of success, i.e. if previously\ndefined goals are achieved, be it unlimited access to the product or special features.\nAnother approach is dual licensing : free software is offered in parallel under a more restrictive or\neven proprietary license, which in turn guarantees the customer more extensive services\n(response times in the event of errors, updates, versions for certain platforms, etc.). One example\namong many is ownCloud , which is being developed under the GPL and offers business customers\na “Business Edition” under a proprietary license.\nLet us also take ownCloud as an example of another widespread FLOSS business model:\nprofessional services. Many companies lack the necessary in-house technical knowledge to set up\nand operate complex and critical software reliably and, above all, securely. That’s why they buy\nprofessional services such as consulting, maintenance or helpdesk directly from the\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n44     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 54,
        "Contenuto": "manufacturer. Liability issues also play a role in this decision, as the company transfers the risks\nof operation to the manufacturer.\nIf a software manages to become successful and popular in its field, it is peripheral monetization\npossibilities such as merchandising or certificates that customers acquire and thus point out its\nspecial status when using this software. The learning platform Moodle  offers the certification of\ntrainers, who document their knowledge to potential clients, for example, and this is just one\nexample among countless others.\nSoftware as a Service  (SaaS) is another business model, especially for web-based technologies.\nHere, a cloud provider runs a software like a Customer Relationship Management (CRM) or a\nContent Management System (CMS) on their servers and grant their customers access to the\ninstalled application. This saves the customer installation and maintenance of the software. In\nreturn, the customer pays for the use of the software according to various parameters, for\nexample the number of users. Availability and security play an important role as business-critical\nfactors.\nLast but not least, the model of developing customer-specific extensions into free software by\norder is particularly common in smaller projects. It is then usually up to the customer to decide\nhow to proceed with these extensions, i.e. whether he also releases them or keeps them under lock\nand key as part of his own business model.\nOne thing should have become clear: Although free software is usually available free of charge,\nnumerous business models have been created in their environment, which are constantly\nmodified and extended by countless freelancers and companies worldwide in a very creative\nform, which ultimately also ensures the continued existence of the entire FLOSS movement.\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     45"
    },
    {
        "Pagina": 55,
        "Contenuto": "Guided Exercises\n1.What are — in a nutshell — the “four freedoms” as defined by Richard Stallman and the Free\nSoftware Foundation?\nfreedom 0\nfreedom 1\nfreedom 2\nfreedom 3\n2.What does the abbreviation FLOSS stand for?\n3.You have developed free software and want to ensure that the software itself, but also all\nfuture works based on it, remain free as well. Which license do you choose?\nCC BY\nGPL version 3\n2-Clause BSD License\nLGPL\n4.Which of the following licenses would you call permissive, which would you call copyleft?\nSimplified BSD License\nGPL version 3\nCC BY\nCC BY-SA\n5.You have written a web application and published it under a free license. How can you earn\nmoney with your product? Name three possibilities.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n46     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 56,
        "Contenuto": "Explorational Exercises\n1.Under which license (including version) are the following applications available?\nApache HTTP Server\nMySQL Community Server\nWikipedia articles\nMozilla Firefox\nGIMP\n2.You want to release your software under the GNU GPL v3. What steps should you follow?\n3.You have written proprietary software and would like to combine it with free software under\nthe GPL version 3. Are you allowed to do this or what do you have to consider?\n4.Why did the Free Software Foundation release the GNU Affero General Public License  (GNU\nAGPL) as a supplement to the GNU GPL?\n5.Name three examples of free software, which are also offered as “Business Edition”, i.e. in a\nchargeable version.\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     47"
    },
    {
        "Pagina": 57,
        "Contenuto": "Summary\nIn this lesson you have learned:\n•Similarities and differences between free and open source software (FLOSS)\n•FLOSS licenses, their importance and problems\n•Copyleft vs. permissive licences\n•FLOSS business models\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n48     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 58,
        "Contenuto": "Answers to Guided Exercises\n1.What are — in a nutshell — the “four freedoms” as defined by Richard Stallman and the Free\nSoftware Foundation?\nfreedom 0 run the software\nfreedom 1 study and modify the software (source code)\nfreedom 2 distribute the software\nfreedom 3 distribute the modified software\n2.What does the abbreviation FLOSS stand for?\nFree/Libre Open Source Software\n3.You have developed free software and want to ensure that the software itself, but also all\nfuture results based on it, remain free as well. Which license do you choose?\nCC BY\nGPL version 3 X\n2-Clause BSD License\nLGPL\n4.Which of the following licenses would you call permissive, which would you call copyleft?\nSimplified BSD License permissive\nGPL version 3 copyleft\nCC BY permissive\nCC BY-SA copyleft\n5.You have written a web application and published it under a free license. How can you earn\nmoney with your product? Name three possibilities.\n◦Dual licensing, e.g. by offering a chargeable “Business Edition”\n◦Offering hosting, service, and support\n◦Developing proprietary extensions for customers\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     49"
    },
    {
        "Pagina": 59,
        "Contenuto": "Answers to Explorational Exercises\n1.Under which license (including version) are the following applications available?\nApache HTTP Server Apache License 2.0\nMySQL Community Server GPL 2\nWikipedia articles (English) Creative Commons Attribution Share-Alike\nlicense (CC-BY-SA)\nMozilla Firefox Mozilla Public License 2.0\nGIMP GPL 3\n2.You want to release your software under the GNU GPL v3. What steps should you follow?\n◦If necessary, secure yourself against the employer with a copyright waiver, for example, so\nthat you can specify the license.\n◦Add a copyright notice to each file.\n◦Add a file called COPYING with the full license text to your software.\n◦Add a reference to the license in each file.\n3.You have written proprietary software and would like to combine it with free software under\nthe GPL version 3. Are you allowed to do this or what do you have to consider?\nThe FAQs of the Free Software Foundation provide information here: Provided that your\nproprietary software and the free software remain separate from each other, the combination\nis possible. However, you have to make sure that this separation is technically guaranteed and\nrecognizable for the users. If you integrate the free software in such a way that it becomes part\nof your product, you must also publish the product under the GPL according to the copyleft\nprinciple.\n4.Why did the Free Software Foundation release the GNU Affero General Public License  (GNU\nAGPL) as a supplement to the GNU GPL?\nThe GNU AGPL closes a license gap that arises especially with free software hosted on a server:\nIf a developer makes changes to the software, he is not obliged under the GPL to make these\nchanges accessible, since he allows access to the program, but does not “redistribute” on the\nprogram in the GPL sense. The GNU AGPL, on the other hand, stipulates that the software must\nbe made available for download with all changes.\n5.Name three examples of free software, which are also offered as “Business Edition”, e.g. in a\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n50     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 60,
        "Contenuto": "chargeable version.\nMySQL, Zammad, Nextcloud\nLinux Essentials (Version 1.6) | 1.3 Open Source Software and Licensing\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     51"
    },
    {
        "Pagina": 61,
        "Contenuto": "1.4 ICT Skills and Working in Linux\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 1.4\nWeight\n2\nKey knowledge areas\n•Desktop skills\n•Getting to the command line\n•Industry uses of Linux, cloud computing and virtualization\nPartial list of the used files, terms and utilities\n•Using a browser, privacy concerns, configuration options, searching the web and saving\ncontent\n•Terminal and console\n•Password issues\n•Privacy issues and tools\n•Use of common open source applications in presentations and projects\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n52     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 62,
        "Contenuto": "1.4 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 1 The Linux Community and a Career in Open\nSource\nObjective: 1.4 ICT Skills and Working in Linux\nLesson: 1 of 1\nIntroduction\nThere was a time when working with Linux on the desktop was considered hard since the system\nlacked many of the more polished desktop applications and configuration tools that other\noperating systems had. Some of the reasons for that were that Linux was a lot younger than many\nother operating systems. That being said, it was easier to start by developing more essential\ncommand line applications and just leave the more complex graphical tools for later. In the\nbeginning, since Linux was first targeted to more advanced users, that should not have been a\nproblem. But those days are long gone. Today, Linux desktop environments are very mature,\nleaving nothing to be desired as regards to features and ease of use. Nevertheless, the command\nline is still considered a powerful tool used each and every day by advanced users. In this lesson\nwe’ll take a look at some of the basic desktop skills you will need in order to choose the best tool\nfor the right job, including getting to the command line.\nLinux User Interfaces\nWhen using a Linux system, you either interact with a command line or with a graphical user\ninterfaces. Both ways grant you access to numerous applications that support performing almost\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     53"
    },
    {
        "Pagina": 63,
        "Contenuto": "any task with the computer. While objective 1.2 already introduced you to a series of commonly\nused applications, we will start this lesson with a closer look at desktop environments, ways to\naccess the terminal and tools used for presentations and project management.\nDesktop Environments\nLinux has a modular approach where different parts of the system are developed by different\nprojects and developers, each one filling a specific need or objective. Because of that, there are\nseveral options of desktop environments to choose from and together with package managers, the\ndefault desktop environment is one of the main differences among the many distributions out\nthere. Unlike proprietary operating systems like Windows and macOS, where the users are\nrestricted to the desktop environment that comes with their OS, there is the possibility to install\nmultiple environments and pick the one that adapts the most to you and your needs.\nBasically, there are two major desktop environments in the Linux world: Gnome  and KDE . They\nare both very complete, with a large community behind them and aim for the same purpose but\nwith slightly divergent approaches. In a nutshell, Gnome tries to follow the KISS (“keep it simple\nstupid”) principle, with very streamlined and clean applications. On the other hand, KDE has\nanother perspective with a larger selection of applications and giving the user the opportunity to\nchange every configuration setting in the environment.\nWhile Gnome applications are based on the GTK toolkit (written in the C language), KDE\napplications make use of the Qt library (written in C++). One of the most practical aspects of\nwriting applications with the same graphical toolkit is that applications will tend to share a\nsimilar look and feel, which is responsible for giving the user a sense of unity during their\nexperience. Another important characteristic is that having the same shared graphical library for\nmany frequently used applications may save some memory space at the same time that it will\nspeed up loading time once the library has been loaded for the first time.\nGetting to the Command Line\nFor us, one of the most important applications is the graphical terminal emulator. Those are called\nterminal emulators because they really emulate, in a graphical environment, the old style serial\nterminals (often Teletype machines) that were in fact clients that used to be connected to a remote\nmachine where the computing actually happened. Those machines were really simple computers\nwith no graphics at all that were used on the first versions of Unix.\nIn Gnome, such an application is called Gnome Terminal , while in KDE it can be found as Konsole .\nBut there are many other choices available, such as Xterm . Those applications are a way for us to\nhave access to a command line environment in order to be able to interact with a shell.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n54     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 64,
        "Contenuto": "So, you should look at the application menu of your distribution of choice for a terminal\napplication. Besides any difference between them, every application will offer you what is\nnecessary to gain confidence in using the command line.\nAnother way to get into the terminal is to use the virtual TTY. You can get into them by pressing\nCtrl + Alt + F#. Read F# as one of the function keys from 1 to 7, for example. Probably, some of the\ninitial combinations might be running your session manager or your graphical environment. The\nothers will show a prompt asking for your login name like the one below:\nUbuntu 18.10 arrelia tty3\narrelia login:\narrelia in this case, is the hostname of the machine and tty3 is the terminal available after\nusing the key combination above, plus the F3 key, like in Ctrl + Alt + F3.\nAfter providing your login and password, you will finally get into a terminal, but there is no\ngraphical environment in here, so, you won’t be able to use the mouse or run graphical\napplications without first starting an X, or Wayland, session. But that’s beyond the scope of this\nlesson.\nPresentations and Projects\nThe most important tool for presentations on Linux is LibreOffice Impress . It’s part of the open\nsource office suite called LibreOffice . Think about LibreOffice as an open source replacement for\nthe equivalent Microsoft Office . It can even open and save the PPT and PPTX files that are native to\nPowerpoint . But in spite of that, I really recommend you to use the native ODP Impress format.\nThe ODP is part of the larger Open Document Format , which is a international standard for this\nkind of file. This is especially important if you want to keep your documents accessible for many\nyears and worry less about compatibility problems. Because they are an open standard, it’s\npossible for anyone to implement the format without paying any royalties or licenses. This also\nmakes you free to try other presentations software that you may like better and take your files\nwith you, as it’s very likely they will be compatible with those newer softwares.\nBut if you prefer code over graphical interfaces, there are a few tools for you to choose. Beamer  is\na LaTeX  class that can create slide presentations from LaTeX code. LaTeX itself is a typesetting\nsystem largely used for writing scientific documents at the academy, specially for its capacity to\nhandle complex math symbols, which other softwares have difficulty to deal with. If you are at the\nuniversity and need to deal with equations and other math related problems, Beamer can save\nyou a lot of time.\nThe other option is Reveal.js , an awesome NPM package (NPM is the default NodeJS package\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     55"
    },
    {
        "Pagina": 65,
        "Contenuto": "manager) which allows you to create beautiful presentations by using the web. So, if you can write\nHTML and CSS, Reveal.js will bring most of the JavaScript necessary to create pretty and\ninteractive presentations that will adapt well on any resolution and screen size.\nLastly, if you want a replacement for Microsoft Project , you can try GanttProject  or ProjectLibre .\nBoth are very similar to their proprietary counterpart and compatible with Project files.\nIndustry Uses of Linux\nLinux is heavily used among the software and Internet industries. Sites like W3Techs  report that\nabout 68% of the website servers on the Internet are powered by Unix and the biggest portion of\nthose are known to be Linux.\nThis large adoption is given not only for the free nature of Linux (as both in free beer and in\nfreedom of speech) but also for its stability, flexibility and performance. These characteristics\nallow vendors to offer their services with a lower cost and a greater scalability. A significant\nportion of Linux systems nowadays run in the cloud, either on a IaaS (Infrastructure as a service),\nPaaS (Platform as a Service) or SaaS (Software as a Service) model.\nIaaS is a way to share the resources of a large server by offering them access to virtual machines\nthat are, in fact, multiple operating systems running as guests on a host machine over an\nimportant piece of software that is called a hypervisor . The hypervisor is responsible for making it\npossible for these guest OSs to run by segregating and managing the resources available on the\nhost machine to those guests. That’s what we call virtualization . In the IaaS model, you pay only\nfor the fraction of resources your infrastructure uses.\nLinux has three well know open source hypervisors: Xen, KVM  and VirtualBox . Xen is probably\nthe oldest of them. KVM ran out Xen as the most prominent Linux Hypervisor. It has its\ndevelopment sponsored by RedHat and it is used by them and other players, both in public cloud\nservices and in private cloud setups. VirtualBox belongs to Oracle since its acquisition of Sun\nMicrosystems and is usually used by end users because of its easiness of use and administration.\nPaaS and SaaS, on the other hand, build up on the IaaS model, both technically and conceptually.\nIn PaaS instead of a virtual machine, the users have access to a platform where it will be possible\nto deploy and run their application. The goal here is to ease the burden of dealing with system\nadministration tasks and operating systems updates. Heroku  is a common PaaS example where\nprogram code can just be run without taking care of the underlying containers and virtual\nmachines.\nLastly, SaaS is the model where you usually pay for a subscription in order to just use a software\nwithout worrying about anything else. Dropbox  and Salesforce  are two good examples of SaaS.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n56     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 66,
        "Contenuto": "Most of these services are accessed through a web browser.\nA project like OpenStack  is a collection of open source software that can make use of different\nhypervisors and other tools in order to offer a complete IaaS cloud environment on premise, by\nleveraging the power of computer cluster on your own datacenter. However, the setup of such\ninfrastructure is not trivial.\nPrivacy Issues when using the Internet\nThe web browser is a fundamental piece of software on any desktop these days, but some people\nstill lack the knowledge to use it securely. While more and more services are accessed through a\nweb browser, almost all actions done through a browser are tracked and analyzed by various\nparties. Securing access to internet services and preventing tracking is an important aspect of\nusing the internet in a safe manner.\nCookie Tracking\nLet’s assume you have browsed an e-commerce website, selected a product you wanted and\nplaced that in the shopping cart. But at the last second, you have decided to give it a second\nthought and think a little longer if you really needed that. After a while, you start seeing ads of\nthat same product following you around the web. When clicking on the ads, you are immediately\nsent to the product page of that store again. It’s not uncommon that the products you placed in the\nshopping cart are still there, just waiting for you to decide to check them out. Have you ever\nwondered how they do that? How they show you the right ad at another web page? The answer\nfor these questions is called cookie tracking .\nCookies are small files a website can save on your computer in order to store and retrieve some\nkind of information that can be useful for your navigation. They have been in use for many years\nand are one of the oldest ways to store data on the client side. One good example of their use are\nunique shopping card IDs. That way, if you ever come back to the same website in a few days, the\nstore can remember you the products you’ve placed in your cart during your last visit and save\nyou the time to find them again.\nThat’s usually okay, since the website is offering you a useful feature and not sharing any data\nwith third parties. But what about the ads that are shown to you while you surf on other web\npages? That’s where the ad networks come in. Ad networks are companies that offer ads for e-\ncommerce sites like the one in our example on one side, and monetization for websites, on the\nother side. Content creators like bloggers, for example, can make some space available for those\nad networks on their blog, in exchange for a commission related to the sales generated by that ad.\nBut how do they know what product to show you? They usually do that by saving also a cookie\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     57"
    },
    {
        "Pagina": 67,
        "Contenuto": "from the ad network at the moment you visited or searched for a certain product on the e-\ncommerce website. By doing that, the network is able to retrieve the information on that cookie\nwherever the network has ads, making the correlation with the products you were interested.\nThis is usually one of the most common ways to track someone over the Internet. The example we\ngave above makes use of an e-commerce to make things more tangible, but social media platforms\ndo the same with their “Like” or “Share” buttons and their social login.\nOne way you can get rid of that is by not allowing third party websites to store cookies on your\nbrowser. This way, only the website you visit can store their cookies. But be aware that some\n“legitimate” features may not work well if you do that, because many sites today rely on third\nparty services to work. So, you can look for a cookie manager at your browser’s add-on repository\nin order to have a fine-grained control of which cookies are being stored on your machine.\nDo Not Track (DNT)\nAnother common misconception is related to a certain browser configuration better known as\nDNT. That’s an acronym for “Do Not Track” and it can be turned on basically on any current\nbrowser. Similarly to the private mode, it’s not hard to find people that believe they will not be\ntracked if they have this configuration on. Unfortunately, that’s not always true. Currently, DNT is\njust a way for you to tell the websites you visit that you do not want them to track you. But, in fact,\nthey are the ones who will decide if they will respect your choice or not. In other words, DNT is a\nway to opt-out from website tracking, but there is no guarantee on that choice.\nTechnically, this is done by simply sending an extra flag on the header of the HTTP request\nprotocol ( DNT: 1) upon requesting data from a web server. If you want to know more about this\ntopic, the website https://allaboutdnt.com  is good starting point.\n“Private” Windows\nYou might have noticed the quotes in the heading above. This is because those windows are not as\nprivate as most people think. The names may vary but they can be called “private mode”,\n“incognito” or “anonymous” tab, depending on which browser you are using.\nIn Firefox, you can easily use it by pressing Ctrl + Shift + P keys. In Chrome, just press Ctrl + Shift + N.\nWhat it actually does is open a brand new session, which usually doesn’t share any configuration\nor data from your standard profile. When you close the private window, the browser will\nautomatically delete all the data generated by that session, leaving no trace on the computer used.\nThis means that no personal data, like history, passwords or cookies are stored on that computer.\nThus, many people misunderstand this concept by believing that they can browse anonymous on\nthe Internet, which is not completely true. One thing that the privacy or incognito mode does is\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n58     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 68,
        "Contenuto": "avoid what we call cookie tracking. When you visit a website, it can store a small file on your\ncomputer which may contain an ID that can be used to track you. Unless you configure your\nbrowser to not accept third-party cookies, ad networks or other companies can store and retrieve\nthat ID and actually track your browsing across websites. But since the cookies stored on a private\nmode session are deleted right after you close that session, that information is forever lost.\nBesides that, websites and other peers on the Internet can still use plenty other techniques in\norder to track you. So, private mode brings you some level of anonymity but it’s completely\nprivate only on the computer you are using. If you are accessing your email account or banking\nwebsite from a public computer, like in an airport or a hotel, you should definitely access those\nusing your browser’s private mode. In other situations, there can be benefits but you should know\nexactly what risks you are avoiding and which ones have no effect. Whenever you use a public\naccessible computer, be aware that other security threats such as malware or key loggers might\nexist. Be careful whenever you enter personal information, including usernames and passwords,\non such computers or when you download or copy confidential data.\nChoosing the Right Password\nOne of the most difficult situations any user faces is choosing a secure password for the services\nthey make use of. You have certainly heard before that you should not use common combinations\nlike qwerty, 123456 or 654321, nor easily guessable numbers like your (or a relative’s) birthday\nor zip code. The reason for that is because those are all very obvious combinations and the first\nattempts an invader will try in order to gain access to your account.\nThere are known techniques for creating a safe password. One of the most famous is making up a\nsentence which reminds you of that service and picking the first letters of each word. Let’s assume\nI want to create a good password for Facebook, for example. In this case, I could come up with a\nsentence like “I would be happy if I had a 1000 friends like Mike”. Pick the first letter of each word\nand the final password would be IwbhiIha1000flM . This would result in a 15 characters\npassword which is long enough to be hard to guess and easy to remember at the same time (as\nlong as I can remember the sentence and the “algorithm” for retrieving the password).\nSentences are usually easier to remember than the passwords but even this method has its\nlimitations. We have to create passwords for so many services nowadays and as we use them with\ndifferent frequencies, it will eventually be very difficult to remember all the sentences at the time\nwe need them. So what can we do? You may answer that the wisest thing to do in this case is\ncreating a couple good passwords and reuse them on similar services, right?\nUnfortunately, that’s also not a good idea. You probably also heard you should not reuse the same\npassword among different services. The problem of doing such a thing is that a specific service\nmay leak your password (yes, it happens all the time) and any person who have access to it will\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     59"
    },
    {
        "Pagina": 69,
        "Contenuto": "try to use the same email and password combination on other popular services on the Internet in\nhope you have done exactly that: recycled passwords. And guess what? In case they are right you\nwill end up having a problem not only on just one service but on several of them. And believe me,\nwe tend to think it’s not going to happen to us until it’s too late.\nSo, what can we do in order to protect ourselves? One of the most secure approaches available\ntoday is using what is called a password manager . Password managers are a piece of software that\nwill essentially store all your passwords and usernames in an encrypted format which can be\ndecrypted by a master password. This way you only need to remember one good password since\nthe manager will keep all the others safe for you.\nKeePass  is one of the most famous and feature rich open source password managers available. It\nwill store your passwords in an encrypted file within your file system. The fact it’s open source is\nan important issue for this kind of software since it guarantees they will not make any use of your\ndata because any developer can audit the code and know exactly how it works. This brings a level\nof transparency that’s impossible to reach with proprietary code. KeePass has ports for most\noperating systems, including Windows, Linux and macOS; as well as mobile ones like iOS and\nAndroid. It also includes a plugin system that is able to extend it’s functionality far beyond the\ndefaults.\nBitwarden  is another open source solution that has a similar approach but instead of storing your\ndata in a file, it will make use of a cloud server. This way, it’s easier to keep all your devices\nsynchronized and your passwords easily accessible through the web. Bitwarden  is one of the few\nprojects that will make not only the clients, but also the cloud server available as an open source\nsoftware. This means you can host your own version of Bitwarden and make it available to\nanyone, like your family or your company employees. This will give you flexibility but also total\ncontrol over how their passwords are stored and used.\nOne of the most important things to keep in mind when using a password manager is creating a\nrandom password for each different service since you will not need to remind them anyway. It\nwould be worthless if you use a password manager to store recycled or easily guessable\npasswords. Thus, most of them will offer you a random password generator you can use to create\nthose for you.\nEncryption\nWhenever data is transferred or stored, precautions need to be taken to ensure that third parties\nmay not access the data. Data transferred over the internet passes by a series of routers and\nnetworks where third parties might be able to access the network traffic. Likewise, data stored on\nphysical media might be read by anyone who comes into possession of that media. To avoid this\nkind of access, confidential information should be encrypted before it leaves a computing device.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n60     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 70,
        "Contenuto": "TLS\nTransport Layer Security  (TLS) is a protocol to offer security over network connections by making\nuse of cryptography. TLS is the successor of the Secure Sockets Layer  (SSL) which has been\ndeprecated because of serious flaws. TLS has also evolved a couple of times in order to adapt itself\nand become more secure, thus it’s current version is 1.3. It can provide both privacy, and\nauthenticity by making use of what is called symmetric and public-key cryptography. By saying\nthat, we mean that once in use, you can be sure that nobody will be able to eavesdrop or alter\nyour communication with that server during that session.\nThe most important lesson here is recognizing that a website is trustworthy. You should look for\nthe “lock” symbol on the browser’s address bar. If you desire, you can click on it to inspect the\ncertificate that plays an important role in the HTTPS protocol.\nTLS is what is used on the HTTPS protocol ( HTTP over TLS ) in order to make it possible to send\nsensitive data (like your credit card number) through the web. Explaining how TLS works goes\nway beyond the purpose of this article, but you can find more information on the Wikipedia  and\nat the Mozilla wiki .\nFile and E-mail Encryption With GnuPG\nThere are plenty of tools for securing emails but one of the most important of them is certainly\nGnuPG . GnuPG stands for GNU Privacy Guard  and it is an open source implementation of OpenPGP\nwhich is an international standard codified within RFC 4880.\nGnuPG can be used to sign, encrypt, and decrypt texts, e-mails, files, directories, and even whole\ndisk partitions. It works with public-key cryptography and is widely available. In a nutshell\nGnuPG creates a pair of files which contain your public and private keys. As the name implies, the\npublic key can be available to anyone and the private key needs to be kept in secret. People will\nuse your public key to encrypt data which only your private key will be able to decrypt.\nYou can also use your private key to sign any file or e-mail which can be validated against the\ncorresponding public key. This digital signage works analogous to the real world signature. As\nlong as you are the only one who posses your private key, the receiver can be sure that it was you\nwho have authored it. By making use of the cryptographic hash functionality GnuPG will also\nguarantee no changes have been made after the signature because any changes to the content\nwould invalidate the signature.\nGnuPG is a very powerful tool and, in a certain extent, also a complex one. You can find more\ninformation on its website  and on Archlinux wiki  (Archlinux wiki is a very good source of\ninformation, even though you don’t use Archlinux).\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     61"
    },
    {
        "Pagina": 71,
        "Contenuto": "Disk Encryption\nA good way to secure your data is to encrypt your whole disk or partition. There are many open\nsource softwares you can use to achieve such a purpose. How they work and what level of\nencryption they offer also varies significantly. There are basic two methods available: stacked  and\nblock  device encryption.\nStacked filesystem solutions are implemented on top of existing filesystem. When using this\nmethod, the files and directories are encrypted before being stored on the filesystem and\ndecrypted after reading them. This means the files are stored on the host filesystem in an\nencrypted form (meaning that their contents, and usually also their file/folder names, are\nreplaced by random-looking data), but other than that, they still exist in that filesystem as they\nwould without encryption, as normal files, symlinks, hardlinks, etc.\nOn the other hand, block device encryption happens below the filesystem layer, making sure\neverything that is written to a block device is encrypted. If you look to the block while it’s offline,\nit will look like a large section of random data and you won’t even be able to tell what type of\nfilesystem is there without decrypting it first. This means you can’t tell what is a file or directory;\nhow big they are and what kind of data it is, because metadata, directory structure and\npermissions are also encrypted.\nBoth methods have their own pros and cons. Among all the options available, you should take a\nlook at dm-crypt , which is the de-facto standard for block encryption for Linux systems, since it’s\nnative in the kernel. It can be used with LUKS  (Linux Unified Key Setup ) extension, which is a\nspecification that implements a platform-independent standard for use with various tools.\nIf you want to try a stackable method, you should take a look at EncFS , which is probably the\neasiest way to secure data on Linux because it does not require root privileges to implement and it\ncan work on an existing filesystem without modifications.\nFinally, if you need to access data on various platforms, check out Veracrypt. It is the successor of\na Truecrypt and allows the creation of encrypted media and files, which can be used on Linux as\nwell as on macOS and Windows.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n62     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 72,
        "Contenuto": "Guided Exercises\n1.You should use a “private window” in your browser if you want:\nTo browse completely anonymous on the\nInternet\nTo leave no trace on the computer you’re\nusing\nTo activate TLS to avoid cookie tracking\nIn order to use DNT\nTo use cryptography during data transmission\n2.What is OpenStack?\nA project that allows the creation of private\nIaaS\nA project that allows the creation of private\nPaaS\nA project that allows the creation of private\nSaaS\nA hypervisor\nAn open source password manager\n3.Which of the below options are valid disk encryption softwares?\nRevealJS, EncFS and dm-crypt\ndm-crypt and KeePass\nEncFS and Bitwarden\nEncFS and dm-crypt\nTLS and dm-crypt\n4.Select true or false for dm-crypt device encryption:\nFiles are encrypted before being written to the\ndisk\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     63"
    },
    {
        "Pagina": 73,
        "Contenuto": "The entire filesystem is an encrypted blob\nOnly files and directories are encrypted, not\nsymlinks\nDon’t require root access\nIs a block device encryption\n5.Beamer is:\nAn encryption mechanism\nA hypervisor\nA virtualization software\nAn OpenStack component\nA LaTeX presentation tool\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n64     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 74,
        "Contenuto": "Explorational Exercises\n1.Most distributions come with Firefox installed by default (if yours doesn’t, you will have to\ninstall it first). We are going to install a Firefox extension called Lightbeam . You can do that by\neither pressing Ctrl + Shift + A and searching for “Lightbeam” on the search field that will be\nshown on the tab opened, or by visiting the extension page with Firefox and clicking on the\n“Install” button: https://addons.mozilla.org/en-GB/firefox/addon/lightbeam-3-0/ . After doing this,\nstart the extension by clicking on its icon and start visiting some webpages on other tabs to see\nwhat happens.\n2.What is the most important thing when using a password manager?\n3.Use your web browser to navigate to https://haveibeenpwned.com/ . Find out the purpose of the\nwebsite and check if your email address was included in some data leaks.\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     65"
    },
    {
        "Pagina": 75,
        "Contenuto": "Summary\nThe terminal is a powerful way to interact with the system and there are lots of useful and very\nmature tools to use in this kind of environment. You can get to the terminal by looking for a\ngraphical one at your desktop environment menu or pressing Ctrl + Alt + F#.\nLinux is largely used in the tech industry to offer IaaS, PaaS and SaaS services. There are three\nmain hypervisors which play an important role in supporting those: Xen, KVM and Virtualbox.\nThe browser is an essential piece of software in computing nowadays, but it’s necessary to\nunderstand some things to use it with safety. DNT is just a way to tell the website that you do not\nwant to be tracked, but there is no guarantee on that. Private windows are private only to the\ncomputer you’re using but this can allow you to escape from cookie tracking exactly because of\nthat.\nTLS is able to encrypt your communication on the Internet, but you have to be able to recognize\nwhen it’s in use. Using strong passwords is also very important to keep you safe, so the best idea is\nto delegate that responsibility to a password manager and allow the software to create random\npasswords to every site you log into.\nAnother way to secure your communication is to sign and encrypt your files folders and emails\nwith GnuPG. dm-crypt and EncFS are two alternatives to encrypt whole disks or partitions that\nuse respectively block and stack encryption methods.\nFinally, LibreOffice Impress is a very complete open source alternative to Microsoft Powerpoint\nbut there are Beamer and RevealJS if you prefer to create presentations using code instead of\nGUIs. ProjectLibre and GanttProject can be the right choice if you need a Microsoft Project\nreplacement.\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n66     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 76,
        "Contenuto": "Answers to Guided Exercises\n1.You should use a “private window” in your browser if you want:\nTo browse completely anonymous on the\nInternet\nTo leave no trace on the computer you’re\nusingX\nTo activate TLS to avoid cookie tracking\nIn order to use DNT\nTo use cryptography during data transmission\n2.What is OpenStack?\nA project that allows the creation of private\nIaaSX\nA project that allows the creation of PaaS\nA project that allows the creation of SaaS\nA hypervisor\nAn open source password manager\n3.Which of the below options are valid disk encryption softwares?\nRevealJS, EncFS and dm-crypt\ndm-crypt and KeePass\nEncFS and Bitwarden\nEncFS and dm-crypt X\nTLS and dm-crypt\n4.Select true or false for dm-crypt device encryption:\nFiles are encrypted before being written to the\ndiskT\nThe entire filesystem is an encrypted blob T\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     67"
    },
    {
        "Pagina": 77,
        "Contenuto": "Only files and directories are encrypted, not\nsymlinksF\nDon’t require root access F\nIs a block device encryption T\n5.Beamer is:\nAn encryption mechanism\nA hypervisor\nA virtualization software\nAn OpenStack component\nA LaTeX presentation tool X\nLinux Essentials (Version 1.6) | Topic 1: The Linux Community and a Career in Open Source\n68     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 78,
        "Contenuto": "Answers to Explorational Exercises\n1.Most distributions come with Firefox installed by default (if yours doesn’t, you will have to\ninstall it first). We are going to install a Firefox extension called Lightbeam . You can do that by\neither pressing Ctrl + Shift + A and searching for “Lightbeam” on the search field that will be\nshown on the tab opened, or by visiting the extension page with Firefox and clicking on the\n“Install” button: https://addons.mozilla.org/en-US/firefox/addon/lightbeam . After doing this,\nstart the extension by clicking on it’s icon and start visiting some webpages on other tabs to see\nwhat happens.\nRemember those cookies we said that can share your data with different services when you\nvisit a website? That’s exactly what this extension is going to show you. Lightbeam is a Mozilla\nexperiment that tries to reveal the first and third party sites you interact with upon visiting a\nsingle URL. This content is usually not visible to the average user and it can show that\nsometimes a single website is able to interact with a dozen or more services.\n2.What is the most important thing when using a password manager?\nWhen using a password manager, the most important thing to have in mind is memorizing\nyour master password and use a unique random password for each different service.\n3.Use your web browser to navigate to https://haveibeenpwned.com/ . Find out the purpose of the\nwebsite and check if your email address was included in some data leaks.\nThe website maintains a database of login information whose passwords were affected by a\npassword leak. It allows searching for an email address and shows if that email address was\nincluded in a public database of stolen credentials. Chances are that your email address is\naffected by one or the other leak, too. If that is the case, make sure you have updated your\npasswords recently. If you don’t already use a password manager, take a look at the ones\nrecommended in this lesson.\nLinux Essentials (Version 1.6) | 1.4 ICT Skills and Working in Linux\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     69"
    },
    {
        "Pagina": 79,
        "Contenuto": "Topic 2: Finding Your Way on a Linux System\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n70     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 80,
        "Contenuto": "2.1 Command Line Basics\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 2.1\nWeight\n3\nKey knowledge areas\n•Basic shell\n•Command line syntax\n•Variables\n•Quoting\nPartial list of the used files, terms and utilities\n•Bash\n•echo\n•history\n•PATH environment variable\n•export\n•type\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     71"
    },
    {
        "Pagina": 81,
        "Contenuto": "2.1 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.1 Command Line Basics\nLesson: 1 of 2\nIntroduction\nModern Linux distributions have a wide range of graphical user interfaces but an administrator\nwill always need to know how to work with the command line, or shell  as it is called. The shell is a\nprogram that enables text based communication between the operating system and the user. It is\nusually a text mode program that reads the user’s input and interprets it as commands to the\nsystem.\nThere are several different shells on Linux, these are just a few:\n•Bourne-again shell (Bash)\n•C shell (csh or tcsh, the enhanced csh)\n•Korn shell (ksh)\n•Z shell (zsh)\nOn Linux the most common one is the Bash shell. This is also the one that will be used in examples\nor exercises here.\nWhen using an interactive shell, the user inputs commands at a so-called prompt. For each Linux\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n72     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 82,
        "Contenuto": "distribution, the default prompt may look a little different, but it usually follows this structure:\nusername@hostname current_directory shell_type\nOn Ubuntu or Debian GNU/Linux, the prompt for a regular user will likely look like this:\ncarol@mycomputer:~$\nThe superuser’s prompt will look like this:\nroot@mycomputer:~#\nOn CentOS or Red Hat Linux, the prompt for a regular user will instead look like this:\n[dave@mycomputer ~]$\nAnd the superuser’s prompt will look like this:\n[root@mycomputer ~]#\nLet’s explain each component of the structure:\nusername\nName of the user that runs the shell\nhostname\nName of the host on which the shell runs. There is also a command hostname , with which you\ncan show or set the system’s host name.\ncurrent_directory\nThe directory that the shell is currently in. A ~ means that the shell is in the current user’s\nhome directory.\nshell_type\n$ indicates the shell is run by a regular user.\n# indicates the shell is run by the superuser root.\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     73"
    },
    {
        "Pagina": 83,
        "Contenuto": "As we do not need any special privileges, we will use an unprivileged prompt in the following\nexamples. For brevity, we will just use the $ as prompt.\nCommand Line Structure\nMost commands at the command line follow the same basic structure:\ncommand  [option(s)/parameter(s)...]  [argument(s)...]\nTake the following command as an example:\n$ ls -l /home\nLet’s explain the purpose of each component:\nCommand\nProgram that the user will run – ls in the above example.\nOption(s)/Parameter(s)\nA “switch” that modifies the behavior of the command in some way, such as -l in the above\nexample. Options can be accessed in a short and in a long form. For example, -l is identical to\n--format=long .\nMultiple options can be combined as well and for the short form, the letters can usually be\ntyped together. For example, the following commands all do the same:\n$ ls -al\n$ ls -a -l\n$ ls --all --format=long\nArgument(s)\nAdditional data that is required by the program, like a filename or path, such as /home in the\nabove example.\nThe only mandatory part of this structure is the command itself. In general, all other elements are\noptional, but a program may require certain options, parameters or arguments to be specified.\nNOTEMost commands display a short overview of available options when they are run\nwith the --help parameter. We will learn additional ways to learn more about\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n74     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 84,
        "Contenuto": "Linux commands soon.\nCommand Behavior Types\nThe shell supports two types of commands:\nInternal\nThese commands are part of the shell itself and are not separate programs. There are around\n30 such commands. Their main purpose is executing tasks inside the shell (e.g. cd, set,\nexport).\nExternal\nThese commands reside in individual files. These files are usually binary programs or scripts.\nWhen a command which is not a shell builtin is run, the shell uses the PATH variable to search\nfor an executable file with same name as the command. In addition to programs which are\ninstalled with the distribution’s package manager, users can create their own external\ncommands as well.\nThe command type shows what type a specific command is:\n$ type echo\necho is a shell builtin\n$ type man\nman is /usr/bin/man\nQuoting\nAs a Linux user, you will have to create or manipulate files or variables in various ways. This is\neasy when working with short filenames and single values, but it becomes more complicated\nwhen, for example, spaces, special characters and variables are involved. Shells provide a feature\ncalled quoting which encapsulates such data using various kinds of quotes (\" \", ' '). In Bash, there\nare three types of quotes:\n•Double quotes\n•Single quotes\n•Escape characters\nFor example, the following commands do not act in the same way due to quoting:\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     75"
    },
    {
        "Pagina": 85,
        "Contenuto": "$ TWOWORDS=\"two words\"\n$ touch $TWOWORDS\n$ ls -l\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56 two\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56 words\n$ touch \"$TWOWORDS\"\n$ ls -l\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56  two\n-rw-r--r-- 1 carol carol     0 Mar 10 14:58 'two words'\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56  words\n$ touch '$TWOWORDS'\n$ ls -l\n-rw-r--r-- 1 carol carol     0 Mar 10 15:00 '$TWOWORDS'\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56  two\n-rw-r--r-- 1 carol carol     0 Mar 10 14:58 'two words'\n-rw-r--r-- 1 carol carol     0 Mar 10 14:56  words\nNOTEThe line with TWOWORDS=  is a Bash variable that we have created ourselves. We will\nintroduce variables later. This is just meant to show you how quoting affects the\noutput of variables.\nDouble Quotes\nDouble quotes tell the shell to take the text in between the quote marks (\"...\") as regular\ncharacters. All special characters lose their meaning, except the $ (dollar sign), \\ (backslash) and `\n(backquote). This means that variables, command substitution and arithmetic functions can still\nbe used.\nFor example, the substitution of the $USER variable is not affected by the double quotes:\n$ echo I am $USER\nI am tom\n$ echo \"I am $USER\"\nI am tom\nA space character, on the other hand, loses its meaning as an argument separator:\n$ touch new file\n$ ls -l\n-rw-rw-r-- 1 tom students 0 Oct 8 15:18 file\n-rw-rw-r-- 1 tom students 0 Oct 8 15:18 new\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n76     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 86,
        "Contenuto": "$ touch \"new file\"\n$ ls -l\n-rw-rw-r-- 1 tom students 0 Oct 8 15:19 new file\nAs you can see, in the first example, the touch command creates two individual files, the\ncommand interprets the two strings as individual arguments. In the second example, the\ncommand interprets both strings as one argument, therefore it only creates one file. It is,\nhowever, best practice to avoid the space character in filenames. Instead, an underscore ( _) or a\ndot ( .) could be used.\nSingle Quotes\nSingle quotes don’t have the exceptions of the double quotes. They revoke any special meaning\nfrom each character. Let’s take one of the first examples from above:\n$ echo I am $USER\nI am tom\nWhen applying the single quotes you see a different result:\n$ echo 'I am $USER'\nI am $USER\nThe command now displays the exact string without substituting the variable.\nEscape Characters\nWe can use escape characters  to remove special meanings of characters from Bash. Going back to\nthe $USER environment variable:\n$ echo $USER\ncarol\nWe see that by default, the contents of the variable are displayed in the terminal. However, if we\nwere to precede the dollar sign with a backslash character ( \\) then the special meaning of the\ndollar sign will be negated. This in turn will not let Bash expand the variable’s value to the\nusername of the person running the command, but will instead interpret the variable name\nliterally:\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     77"
    },
    {
        "Pagina": 87,
        "Contenuto": "$ echo \\$USER\n$USER\nIf you recall, we can get similar results to this using the single quote, which prints the literal\ncontents of whatever is between the single quotes. However the escape character works\ndifferently by instructing Bash to ignore whatever special meaning the character it precedes may\npossess.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n78     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 88,
        "Contenuto": "Guided Exercises\n1.Split the lines below into the components of command, option(s)/parameter(s) and\nargument(s):\n◦Example: cat -n /etc/passwd\nCommand: cat\nOption: -n\nArgument: /etc/passwd\n◦ls -l /etc\nCommand:\nOption:\nArgument:\n◦ls -l -a\nCommand:\nOption:\nArgument:\n◦cd /home/user\nCommand:\nOption:\nArgument:\n2.Find what type the following commands are:\nExample:\npwd Shell builtin\nmv External command\ncd\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     79"
    },
    {
        "Pagina": 89,
        "Contenuto": "cat\nexit\n3.Resolve the following commands that use quotes:\nExample:\necho \"$HOME is my home directory\" echo /home/user is my home directory\ntouch \"$USER\"\ntouch 'touch'\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n80     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 90,
        "Contenuto": "Explorational Exercises\n1.With one command and using brace expansion in Bash (review the man page for Bash), create\n5 files numbered 1 to 5 with the prefix game (game1, game2, …).\n2.Delete all 5 files that you just created with just one command, using a different special\ncharacter (review Pathname Expansion  in the Bash man pages).\n3.Is there any other way to make two commands interact with each other? What are those?\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     81"
    },
    {
        "Pagina": 91,
        "Contenuto": "Summary\nIn this lab you learned:\n•Concepts of the Linux shell\n•What is the Bash shell\n•The structure of the command line\n•An introduction to quoting\nCommands used in the exercises:\nbash\nThe most popular shell on Linux computers.\necho\nOutput text on the terminal.\nls\nList the contents of a directory.\ntype\nShow how a specific command is executed.\ntouch\nCreate an empty file or update an existing file’s modification date.\nhostname\nShow or change a system’s hostname.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n82     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 92,
        "Contenuto": "Answers to Guided Exercises\n1.Split the lines below into the components of command, option(s)/parameter(s) and\nargument(s):\n◦ls -l /etc\nCommand: ls\nOption: -l\nArgument: /etc\n◦ls -l -a\nCommand: ls\nOption: -l -a\nArgument:\n◦cd /home/user\nCommand: cd\nOption:\nArgument: /home/user\n2.Find what type the following commands are:\ncd Shell builtin\ncat External command\nexit Shell builtin\n3.Resolve the following commands that use quotes:\ntouch \"$USER\" tom\ntouch 'touch' Creates a file named touch\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     83"
    },
    {
        "Pagina": 93,
        "Contenuto": "Answers to Explorational Exercises\n1.With one command and using brace expansion in Bash (review the man page for Bash), create\n5 files numbered 1 to 5 with the prefix game (game1, game2, …).\nRanges can be used to express the numbers from 1 to 5 within one command:\n$ touch game{1..5}\n$ ls\ngame1  game2  game3  game4  game5\n2.Delete all 5 files that you just created with just one command, using a different special\ncharacter (review Pathname Expansion  in the Bash man pages).\nSince all files start with game and end in a single character (a number from 1 to 5 in this case),\n? can be used as a special character for the last character in the filename:\n$ rm game?\n3.Is there any other way to make two commands interact with each other? What are those?\nYes, one command could, for example, write data to a file which is then processed by another\ncommand. Linux can also collect the output of one command and use it as input for another\ncommand. This is called piping  and we will learn more about it in a future lesson.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n84     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 94,
        "Contenuto": "2.1 Lesson 2\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.1 Command Line Basics\nLesson: 2 of 2\nIntroduction\nAll shells manage a set of status information throughout the shell sessions. This runtime\ninformation may change during the session and influences how the shell behaves. This data is also\nused by programs to determinate aspects of the system’s configuration. Most of this data is stored\nin so-called variables , which we will cover in this lesson.\nVariables\nVariables are pieces of storage for data, such as text or numbers. Once set, a variable’s value can\nbe accessed at a later time. Variables have a name which allows accessing a specific variable, even\nwhen the variable’s content changes. They are a very common tool in most programming\nlanguages.\nIn most Linux shells, there are two types of variables:\nLocal variables\nThese variables are available to the current shell process only. If you create a local variable and\nthen start another program from this shell, the variable is not accessible to that program\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     85"
    },
    {
        "Pagina": 95,
        "Contenuto": "anymore. Because they are not inherited by sub processes, these variables are called local\nvariables .\nEnvironment variables\nThese variables are available both in a specific shell session and in sub processes spawned\nfrom that shell session. Theses variables can be used to pass configuration data to commands\nwhich are run. Because these programs can access these variables, they are called environment\nvariables . The majority of the environment variables are in capital letters (e.g. PATH, DATE,\nUSER). A set of default environment variables provide, for example, information about the\nuser’s home directory or terminal type. Sometimes the complete set of all environment\nvariables is referred to as the environment .\nNOTEVariables are not persistent. When the shell in which they were set is closed, all\nvariables and their contents are lost. Most shells provide configuration files that\ncontain variables which are set whenever a new shell is started. Variables that\nshould be set permanently must be added to one of these configuration files.\nManipulating Variables\nAs a system administrator, you will need to create, modify or remove both local and environment\nvariables.\nWorking with Local Variables\nYou can set up a local variable by using the = (equal) operator. A simple assignment will create a\nlocal variable:\n$ greeting=hello\nNOTE Don’t put any space before or after the = operator.\nYou can display any variable using the echo command. The command usually displays the text in\nthe argument section:\n$ echo greeting\ngreeting\nIn order to access the value of the variable you will need to use $ (dollar sign) in front of the\nvariable’s name.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n86     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 96,
        "Contenuto": "$ echo $greeting\nhello\nAs it can be seen, the variable has been created. Now open another shell and try to display the\ncontents of the variable created.\n$ echo $greeting\nNothing is displayed. This illustrates, that variables always exist in a specific shell only.\nTo verify that the variable is actually a local variable, try to spawn a new process and check if this\nprocess can access the variable. We can do so by starting another shell and let this shell run the\necho command. As the new shell is run in a new process, it won’t inherit local variables from its\nparent process:\n$ echo $greeting world\nhello world\n$ bash -c 'echo $greeting world'\nworld\nNOTE Make sure to use single quotes in the example above.\nIn order to remove a variable, you will need to use the command unset:\n$ echo $greeting\nhey\n$ unset greeting\n$ echo $greeting\nNOTEunset requires the name of the variable as an argument. Therefore you may not\nadd $ to the name, as this would resolve the variable and pass the variable’s value\nto unset instead of the variable’s name.\nWorking with Global Variables\nTo make a variable available to subprocesses, turn it from a local into an environment variable.\nThis is done by the command export. When it is invoked with the variable name, this variable is\nadded to the shell’s environment:\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     87"
    },
    {
        "Pagina": 97,
        "Contenuto": "$ greeting=hello\n$ export greeting\nNOTEAgain, make sure to not use $ when running export as you want to pass the name\nof the variable instead of its contents.\nAn easier way to create the environment variable is to combine both of the above methods, by\nassigning the variable value in the argument part of the command.\n$ export greeting=hey\nLet’s check again if the variable is accessible to subprocesses:\n$ export greeting=hey\n$ echo $greeting world\nhey world\n$ bash -c 'echo $greeting world'\nhey world\nAnother way to use environment variables is to use them in front of commands. We can test this\nwith the environment variable TZ which holds the timezone. This variable is used by the\ncommand date to determine which timezone’s time to display:\n$ TZ=EST date\nThu 31 Jan 10:07:35 EST 2019\n$ TZ=GMT date\nThu 31 Jan 15:07:35 GMT 2019\nYou can display all environment variables using the env command.\nThe PATH Variable\nThe PATH variable is one of the most important environment variables in a Linux system. It stores\na list of directories, separated by a colon, that contain executable programs eligible as commands\nfrom the Linux shell.\n$ echo $PATH\n/home/user/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n88     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 98,
        "Contenuto": "To append a new directory to the variable, you will need to use the colon sign ( :).\n$ PATH=$PATH:new_directory\nHere an example:\n$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n$ PATH=$PATH:/home/user/bin\n$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/user/bin\nAs you see, $PATH is used in the new value assigned to PATH. This variable is resolved during the\ncommand execution and makes sure that the original content of the variable is preserved. Of\ncourse, you can use other variables in the assignment as well:\n$ mybin=/opt/bin\n$ PATH=$PATH:$mybin\n$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/user/bin:/opt/bin\nThe PATH variable needs to be handled with caution, as it is crucial for working on the command\nline. Let’s consider the following PATH variable:\n$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nTo find out how the shell invokes a specific command, which can be run with the command’s\nname as argument. We can, for example, try to find out where nano is stored:\n$ which nano\n/usr/bin/nano\nAs it can be seen, the nano executable is located within the /usr/bin  directory. Let’s remove the\ndirectory from the variable and check to see if the command still works:\n$ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin:/usr/games\n$ echo $PATH\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     89"
    },
    {
        "Pagina": 99,
        "Contenuto": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin:/usr/games\nLet’s look up the nano command again:\n$ which nano\nwhich: no nano in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin:/usr/games)\nAs it can be seen, the command is not found, therefore not executed. The error message also\nexplains the reason why the command was not found and in what locations it was searched.\nLet’s add back the directories and try running the command again.\n$ PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n$ which nano\n/usr/bin/nano\nNow our command works again.\nTIPThe order of elements in PATH also defines the lookup order. The first matching\nexecutable found while going through the paths is executed.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n90     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 100,
        "Contenuto": "Guided Exercises\n1.Create a local variable number.\n2.Create an environment variable ORDER, using one of the two above methods.\n3.Display both the variable names and their contents.\n4.What are the scopes of the previously created variables?\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     91"
    },
    {
        "Pagina": 101,
        "Contenuto": "Explorational Exercises\n1.Create a local variable nr_files  and assign the number of lines found in the /etc/passwd \nfile. Hint: Look into the command wc and command substitution and don’t forget about\nquotation marks.\n2.Create an environment variable ME. Assign the USER variable’s value to it.\n3.Append the HOME variable’s value to ME, having the : delimiter. Display the contents of the ME\nvariable.\n4.Using the date example above, create a variable called today and assign the date for one of the\ntime zones.\n5.Create another variable called today1 and assign the system’s date to it.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n92     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 102,
        "Contenuto": "Summary\nIn this lab you learned:\n•Types of variables\n•How to create variables\n•How to manipulate variables\nCommands used in the exercises:\nenv\nDisplay the current environment.\necho\nOutput text.\nexport\nMake local variables available to subprocesses.\nunset\nRemove a variable.\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     93"
    },
    {
        "Pagina": 103,
        "Contenuto": "Answers to Guided Exercises\n1.Create a local variable number.\n$ number=5\n2.Create an environment variable ORDER, using one of the two above methods.\n$ export ORDER=desc\n3.Display both the variable names and their contents.\n$ echo number\nnumber\n$ echo ORDER\nORDER\n$ echo $number\n5\n$ echo $ORDER\ndesc\n4.What are the scopes of the previously created variables?\n◦The scope of the local variable number is the current shell only.\n◦The scope of the environment variable ORDER is the current shell and all the subshells\ngenerated by it.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n94     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 104,
        "Contenuto": "Answers to Explorational Exercises\n1.Create a local variable nr_files  and assign the number of lines found in the /etc/passwd \nfile. Hint: Look into the command wc and command substitution and don’t forget about\nquotation marks.\n$ nr_files=`wc -l /etc/passwd`\n2.Create an environment variable ME. Assign the USER variable’s value.\n$ export ME=$USER\n3.Append the HOME variable value to ME, having the : delimiter. Display the contents of the ME\nvariable.\n$ ME=$ME:$HOME\n$ echo $ME\nuser:/home/user\n4.Using the date example above, create a variable called today and assign the date for one of the\ntime zones.\nThe following use the GMT and EST time zones as an example, but any time zone selection is\nvalid.\n$ today=$(TZ=GMT date)\n$ echo $today\nThu 31 Jan 15:07:35 GMT 2019\nor\n$ today=$(TZ=EST date)\n$ echo $today\nThu 31 Jan 10:07:35 EST 2019\n5.Create another variable called today1 and assign the system’s date to it.\nAssuming that you are in GMT:\nLinux Essentials (Version 1.6) | 2.1 Command Line Basics\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     95"
    },
    {
        "Pagina": 105,
        "Contenuto": "$ today1=$(date)\n$ echo $today1\nThu 31 Jan 10:07:35 EST 2019\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n96     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 106,
        "Contenuto": "2.2 Using the Command Line to Get Help\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 2.2\nWeight\n2\nKey knowledge areas\n•Man pages\n•Info pages\nPartial list of the used files, terms and utilities\n•man\n•info\n•/usr/share/doc/\n•locate\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     97"
    },
    {
        "Pagina": 107,
        "Contenuto": "2.2 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.2 Using the Command Line to Get Help\nLesson: 1 of 1\nIntroduction\nThe command line is a very complex tool. Each command has its own unique options, therefore\ndocumentation is key when working with a Linux system. Besides the /usr/share/doc/ \ndirectory, which stores most of the documentation, various other tools provide information on\nusing Linux commands. This chapter focuses on methods to access that documentation, with the\npurpose of getting help.\nThere are a multitude of methods to get help within the Linux command line. man, help and info\nare just a few of them. For Linux Essentials, we will be focusing on man and info as they are the\nmost commonly used tools for obtaining help.\nAnother topic of this chapter will be locating files. You will mainly work with the locate\ncommand.\nGetting Help on the Command Line\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n98     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 108,
        "Contenuto": "Built-in Help\nWhen started with the --help parameter, most commands display some brief instructions about\ntheir usage. Although not all commands provide this switch, it is still a good first try to learn more\nabout the parameters of a command. Be aware that the instructions from --help often are rather\nbrief compared to the other sources of documentation which we will discuss in the rest of this\nlesson.\nMan Pages\nMost commands provide a manual page or “man” page. This documentation is usually installed\nwith the software and can be accessed with the man command. The command whose man page\nshould be displayed is added to man as an argument:\n$ man mkdir\nThis command opens the man page for mkdir. You can use the up and down arrow keys or the\nspace bar to navigate through the man page. To exit the man page, press Q.\nEach man page is divided in maximum of 11 sections, though many of these sections are optional:\nSection Description\nNAME Command name and brief description\nSYNOPSIS Description of the command’s syntax\nDESCRIPTION Description of the effects of the command\nOPTIONS Available options\nARGUMENTS Available arguments\nFILES Auxiliary files\nEXAMPLES A sample of the command line\nSEE ALSO Cross-references to the related topics\nDIAGNOSTICS Warning and Error messages\nCOPYRIGHT Author(s) of the command\nBUGS Any known limitations of the command\nIn practice, most man pages don’t contain all of these parts.\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     99"
    },
    {
        "Pagina": 109,
        "Contenuto": "Man pages are organized in eight categories, numbered from 1 to 8:\nCategory Description\n1 User command\n2 System calls\n3 Functions of the C library\n4 Drivers and device files\n5 Configuration files and file formats\n6 Games\n7 Miscellaneous\n8 System administrator commands\n9 Kernel functions (not standard)\nEach man page belongs to exactly one category. However, multiple categories can contain man\npages with the same name. Let’s take the passwd command as an example. This command can be\nused to change a user’s password. Since passwd is a user command, its man page resides in\ncategory 1. In addition to the passwd command, the password database file /etc/passwd  also has\na man page which is called passwd, too. As this file is a configuration file, it belongs to category 5.\nWhen referring to a man page, the category is often added to the name of the man page, as in\npasswd(1)  or passwd(5)  to identify the respective man page.\nBy default, man passwd  displays the first available man page, in this case passwd(1) . The\ncategory of the desired man page can be specified in a command such as man 1 passwd  or man 5\npasswd.\nWe have already discussed how to navigate through a man page and how to return to the\ncommand line. Internally, man uses the less command to display the man page’s content. less\nlets you search for text within a man page. To search for the word linux you can just use /linux\nfor forward searching from the point that you are on the page, or ?linux to start a backward\nsearch. This action highlights the all the matching results and moves the page to the first\nhighlighted match. In both cases you can type N to jump to the next match. In order to find more\ninformation about these additional features, press H and a menu with all the information will be\ndisplayed.\nInfo Pages\nAnother tool that will help you while working with the Linux system are the info pages. The info\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n100     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 110,
        "Contenuto": "pages are usually more detailed than the man pages and are formatted in hypertext, similar to\nweb pages on the Internet.\nThe info pages can be displayed like so:\n$ info mkdir\nFor each info page, info reads an info file that is structured into individual nodes within a tree.\nEach node contains a simple topic and the info command contains hyperlinks that can help you\nmove from one to the other. You can access the link by pressing enter while placing the cursor on\none of the leading asterisks.\nSimilar to man, the info tool also has page navigation commands. You can find out more about\nthese command by pressing ? while being on the info page. These tools will help you navigate the\npage easier as well as understand how to access the nodes and move within the node tree.\nThe /usr/share/doc/  directory\nAs mentioned before, the /usr/share/doc/  directory stores most documentation of the\ncommands that the system is using. This directory contains a directory for most packages installed\non the system. The name of the directory is usually the name of the package and occasionally its\nversion. These directories include a README or readme.txt  file that contains the package’s basic\ndocumentation. Alongside the README file, the folder can also contain other documentation files,\nsuch as the changelog which includes the history of the program in detail, or examples of\nconfiguration files for the specific package.\nThe information within the README file varies from one package to another. All files are written in\nplain text, therefore they can be read with any preferred text editor. The exact number and kinds\nof files depend on the package. Check some of the directories to get an overview of their contents.\nLocating files\nThe locate command\nA Linux system is built from numerous directories and files. Linux has many tools to locate a\nparticular file within a system. The quickest one is the command locate.\nlocate searches within a database and then outputs every name that matches the given string:\n$ locate note\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     101"
    },
    {
        "Pagina": 111,
        "Contenuto": "/lib/udev/keymaps/zepto-znote\n/usr/bin/zipnote\n/usr/share/doc/initramfs-tools/maintainer-notes.html\n/usr/share/man/man1/zipnote.1.gz\nThe locate command supports the usage of wildcards and regular expressions as well, therefore\nthe search string does not have to match the entire name of the desired file. You will learn more\nabout regular expressions in a later chapter.\nBy default, locate behaves as if the pattern would be surrounded by asterisks, so locate\nPATTERN is the same as locate *PATTERN* . This allows you just provide substrings instead of the\nexact filename. You can modify this behavior with the different options that you can find\nexplained in the locate man page.\nBecause locate is reading from a database, you may not find a file that you recently created. The\ndatabase is managed by a program named updatedb . Usually it is run periodically, but if you\nhave root privileges and you need the database to be updated immediately, you can run the\nupdatedb  command yourself at any time.\nThe find command\nfind is another very popular tool that is used to search for files. This command has a different\napproach, compared to the locate command. find command searches a directory tree\nrecursively, including its subdirectories. find does such a search at each invocation, it does not\nmaintain a database like locate. Similar to locate, find also supports wildcards and regular\nexpressions.\nfind requires at least the path it should search. Furthermore, so-called expressions can be added\nto provide filter criteria for which files to display. An example is the -name expression, which\nlooks for files with a specific name:\n~$ cd Downloads\n~/Downloads\n$ find . -name thesis.pdf\n./thesis.pdf\n~/Downloads\n$ find ~ -name thesis.pdf\n/home/carol/Downloads/thesis.pdf\nThe first find command searches for the file within the current Downloads  directory, whereas\nthe second one searches for the file in the user’s home directory.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n102     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 112,
        "Contenuto": "The find command is very complex, therefore it will not be covered in the Linux Essentials exam.\nHowever, it is a powerful tool which is particularly handy in practice.\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     103"
    },
    {
        "Pagina": 113,
        "Contenuto": "Guided Exercises\n1.Use the man command to find out what each command does:\nCommand Description\nls Display the contents of a directory.\ncat\ncut\ncd\ncp\nmv\nmkdir\ntouch\nwc\npasswd\nrm\nrmdir\nmore\nless\nwhereis\nhead\ntail\nsort\ntr\nchmod\ngrep\n2.Open the ls info page and identify the MENU.\n◦What options do you have?\n◦Find the option that allows you to sort the output by modification time.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n104     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 114,
        "Contenuto": "3.Display the path to the first 3 README files. Use the man command to identify the correct option\nfor locate.\n4.Create a file called test in your home directory. Find its absolute path with the locate\ncommand.\n5.Did you find it immediately? What did you have to do in order for locate to find it?\n6.Search for the test file that you previously created, using the find command. What syntax did\nyou use and what is the absolute path ?\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     105"
    },
    {
        "Pagina": 115,
        "Contenuto": "Explorational Exercises\n1.There is one command in the table above that doesn’t have a man page. Which one is it and why\ndo you think that the command doesn’t have a man page?\n2.Using the commands in the table above, create the following file tree. The names that start with\na capital are Directories and the ones in lower case are files.\nUser\n├── Documents\n|   ├──Hello\n|   |   ├──hey2\n|   |   ├──helloa\n|   |   └──ola5\n|   └──World\n|       └──earth9\n├── Downloads\n|   ├──Music\n|   └──Songs\n|       ├──collection1\n|       └──collection2\n├── Test\n|   └── passa\n└── test\n3.Display on the screen the present working directory, including the subfolders.\n4.Search within the tree for all files that end with a number.\n5.Remove the entire directory tree with a single command.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n106     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 116,
        "Contenuto": "Summary\nIn this lesson you learned:\n•How to get help\n•How to use the man command\n•How to navigate the man page\n•Different sections of the man page\n•How to use the info command\n•How to navigate between different nodes\n•How to search for files within the system\nCommands used in the exercises:\nman\nDisplay a man page.\ninfo\nDisplay an info page.\nlocate\nSearch the locate database for files with a specific name.\nfind\nSearch the file system for names matching a set of selection criteria.\nupdatedb\nUpdate the locate database.\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     107"
    },
    {
        "Pagina": 117,
        "Contenuto": "Answers to Guided Exercises\n1.Use the man command to find out what each command does:\nCommand Description\nls Display the contents of a directory.\ncat Concatenates or views text files\ncut Removes sections from a text file\ncd Changes to a different directory\ncp Copies a file\nmv Moves a file (it can also be used to rename)\nmkdir Creates a new directory\ntouch Creates a file or modifies an existing file’s last\nmodified time and date\nwc Counts the number of words, lines or bytes of\na file\npasswd Changes a user’s password\nrm Deletes a file\nrmdir Deletes a directory\nmore Views text files one screen at a time\nless Views text files, allows scrolling up and down\na line or page at a time\nwhereis Displays the file path to a specified program\nand related manual files\nhead Displays the first few lines of a file\ntail Displays the last few lines of a file\nsort Orders a file numerically or alphabetically\ntr Translates or removes characters of a file\nchmod Changes a file’s permissions\ngrep Searches within a file\n2.Open the ls info page and identify the MENU.*\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n108     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 118,
        "Contenuto": "◦What options do you have?\n▪Which files are listed\n▪What information is listed\n▪Sorting the output\n▪Details about version sort\n▪General output formatting\n▪Formatting file timestamps\n▪Formatting the file names\n◦Find the option that allows you to sort the output by modification time.\n-t or --sort=time\n3.Display the path to the first 3 README files. Use the man command to identify the correct option\nfor locate.\n$ locate -l 3 README\n/etc/alternatives/README\n/etc/init.d/README\n/etc/rc0.d/README\n4.Create a file called test in your home directory. Find its absolute path with the locate\ncommand.\n$ touch test\n$ locate test\n/home/user/test\n5.Did you find it immediately? What did you have to do in order for locate to find it?\n$ sudo updatedb\nThe file is newly created, therefore there is no record of it in the database.\n6.Search for the test file that you previously created, using the find command. What syntax did\nyou use and what is the absolute path ?\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     109"
    },
    {
        "Pagina": 119,
        "Contenuto": "$ find ~ -name test\nor\n$ find . -name test\n/home/user/test\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n110     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 120,
        "Contenuto": "Answers to Explorational Exercises\n1.There is one command in the table above that doesn’t have a man page. Which one is it and why\ndo you think that the command doesn’t have a man page?\nThe cd command. It doesn’t have a man page because it is a built-in shell command.\n2.Using the commands in the table above, create the following file tree. The names that start with\na capital are Directories and the ones in lower case are files.\nUser\n├── Documents\n|   ├──Hello\n|   |   ├──hey2\n|   |   ├──helloa\n|   |   └──ola5\n|   └──World\n|       └──earth9\n├── Downloads\n|   ├──Music\n|   └──Songs\n|       ├──collection1\n|       └──collection2\n├── Test\n|   └── passa\n└── test\nThe solution is a combination of mkdir and touch commands.\n3.Display on the screen the present working directory, including the subfolders.\n$ ls -R\n4.Search within the tree for all files that end with a number.\n$ find ~ -name \"*[0-9]\"\n$ locate \"*[0-9]\"\n5.Remove the entire directory tree with a single command.\nLinux Essentials (Version 1.6) | 2.2 Using the Command Line to Get Help\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     111"
    },
    {
        "Pagina": 121,
        "Contenuto": "$ rm -r Documents Downloads Test test\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n112     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 122,
        "Contenuto": "2.3 Using Directories and Listing Files\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 2.3\nWeight\n2\nKey knowledge areas\n•Files, directories\n•Hidden files and directories\n•Home directories\n•Absolute and relative paths\nPartial list of the used files, terms and utilities\n•Common options for ls\n•Recursive listings\n•cd\n•. and ..\n•home and ~\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     113"
    },
    {
        "Pagina": 123,
        "Contenuto": "2.3 Lesson 1\nIntroduction\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.3 Using Directories and Listing Files\nLesson: 1 of 2\nFiles and Directories\nThe Linux filesystem is similar to other operating system’s filesystems in that it contains files and\ndirectories . Files contain data such as human-readable text, executable programs, or binary data\nthat is used by the computer. Directories are used to create organization within the filesystem.\nDirectories can contain files and other directories.\n$ tree\nDocuments\n├── Mission-Statement.txt\n└── Reports\n    └── report2018.txt\n1 directory, 2 files\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n114     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 124,
        "Contenuto": "In this example, Documents  is a directory that contains one file ( Mission-Statement.txt ) and\none subdirectory  (Reports). The Reports directory in turn contains one file called\nreport2018.txt . The Documents  directory is said to be the parent  of the Reports directory.\nTIPIf the command tree is not available on your system, install it using your Linux\ndistribution’s package manager. Refer to the lesson on package management to learn\nhow to do so.\nFile and Directory Names\nFile and directory names in Linux can contain lower case and upper case letters, numbers, spaces\nand special characters. However, since many special characters have a special meaning in the\nLinux shell, it is good practice to not use spaces or special characters when naming files or\ndirectories. Spaces, for example, need the escape character  \\ to be entered correctly:\n$ cd Mission\\ Statements\nAlso, refer to the filename report2018.txt . Filenames can contain a suffix  which comes after the\nperiod ( .). Unlike Windows, this suffix has no special meaning in Linux; it is there for human\nunderstanding. In our example .txt indicates to us that this is a plaintext file, although it could\ntechnically contain any kind of data.\nNavigating the Filesystem\nGetting Current Location\nSince Linux shells such as Bash are text-based, it is important to remember your current location\nwhen navigating the filesystem. The command prompt  provides this information:\nuser@hostname ~/Documents/Reports $\nNote that information such as user and hostname  will be covered in future sections. From the\nprompt, we now know that our current location is in the Reports directory. Similarly, the\ncommand pwd will print working directory :\nuser@hostname ~/Documents/Reports $ pwd\n/home/user/Documents/Reports\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     115"
    },
    {
        "Pagina": 125,
        "Contenuto": "The relationship of directories is represented with a forward slash ( /). We know that Reports is a\nsubdirectory of Documents , which is a subdirectory of user, which is located in a directory called\nhome. home doesn’t seem to have a parent directory, but that is not true at all. The parent of home\nis called root , and is represented by the first slash ( /). We will discuss the root directory in a later\nsection.\nNotice that the output of the pwd command differs slightly from the path given on the command\nprompt. Instead of /home/user , the command prompt contains a tilde ( ~). The tilde is a special\ncharacter that represents the user’s home directory. This will be covered in more detail in the next\nlesson.\nListing Directory Contents\nThe contents of the current directory are listed with the ls command:\nuser@hostname ~/Documents/Reports $ ls\nreport2018.txt\nNote that ls provides no information about the parent directory. Similarly, by default ls does not\nshow any information about contents of subdirectories. ls can only “see” what is in the current\ndirectory.\nChanging Current Directory\nNavigation in Linux is primarily done with the cd command. This changes directory . Using the pwd\ncommand from before, we know our current directory is /home/user/Documents/Reports . We\ncan change our current directory by entering a new path:\nuser@hostname ~ $ cd /home/user/Documents\nuser@hostname ~/Documents $ pwd\n/home/user/Documents\nuser@hostname ~/Documents $ ls\nMission-Statement.txt Reports\nFrom our new location, we can “see” Mission-Statement.txt  and our subdirectory Reports,\nbut not the contents of our subdirectory. We can navigate back into Reports like this:\nuser@hostname ~/Documents $ cd Reports\nuser@hostname ~/Documents/Reports $ pwd\n/home/user/Documents/Reports\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n116     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 126,
        "Contenuto": "user@hostname ~/Documents/Reports $ ls\nreport2018.txt\nWe are now back where we started.\nAbsolute and Relative Paths\nThe pwd command always prints an absolute path . This means that the path contains every step of\nthe path, from the top of the filesystem ( /) to the bottom ( Reports). Absolute paths always begin\nwith a /.\n/\n└── home\n    └── user\n        └── Documents\n            └── Reports\nThe absolute path contains all the information required to get to Reports from anywhere in the\nfilesystem. The drawback is that it is tedious to type.\nThe second example ( cd Reports ) was much easier to type. This is an example of a relative path .\nRelative paths are shorter but only have meaning in relation to your current location. Consider\nthis analogy: I am visiting you at your house. You tell me that your friend lives next door. I will\nunderstand that location because it is relative to my current location. But if you tell me this over\nthe phone, I will not be able to find your friend’s house. You will need to give me the complete\nstreet address.\nSpecial Relative Paths\nThe Linux shell gives us ways to shorten our paths when navigating. To reveal the first special\npaths, we enter the ls command with the flag -a. This flag modifies the ls command so that all\nfiles and directories are listed, including hidden files and directories:\nuser@hostname ~/Documents/Reports $ ls -a\n.\n..\nreport2018.txt\nNOTE You can refer to the man page for ls to understand what -a is doing here.\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     117"
    },
    {
        "Pagina": 127,
        "Contenuto": "This command has revealed two additional results: These are special paths. They do not represent\nnew files or directories, but rather they represent directories that you already know:\n.\nIndicates the current location  (in this case, Reports).\n..\nIndicates the parent directory  (in this case, Documents ).\nIt is usually unnecessary to use the special relative path for the current location. It is easier and\nmore understandable to type report2018.txt  than it is to type ./report2018.txt . But the .\nhas uses that you will learn in future sections. For now, we will focus on the relative path for the\nparent directory:\nuser@hostname ~/Documents/Reports $ cd ..\nuser@hostname ~/Documents $ pwd\n/home/user/Documents\nThe example of cd is much easier when using .. instead of the absolute path. Additionally, we can\ncombine this pattern to navigate up the file tree very quickly.\nuser@hostname ~/Documents $ cd ../..\n$ pwd\n/home\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n118     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 128,
        "Contenuto": "Guided Exercises\n1.For each of the following paths, identify whether it is absolute  or relative :\n/home/user/Downloads\n../Reports\n/var\ndocs\n/\n2.Observe the following file structure. Note: Directories end with a slash ( /) when tree is\ninvoked with the -F option. You will need elevated privileges in order to run the tree\ncommand on the root ( /) directory. The following is example output and is not indicative of a\nfull directory structure. Use it to answer the following questions:\n$ sudo tree -F /\n/\n├── etc/\n│   ├── network/\n│   │   └── interfaces\n│   ├── systemd/\n│   │   ├── resolved.conf\n│   │   ├── system/\n│   │   ├── system.conf\n│   │   ├── user/\n│   │   └── user.conf\n│   └── udev/\n│       ├── rules.d/\n│       └── udev.conf\n└── home/\n    ├── lost+found/\n    └── user/\n        └── Documents/\n12 directories, 5 files\nUse this structure to answer the following questions.\nA user enters the following commands:\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     119"
    },
    {
        "Pagina": 129,
        "Contenuto": "$ cd /etc/udev\n$ ls -a\nWhat will be the output of the ls -a command?\n3.Enter the shortest possible command for each of the following:\n◦Your current location is root ( /). Enter the command to navigate to lost+found  within the\nhome directory (example):\n$ cd home/lost+found\n◦Your current location is root ( /). Enter the command to navigate to the directory named\n/etc/network/ .\n◦Your current location is /home/user/Documents/ . Navigate to the directory named /etc/.\n◦Your current location is /etc/systemd/system/ . Navigate to the directory named\n/home/user/ .\n4.Consider the following commands:\n$ pwd\n/etc/udev/rules.d\n$ cd ../../systemd/user\n$ cd ..\n$ pwd\nWhat is the output of the final pwd command?\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n120     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 130,
        "Contenuto": "Explorational Exercises\n1.Suppose a user has entered the following commands:\n$ mkdir \"this is a test\"\n$ ls\nthis is a test\nWhat cd command would allow you to enter this directory?\n2.Try this again, but after typing in cd this, press the TAB key. What is now displayed on the\nprompt?\nThis is an example of autocompletion , which is an invaluable tool not only for saving time, but\nfor preventing spelling errors.\n3.Try to create a directory whose name contains a \\ character. Display the directory’s name with\nls and delete the directory.\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     121"
    },
    {
        "Pagina": 131,
        "Contenuto": "Summary\nIn this lesson, you learned:\n•The fundamentals of the Linux filesystem\n•The difference between parent  directories and subdirectories\n•The difference between absolute  file paths and relative  file paths\n•The special relative paths . and ..\n•Navigate the filesystem using cd\n•Show your current location using pwd\n•List all files and directories using ls -a\nThe following commands were discussed in this lesson:\ncd\nChange the current directory.\npwd\nPrint the current working directory’s path\nls\nList the contents of a directory and display properties of files\nmkdir\nCreate a new directory\ntree\nDisplay a hierarchical listing of a directory tree\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n122     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 132,
        "Contenuto": "Answers to Guided Exercises\n1.For each of the following paths, identify whether it is absolute  or relative :\n/home/user/Downloads absolute\n../Reports relative\n/var absolute\ndocs relative\n/ absolute\n2.Observe the following file structure. Note: Directories end with a slash ( /) when tree is\ninvoked with the -F option. You will need elevated privileges in order to run the tree\ncommand on the root ( /) directory. The following is example output and is not indicative of a\nfull directory structure. Use it to answer the following questions:\n$ sudo tree -F /\n/\n├── etc/\n│   ├── network/\n│   │   └── interfaces\n│   ├── systemd/\n│   │   ├── resolved.conf\n│   │   ├── system/\n│   │   ├── system.conf\n│   │   ├── user/\n│   │   └── user.conf\n│   └── udev/\n│       ├── rules.d/\n│       └── udev.conf\n└── home/\n    ├── lost+found/\n    └── user/\n        └── Documents/\n12 directories, 5 files\nA user enters the following commands:\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     123"
    },
    {
        "Pagina": 133,
        "Contenuto": "$ cd /etc/udev\n$ ls -a\nWhat will be the output of the ls -a command?\n. .. rules.d udev.conf\n3.Enter the shortest possible command for each of the following:\n◦Your current location is root ( /). Enter the command to navigate to lost+found  within the\nhome directory (example):\n$ cd home/lost+found\n◦Your current location is root ( /). Enter the command to navigate to the directory named\nnetwork:\n$ cd etc/network\n◦Your current location is Documents . Navigate to the directory named etc:\n$ cd /etc\n◦Your current location is system. Navigate to the directory named user:\n$ cd /home/user\n4.Consider the following commands:\n$ pwd\n/etc/udev/rules.d\n$ cd ../../systemd/user\n$ cd ..\n$ pwd\nWhat is the output of the final pwd command?\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n124     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 134,
        "Contenuto": "/etc/systemd\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     125"
    },
    {
        "Pagina": 135,
        "Contenuto": "Answers to Explorational Exercises\n1.Suppose a user has entered the following commands:\n$ mkdir \"this is a test\"\n$ ls\nthis is a test\nWhat cd command would allow you to enter this directory?\n$ cd this\\ is\\ a\\ test\n2.Try this again, but after typing in cd this, press the TAB key. What is now displayed on the\nprompt?\n$ cd this\\ is\\ a\\ test\nThis is an example of autocompletion, which is an invaluable tool not only for saving time, but\nfor preventing spelling errors.\n3.Try to create a directory whose name contains a \\ character. Display the directory’s name with\nls and delete the directory.\nYou can either escape the backslash using another backslash ( \\\\) or use single or double\nquotes around the whole directory name:\n$ mkdir my\\\\dir\n$ ls\n'my\\dir'\n$ rmdir 'my\\dir'\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n126     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 136,
        "Contenuto": "2.3 Lesson 2\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.3 Using Directories and Listing Files\nLesson: 2 of 2\nIntroduction\nThe Unix operating system was originally designed for mainframe computers in the mid-1960s.\nThese computers were shared among many users, who accessed the system’s resources through\nterminals . These fundamental ideas carry through to Linux systems today. We still talk about\nusing “terminals” to enter commands in the shell, and every Linux system is organized in such a\nway that it is easy to create many users on a single system.\nHome Directories\nThis is an example of a normal file system in Linux:\n$ tree -L 1 /\n/\n├── bin\n├── boot\n├── cdrom\n├── dev\n├── etc\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     127"
    },
    {
        "Pagina": 137,
        "Contenuto": "├── home\n├── lib\n├── mnt\n├── opt\n├── proc\n├── root\n├── run\n├── sbin\n├── srv\n├── sys\n├── tmp\n├── usr\n└── var\nMost of these directories are consistent across all Linux systems. From servers to supercomputers\nto tiny embedded systems, a seasoned Linux user can be confident that they can find the ls\ncommand inside /bin, can change the system configuration by modifying files in /etc, and read\nsystem logs in /var. The standard location of these files and directories is defined by the\nFilesystem Hierarchy Standard (FHS), which will be discussed in a later lesson. You will learn\nmore about the contents of these directories as you continue learning about Linux, but for the\ntime being, know that:\n•changes that you make in the root filesystem will affect all users, and\n•changing files in the root filesystem will require administrator permissions.\nThis means that normal users will be prohibited from modifying these files, and may also be\nprohibited from even reading these files. We will cover the topic of permissions in a later section.\nNow, we will focus on the directory /home, which should be somewhat familiar at this point:\n$ tree -L 1 /home\n/home\n├── user\n├── michael\n└── lara\nOur example system has three normal users, and each of our users has their own dedicated\nlocation, where they can create and modify files and directories without affecting their neighbor.\nFor example, in the previous lesson we were working with the following file structure:\n$ tree /home/user\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n128     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 138,
        "Contenuto": "user\n└── Documents\n    ├── Mission-Statement\n    └── Reports\n        └── report2018.txt\nIn actuality, the real filesystem may look like this:\n$ tree /home\n/home\n├── user\n│   └── Documents\n│       ├── Mission-Statement\n│       └── Reports\n│           └── report2018.txt\n├── michael\n│   ├── Documents\n│   │   └── presentation-for-clients.odp\n│   └── Music\n…and so on for lara.\nIn Linux, /home is similar to an apartment building. Many users may have their space here,\nseparated into dedicated apartments. The utilities and maintenance of the building itself are the\nresponsibility of the superintendent root user.\nThe Special Relative Path for Home\nWhen you start a new terminal session in Linux, you see a command prompt similar to this:\nuser@hostname ~ $\nThe tilde ( ~) here represents our home directory . If you run the ls command, you will see some\nfamiliar output:\n$ cd ~\n$ ls\nDocuments\nCompare that with the file system above to check your understanding.\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     129"
    },
    {
        "Pagina": 139,
        "Contenuto": "Consider now what we know about Linux: it is similar to an apartment building, with many users\nresiding in /home. So user 's home will be different from user michael 's home. To demonstrate\nthis, we will use the su command to switch user .\nuser@hostname ~ $ pwd\n/home/user\nuser@hostname ~ $ su - michael\nPassword:\nmichael@hostname ~ $ pwd\n/home/michael\nThe meaning of ~ changes depending of who the user is. For michael, the absolute path of ~ is\n/home/michael . For lara, the absolute path of ~ is /home/lara , and so on.\nRelative-to-Home File Paths\nUsing ~ for commands is very convenient, provided that you don’t switch users. We will consider\nthe following example for user, who has begun a new session:\n$ ls\nDocuments\n$ cd Documents\n$ ls\nMission-Statement\nReports\n$ cd Reports\n$ ls\nreport2018.txt\n$ cd ~\n$ ls\nDocuments\nNote that users will always begin a new session in their home directory. In this example, user has\ntraveled into their Documents/Reports  subdirectory, and with the cd ~ command they have\nreturned to where they started. You can perform the same action by using the cd command with\nno arguments:\n$ cd Documents/Reports\n$ pwd\n/home/user/Documents/Reports\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n130     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 140,
        "Contenuto": "$ cd\n$ pwd\n/home/user\nOne last thing to note: we can specify the home directories of other users  by specifying the\nusername after the tilde. For example:\n$ ls ~michael\nDocuments\nMusic\nNote that this will only work if michael has given us permission to view the contents of his home\ndirectory.\nLet’s consider a situation where michael would like to view the file report2018.txt  in user 's\nhome directory. Assuming that michael has the permission to do so, he can use the less\ncommand.\n$ less ~user/Documents/Reports/report2018.txt\nAny file path that contains the ~ character is called a relative-to-home  path.\nHidden Files and Directories\nIn the previous lesson, we introduced the option -a for the ls command. We used ls -a to\nintroduce the two special relative paths: . and ... The -a option will list all files and directories,\nincluding hidden  files and directories.\n$ ls -a ~\n.\n..\n.bash_history\n.bash_logout\n.bash-profile\n.bashrc\nDocuments\nHidden files and directories will always begin with a period ( .). By default, a user’s home\ndirectory will include many hidden files. These are often used to set user-specific configuration\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     131"
    },
    {
        "Pagina": 141,
        "Contenuto": "settings, and should only be modified by an experienced user.\nThe Long List Option\nThe ls command has many options to change its behavior. Let’s look at one of the most common\noptions:\n$ ls -l\n-rw-r--r-- 1 user staff      3606 Jan 13  2017 report2018.txt\n-l creates a long list . Files and directories will each occupy one line, but additional information\nabout each file and directory will be displayed.\n-rw-r—r--\nType of file and permissions of the file. Note that a regular file will begin with dash, and a\ndirectory will start with d.\n1\nNumber of links to the file.\nuser staff\nSpecifies ownership of the file. user is the owner of the file, and the file is also associated with\nthe staff group.\n3606\nSize of the file in bytes.\nJan 13 2017\nTime stamp of the last modification to the file.\nreport2018.txt\nName of the file.\nSubjects such as ownership, permissions and links will be covered in future sections. As you can\nsee, the long list version of the ls is oftentimes preferable to the default.\nAdditional ls Options\nBelow are some of the ways that we most commonly use the ls command. As you can see, the\nuser can combine many options together to get the desired output.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n132     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 142,
        "Contenuto": "ls -lh\nCombining long list  with human readable  file sizes will give us useful suffixes such as M for\nmegabytes or K for kilobytes.\nls -d */\nThe -d option will list directories but not their contents. Combining this with */ will show only\nsubdirectories and no files.\nls -lt\nCombines long list  with the option to sort by modification time . The files with the most recent\nchanges will be at the top, and files with the oldest changes will be at the bottom. But this order\ncan be reversed with:\nls -lrt\nCombines long list  with sort by (modification) time , combined with -r which reverses  the sort.\nNow files with the most recent changes are at the bottom of the list. In addition to sorting by\nmodification  time, files can also be sorted by access  time or by status  time.\nls -lX\nCombines long list  with the option to sort by file eXtension . This will, for example, group all files\nending with .txt together, all files ending with .jpg together, and so on.\nls -S\nThe -S sorts by file size, much in the same way as -t and -X sort by time and extension\nrespectively. The largest files will come first, and smallest last. Note that the contents of\nsubdirectories are not included in the sort.\nls -R\nThe -R option will modify the ls command to display a recursive  list. What does this mean?\nRecursion in Bash\nRecursion refers to a situation when “something is defined in terms of itself”. Recursion is a very\nimportant concept in computer science, but here its meaning is far simpler. Let’s consider our\nexample from before:\n$ ls ~\nDocuments\nWe know from before that user has a home directory, and in this directory there is one\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     133"
    },
    {
        "Pagina": 143,
        "Contenuto": "subdirectory. ls has up until now only shown us the files and subdirectories of a location, but\ncannot tell us the contents of these subdirectories. In these lessons, we have been using the tree\ncommand when we wanted to display the contents of many directories. Unfortunately, tree is not\none of the core utilities of Linux and thus is not always available. Compare the output of tree\nwith the output of ls -R in the following examples:\n$ tree /home/user\nuser\n└── Documents\n    ├── Mission-Statement\n    └── Reports\n        └── report2018.txt\n$ ls -R ~\n/home/user/:\nDocuments\n/home/user/Documents:\nMission-Statement\nReports\n/home/user/Documents/Reports:\nreport2018.txt\nAs you can see, with the recursive option, we get a far longer list of files. In fact, it is as if we ran\nthe ls command in user 's home directory, and encountered one subdirectory. Then, we entered\ninto that subdirectory and ran the ls command again. We encountered the file Mission-\nStatement  and another subdirectory called Reports. And again, we entered into the\nsubdirectory, and ran the ls command again. Essentially, running ls -R is like telling Bash: “Run\nls here, and repeat the command in every subdirectory that you find.”\nRecursion is particularly important in file modification commands such as copying or removing\ndirectories. For example, if you wanted to copy the Documents  subdirectory, you would need to\nspecify a recursive copy in order to extend this command to all subdirectories.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n134     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 144,
        "Contenuto": "Guided Exercises\n1.Use the following file structure to answer the following three questions:\n/\n├── etc/\n│   ├── network/\n│   │   └── interfaces/\n│   ├── systemd/\n│   │   ├── resolved.conf\n│   │   ├── system/\n│   │   ├── system.conf\n│   │   ├── user/\n│   │   └── user.conf\n│   └── udev/\n│       ├── rules.d\n│       └── udev.conf\n└── home/\n    ├── lost+found/\n    ├── user/\n    │   └── Documents/\n    └── michael/\n        └── Music/\n◦What command will navigate into the network directory regardless of your current\nlocation?\n◦What command can user enter to navigate into their Documents  directory from\n/etc/udev ? Use the shortest possible path.\n◦What command can user enter to navigate into michael 's Music directory? Use the\nshortest possible path.\n2.Consider the following output of ls -lh to answer the next two questions. Note that\ndirectories are indicated with a d at the beginning of the line.\ndrwxrwxrwx  5 eric eric  4.0K Apr 26  2011 China/\n-rwxrwxrwx  1 eric eric  1.5M Jul 18  2011 img_0066.jpg\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     135"
    },
    {
        "Pagina": 145,
        "Contenuto": "-rwxrwxrwx  1 eric eric  1.5M Jul 18  2011 img_0067.jpg\n-rwxrwxrwx  1 eric eric  1.6M Jul 18  2011 img_0074.jpg\n-rwxrwxrwx  1 eric eric  1.8M Jul 18  2011 img_0075.jpg\n-rwxrwxrwx  1 eric eric   46K Jul 18  2011 scary.jpg\n-rwxrwxrwx  1 eric eric  469K Jan 29  2018 Screenshot from 2017-08-13 21-22-24.png\n-rwxrwxrwx  1 eric eric  498K Jan 29  2018 Screenshot from 2017-08-14 21-18-07.png\n-rwxrwxrwx  1 eric eric  211K Jan 29  2018 Screenshot from 2018-01-06 23-29-30.png\n-rwxrwxrwx  1 eric eric  150K Jul 18  2011 tobermory.jpg\ndrwxrwxrwx  6 eric eric  4.0K Apr 26  2011 Tokyo/\n-rwxrwxrwx  1 eric eric  1.4M Jul 18  2011 Toronto 081.jpg\n-rwxrwxrwx  1 eric eric  1.4M Jul 18  2011 Toronto 085.jpg\n-rwxrwxrwx  1 eric eric  944K Jul 18  2011 Toronto 152.jpg\n-rwxrwxrwx  1 eric eric  728K Jul 18  2011 Toronto 173.jpg\ndrwxrwxrwx  2 eric eric  4.0K Jun  5  2016 Wallpapers/\n◦When you run the command ls -lrS, what file will be at the beginning?\n◦Please describe what you expect to see as the output for ls -ad */ .\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n136     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 146,
        "Contenuto": "Explorational Exercises\n1.Run the ls -lh command in a directory that contains subdirectories. Note the listed size of\nthese directories. Do these file sizes seem correct to you? Do they accurately represent the\ncontents of all files inside that directory?\n2.Here is a new command to try: du -h. Run this command and describe the output that it gives\nyou.\n3.On many Linux systems, you can type in ll and get the same output as you would if you typed\nls -l. Please note however that ll is not a command. For example, man ll will give you the\nmessage that no manual entry exists for it. This is an example of an alias . Why might aliases be\nuseful to a user?\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     137"
    },
    {
        "Pagina": 147,
        "Contenuto": "Summary\nIn this lab, you learned:\n•that each Linux user will have a home directory,\n•the current user’s home directory can be reached by using ~,\n•any file path that uses ~ is called a relative-to-home  path.\nYou also learned about some of the most common ways of modifying the `ls command.\n-a (all)\nprints all files/directories, including hidden\n-d (directories)\nlist directories, not their contents\n-h (human readable)\nprints file sizes in human readable format\n-l (long list)\nprovides extra details, one file/directory per line\n-r (reverse)\nreverses the order of a sort\n-R (recursive)\nlists every file, including files in each subdirectory\n-S (size)\nsorts by file size\n-t (time)\nsorts by modification time\n-X (eXtension)\nsorts by file extension\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n138     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 148,
        "Contenuto": "Answers to Guided Exercises\n1.Use the following file structure to answer the following three questions:\n/\n├── etc/\n│   ├── network/\n│   │   └── interfaces/\n│   ├── systemd/\n│   │   ├── resolved.conf\n│   │   ├── system/\n│   │   ├── system.conf\n│   │   ├── user/\n│   │   └── user.conf\n│   └── udev/\n│       ├── rules.d\n│       └── udev.conf\n└── home/\n    ├── lost+found/\n    ├── user/\n    │   └── Documents/\n    └── michael/\n        └── Music/\n◦What command will navigate into the network directory regardless of your current\nlocation?\ncd /etc/network\n◦What command can user enter to navigate into their Documents  directory from\n/etc/udev ? Use the shortest possible path.\ncd ~/Documents\n◦What command can user enter to navigate into michael 's Music directory? Use the\nshortest possible path:\ncd ~michael/Music\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     139"
    },
    {
        "Pagina": 149,
        "Contenuto": "2.Consider the following output of ls -lh to answer the next two questions. Note that\ndirectories are indicated with a d at the beginning of the line.\ndrwxrwxrwx  5 eric eric  4.0K Apr 26  2011 China/\n-rwxrwxrwx  1 eric eric  1.5M Jul 18  2011 img_0066.jpg\n-rwxrwxrwx  1 eric eric  1.5M Jul 18  2011 img_0067.jpg\n-rwxrwxrwx  1 eric eric  1.6M Jul 18  2011 img_0074.jpg\n-rwxrwxrwx  1 eric eric  1.8M Jul 18  2011 img_0075.jpg\n-rwxrwxrwx  1 eric eric   46K Jul 18  2011 scary.jpg\n-rwxrwxrwx  1 eric eric  469K Jan 29  2018 Screenshot from 2017-08-13 21-22-24.png\n-rwxrwxrwx  1 eric eric  498K Jan 29  2018 Screenshot from 2017-08-14 21-18-07.png\n-rwxrwxrwx  1 eric eric  211K Jan 29  2018 Screenshot from 2018-01-06 23-29-30.png\n-rwxrwxrwx  1 eric eric  150K Jul 18  2011 tobermory.jpg\ndrwxrwxrwx  6 eric eric  4.0K Apr 26  2011 Tokyo/\n-rwxrwxrwx  1 eric eric  1.4M Jul 18  2011 Toronto 081.jpg\n-rwxrwxrwx  1 eric eric  1.4M Jul 18  2011 Toronto 085.jpg\n-rwxrwxrwx  1 eric eric  944K Jul 18  2011 Toronto 152.jpg\n-rwxrwxrwx  1 eric eric  728K Jul 18  2011 Toronto 173.jpg\ndrwxrwxrwx  2 eric eric  4.0K Jun  5  2016 Wallpapers/\n◦When you run the command ls -lrS, what file will be at the beginning?\nThe three folders are all 4.0K, which is the smallest file size. ls will then sort the directories\nalphabetically by default. The correct answer is the file scary.jpg .\n◦Please describe what you expect to see as the output for ls -ad */ .\nThis command will show all subdirectories, including hidden subdirectories.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n140     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 150,
        "Contenuto": "Answers to Explorational Exercises\n1.Run the ls -lh command in a directory that contains subdirectories. Note the listed size of\nthese directories. Do these file sizes seem correct to you? Do they accurately represent the\ncontents of all files inside that directory?\nNo, they do not. Each directory has a listed file size of 4096 bytes. This is because directories\nhere are an abstraction: they don’t exist as a tree structure on the disk. When you see a\ndirectory listed, you are seeing a link to a list of files. The size of these links is 4096 bytes.\n2.Here is a new command to try: du -h. Run this command and describe the output that it gives\nyou.\nThe du command will generate a list of all files and directories, and indicate the size of each.\nFor example, du -s will display the file size of all files, directories, and subdirectories for a\ncertain location.\n3.On many Linux systems, you can type in ll and get the same output as you would if you typed\nls -l. Please note however that ll is not a command. For example, man ll will give you the\nmessage that no manual entry exists for it. What does this suggest to you about a feature of the\ncommand line?\nll is an alias  of ls -l. In Bash, we can use aliases to simplify commonly-used commands. ll is\noften defined for you in Linux, but you can create your own as well.\nLinux Essentials (Version 1.6) | 2.3 Using Directories and Listing Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     141"
    },
    {
        "Pagina": 151,
        "Contenuto": "2.4 Creating, Moving and Deleting Files\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 2.4\nWeight\n2\nKey knowledge areas\n•Files and directories\n•Case sensitivity\n•Simple globbing\nPartial list of the used files, terms and utilities\n•mv, cp, rm, touch\n•mkdir, rmdir\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n142     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 152,
        "Contenuto": "2.4 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 2 Finding Your Way on a Linux System\nObjective: 2.4 Creating, Moving and Deleting Files\nLesson: 1 of 1\nIntroduction\nThis lesson covers managing files and directories on Linux using command line tools.\nA file is a collection of data with a name and set of attributes. If, for example, you were to transfer\nsome photos from your phone to a computer and give them descriptive names, you would now\nhave a bunch of image files on your computer. These files have attributes such as the time the file\nwas last accessed or modified.\nA directory is a special kind of file used to organize files. A good way to think of directories is like\nthe file folders used to organize papers in a file cabinet. Unlike paper file folders, you can easily\nput directories inside of other directories.\nThe command line is the most effective way to manage files on a Linux system. The shell and\ncommand line tools have features that make using the command line faster and easier than a\ngraphical file manager.\nIn this section you will use the commands ls, mv, cp, pwd, find, touch, rm, rmdir, echo, cat, and\nmkdir to manage and organize files and directories.\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     143"
    },
    {
        "Pagina": 153,
        "Contenuto": "Case Sensitivity\nUnlike Microsoft Windows, file and directory names on Linux systems are case sensitive. This\nmeans that the names /etc/ and /ETC/ are different directories. Try the following commands:\n$ cd /\n$ ls\nbin   dev  home  lib64  mnt  proc  run   srv  tmp  var\nboot  etc  lib   media  opt  root  sbin  sys  usr\n$ cd ETC\nbash: cd: ETC: No such file or directory\n$ pwd\n/\n$ cd etc\n$ pwd\n/etc\nThe pwd shows you the directory you are currently in. As you can see, changing to /ETC did not\nwork as there is no such directory. Changing into the directory /etc which exists, did succeed.\nCreating Directories\nThe mkdir command is used to create directories.\nLet’s create a new directory within our home directory:\n$ cd ~\n$ pwd\n/home/user\n$ ls\nDesktop  Documents  Downloads\n$ mkdir linux_essentials-2.4\n$ ls\nDesktop  Documents  Downloads  linux_essentials-2.4\n$ cd linux_essentials-2.4\n$ pwd\n/home/emma/linux_essentials-2.4\nFor the duration of this lesson, all commands will take place within this directory or in one of its\nsubdirectories.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n144     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 154,
        "Contenuto": "To easily return to the lesson directory from any other position in your file system, you can use\nthe command:\n$ cd ~/linux_essentials-2.4\nThe shell interprets the ~ character as your home directory.\nWhen you’re in the lesson directory, create some more directories which we will use for the\nexercises. You can add all the directory names, separated by spaces, to mkdir:\n$ mkdir creating moving copying/files copying/directories deleting/directories\ndeleting/files globs\nmkdir: cannot create directory ‘copying/files’: No such file or directory\nmkdir: cannot create directory ‘copying/directories’: No such file or directory\nmkdir: cannot create directory ‘deleting/directories’: No such file or directory\nmkdir: cannot create directory ‘deleting/files’: No such file or directory\n$ ls\ncreating  globs  moving\nNotice the error message and that only moving, globs, and creating  were created. The copying\nand deleting  directories don’t exist yet. mkdir, by default, won’t create a directory inside of a\ndirectory that does not exist. The -p or --parents  option instructs mkdir to create parent\ndirectories if they do not exist. Try the same mkdir command with the -p option:\n$ mkdir -p creating moving copying/files copying/directories deleting/directories\ndeleting/files globs\nNow you don’t get any error messages. Let’s see which directories exist now:\n$ find\n.\n./creating\n./moving\n./globs\n./copying\n./copying/files\n./copying/directories\n./deleting\n./deleting/directories\n./deleting/files\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     145"
    },
    {
        "Pagina": 155,
        "Contenuto": "The find program is usually used to search for files and directories, but without any options, it\nwill show you a listing of all the files, directories, and sub-directories of your current directory.\nTIPWhen listing the contents of a directory with ls, the -t and -r options are\nparticularly handy. They sort the output by time ( -t) and reverse the sorting order (\n-r). In this case, the newest files will be at the bottom of the output.\nCreating Files\nTypically, files will be created by the programs that work with the data stored in the files. An\nempty file can be created using the touch command. If you run touch on an existing file, the file’s\ncontents won’t be changed, but the files modification timestamp will be updated.\nRun the following command to create some files for the globbing lesson:\n$ touch globs/question1 globs/question2012 globs/question23 globs/question13\nglobs/question14\n$ touch globs/star10 globs/star1100 globs/star2002 globs/star2013\nNow let’s verify all files exist in the globs directory:\n$ cd globs\n$ ls\nquestion1   question14    question23  star1100  star2013\nquestion13  question2012  star10      star2002\nNotice how touch created the files? You can view the contents of a text file with the cat\ncommand. Try it on one of the files you just created:\n$ cat question14\nSince touch creates empty files, you should get no output. You can use echo with > to create\nsimple text files. Try it:\n$ echo hello > question15\n$ cat question15\nhello\necho displays text on the command line. The > character instructs the shell to write output of a\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n146     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 156,
        "Contenuto": "command to the specified file instead of your terminal. This leads to the output of echo, hello in\nthis case, being written to the file question15 . This isn’t specific to echo, it can be used with any\ncommand.\nWARNINGBe careful when using >! If the named file already exists, it will be\noverwritten!\nRenaming Files\nFiles are moved and renamed with the mv command.\nSet your working directory to the moving directory:\n$ cd ~/linux_essentials-2.4/moving\nCreate some files to practice with. By now, you should already be familiar with these commands:\n$ touch file1 file22\n$ echo file3 > file3\n$ echo file4 > file4\n$ ls\nfile1  file22  file3  file4\nSuppose file22 is a typo and should be file2. Fix it with the mv command. When renaming a\nfile, the first argument is the current name, the second is the new name:\n$ mv file22 file2\n$ ls\nfile1  file2  file3  file4\nBe careful with the mv command. If you rename a file to the name of an existing file, it will\noverwrite it. Let’s test this with file3 and file4:\n$ cat file3\nfile3\n$ cat file4\nfile4\n$ mv file4 file3\n$ cat file3\nfile4\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     147"
    },
    {
        "Pagina": 157,
        "Contenuto": "$ ls\nfile1  file2  file3\nNotice how the contents of file3 is now file4. Use the -i option to make mv prompt you if you\nare about to overwrite an existing file. Try it:\n$ touch file4 file5\n$ mv -i file4 file3\nmv: overwrite ‘file3’? y\nMoving Files\nFiles are moved from one directory to another with the mv command.\nCreate a few directories to move files into:\n$ cd ~/linux_essentials-2.4/moving\n$ mkdir dir1 dir2\n$ ls\ndir1  dir2  file1  file2  file3  file5\nMove file1 into dir1:\n$ mv file1 dir1\n$ ls\ndir1  dir2  file2  file3  file5\n$ ls dir1\nfile1\nNotice how the last argument to mv is the destination directory. Whenever the last argument to mv\nis a directory, files are moved into it. Multiple files can be specified in a single mv command:\n$ mv file2 file3 dir2\n$ ls\ndir1  dir2  file5\n$ ls dir2\nfile2  file3\nIt is also possible to use mv to move and rename directories. Rename dir1 to dir3:\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n148     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 158,
        "Contenuto": "$ ls\ndir1  dir2  file5\n$ ls dir1\nfile1\n$ mv dir1 dir3\n$ ls\ndir2  dir3  file5\n$ ls dir3\nfile1\nDeleting Files and Directories\nThe rm command can delete files and directories, while the rmdir command can only delete\ndirectories. Let’s clean up the moving directory by deleting file5:\n$ cd ~/linux_essentials-2.4/moving\n$ ls\ndir2  dir3  file5\n$ rmdir file5\nrmdir: failed to remove ‘file5’: Not a directory\n$ rm file5\n$ ls\ndir2  dir3\nBy default rmdir can only delete empty directories, therefore we had to use rm to delete a regular\nfile. Try to delete the deleting  directory:\n$ cd ~/linux_essentials-2.4/\n$ ls\ncopying  creating  deleting  globs  moving\n$ rmdir deleting\nrmdir: failed to remove ‘deleting’: Directory not empty\n$ ls -l deleting\ntotal 0\ndrwxrwxr-x. 2 emma emma 6 Mar 26 14:58 directories\ndrwxrwxr-x. 2 emma emma 6 Mar 26 14:58 files\nBy default, rmdir refuses to delete a directory that is not empty. Use rmdir to remove one of the\nempty subdirectories of the deleting  directory:\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     149"
    },
    {
        "Pagina": 159,
        "Contenuto": "$ ls -a deleting/files\n.  ..\n$ rmdir deleting/files\n$ ls -l deleting\ndirectories\nDeleting large numbers of files or deep directory structures with many subdirectories may seem\ntedious, but it is actually easy. By default, rm only works on regular files. The -r option is used to\noverride this behavior. Be careful, rm -r is an excellent foot gun! When you use the -r option, rm\nwill not only delete any directories, but everything within that directory, including subdirectories\nand their contents. See for yourself how rm -r works:\n$ ls\ncopying  creating  deleting  globs  moving\n$ rm deleting\nrm: cannot remove ‘deleting’: Is a directory\n$ ls -l deleting\ntotal 0\ndrwxrwxr-x. 2 emma emma 6 Mar 26 14:58 directories\n$ rm -r deleting\n$ ls\ncopying  creating  globs  moving\nNotice how deleting  is gone, even tough it was not empty? Like mv, rm has a -i option to prompt\nyou before doing anything. Use rm -ri to remove directories from moving section that are no\nlonger needed:\n$ find\n.\n./creating\n./moving\n./moving/dir2\n./moving/dir2/file2\n./moving/dir2/file3\n./moving/dir3\n./moving/dir3/file1\n./globs\n./globs/question1\n./globs/question2012\n./globs/question23\n./globs/question13\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n150     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 160,
        "Contenuto": "./globs/question14\n./globs/star10\n./globs/star1100\n./globs/star2002\n./globs/star2013\n./globs/question15\n./copying\n./copying/files\n./copying/directories\n$ rm -ri moving\nrm: descend into directory ‘moving’? y\nrm: descend into directory ‘moving/dir2’? y\nrm: remove regular empty file ‘moving/dir2/file2’? y\nrm: remove regular empty file ‘moving/dir2/file3’? y\nrm: remove directory ‘moving/dir2’? y\nrm: descend into directory ‘moving/dir3’? y\nrm: remove regular empty file ‘moving/dir3/file1’? y\nrm: remove directory ‘moving/dir3’? y\nrm: remove directory ‘moving’? y\nCopying Files and Directories\nThe cp command is used to copy files and directories. Copy a few files into the copying directory:\n$ cd ~/linux_essentials-2.4/copying\n$ ls\ndirectories  files\n$ cp /etc/nsswitch.conf files/nsswitch.conf\n$ cp /etc/issue /etc/hostname files\nIf the last argument is a directory, cp will create a copy of the previous arguments inside the\ndirectory. Like mv, multiple files can be specified at once, as long as the target is a directory.\nWhen both operands of cp are files and both files exist, cp overwrites the second file with a copy\nof the first file. Let’s practice this by overwrite the issue file with the hostname  file:\n$ cd ~/linux_essentials-2.4/copying/files\n$ ls\nhostname  issue  nsswitch.conf\n$ cat hostname\nmycomputer\n$ cat issue\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     151"
    },
    {
        "Pagina": 161,
        "Contenuto": "Debian GNU/Linux 9 \\n \\l\n$ cp hostname issue\n$ cat issue\nmycomputer\nNow let’s try to create a copy of the files directory within the directories  directory:\n$ cd ~/linux_essentials-2.4/copying\n$ cp files directories\ncp: omitting directory ‘files’\nAs you can see, cp by default only works on individual files. To copy a directory, you use the -r\noption. Keep in mind that the -r option will cause cp to also copy the contents of the directory you\nare copying:\n$ cp -r files directories\n$ find\n.\n./files\n./files/nsswitch.conf\n./files/fstab\n./files/hostname\n./directories\n./directories/files\n./directories/files/nsswitch.conf\n./directories/files/fstab\n./directories/files/hostname\nNotice how when an existing directory was used as the destination, cp creates a copy of the source\ndirectory inside of it? If the destination doesn’t exist, it will create it and fill it with the contents of\nthe source directory:\n$ cp -r files files2\n$ find\n.\n./files\n./files/nsswitch.conf\n./files/fstab\n./files/hostname\n./directories\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n152     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 162,
        "Contenuto": "./directories/files\n./directories/files/nsswitch.conf\n./directories/files/fstab\n./directories/files/hostname\n./files2\n./files2/nsswitch.conf\n./files2/fstab\n./files2/hostname\nGlobbing\nWhat is commonly referred to as globbing is a simple pattern matching language. Command line\nshells on Linux systems use this language to refer to groups of files whose names match a specific\npattern. POSIX.1-2017 specifies the following pattern matching characters:\n*\nMatches any number of any character, including no characters\n?\nMatches any one character\n[]\nMatches a class of characters\nIn English, this means you can tell your shell to match a pattern instead of a literal string of text.\nUsually Linux users specify multiple files with a glob instead of typing out each file name. Run the\nfollowing commands:\n$ cd ~/linux_essentials-2.4/globs\n$ ls\nquestion1   question14  question2012  star10    star2002\nquestion13  question15  question23    star1100  star2013\n$ ls star1 *\nstar10  star1100\n$ ls star*\nstar10  star1100  star2002  star2013\n$ ls star2 *\nstar2002  star2013\n$ ls star2*2\nstar2002\n$ ls star2013 *\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     153"
    },
    {
        "Pagina": 163,
        "Contenuto": "star2013\nThe shell expands * to any number of anything, so your shell interprets star* to mean anything\nin the relevant context that starts with star. When you run the command ls star* , your shell\ndoesn’t run the ls program with an argument of star*, it looks for files in the current directory\nthat match the pattern star* (including just star), and turns each file matching the pattern into\nan argument to ls:\n$ ls star*\nas far as ls is concerned is the equivalent of\n$ ls star10  star1100  star2002  star2013\nThe * character doesn’t mean anything to ls. To prove this, run the following command:\n$ ls star\\ *\nls: cannot access star*: No such file or directory\nWhen you precede a character with a \\, you are instructing your shell not to interpret it. In this\ncase, you want ls to have an argument of star* instead of what the glob star* expands to.\nThe ? expands to any single character. Try the following commands to see for yourself:\n$ ls\nquestion1   question14  question2012  star10    star2002\nquestion13  question15  question23    star1100  star2013\n$ ls question?\nquestion1\n$ ls question1?\nquestion13  question14  question15\n$ ls question?3\nquestion13  question23\n$ ls question13?\nls: cannot access question13?: No such file or directory\nThe [] brackets are used to match ranges or classes of characters. The [] brackets work like they\ndo in POSIX regular expressions except with globs the ^ is used instead of !.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n154     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 164,
        "Contenuto": "Create some files to experiment with:\n$ mkdir brackets\n$ cd brackets\n$ touch file1 file2 file3 file4 filea fileb filec file5 file6 file7\nRanges within [] brackets are expressed using a -:\n$ ls\nfile1  file2  file3  file4  file5  file6  file7  filea  fileb  filec\n$ ls file[1-2]\nfile1  file2\n$ ls file[1-3]\nfile1  file2  file3\nMultiple ranges can be specified:\n$ ls file[1-25-7]\nfile1  file2  file5  file6  file7\n$ ls file[1-35-6a-c]\nfile1  file2  file3  file5  file6  filea  fileb  filec\nSquare brackets can also be used to match a specific set of characters.\n$ ls file[1a5]\nfile1  file5  filea\nYou can also use the ^ character as the first character to match everything except certain\ncharacters.\n$ ls file[^a]\nfile1  file2  file3  file4  file5  file6  file7  fileb  filec\nThe last thing we will cover in this lesson is character classes. To match a character class, you use\n[:classname:] . For example, to use the digit class, which matches numerals, you would do\nsomething like this:\n$ ls file[[:digit:]]\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     155"
    },
    {
        "Pagina": 165,
        "Contenuto": "file1  file2  file3  file4  file5  file6  file7\n$ touch file1a file11\n$ ls file[[:digit:]a]\nfile1  file2  file3  file4  file5  file6  file7  filea\n$ ls file[[:digit:]]a\nfile1a\nThe glob file[[:digit:]a] , matches file followed by a digit or a.\nThe character classes supported depends on your current locale. POSIX requires the following\ncharacter classes for all locales:\n[:alnum:]\nLetters and numbers.\n[:alpha:]\nUpper or lowercase letters.\n[:blank:]\nSpaces and tabs.\n[:cntrl:]\nControl characters, e.g. backspace, bell, NAK, escape.\n[:digit:]\nNumerals ( 0123456789 ).\n[:graph:]\nGraphic characters (all characters except ctrl and the space character)\n[:lower:]\nLowercase letters ( a-z).\n[:print:]\nPrintable characters ( alnum, punct, and the space character).\n[:punct:]\nPunctuation characters, i.e. !, &, \".\n[:space:]\nWhitespace characters, e.g. tabs, spaces, newlines.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n156     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 166,
        "Contenuto": "[:upper:]\nUppercase letters ( A-Z).\n[:xdigit:]\nHexadecimal numerals (usually 0123456789abcdefABCDEF ).\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     157"
    },
    {
        "Pagina": 167,
        "Contenuto": "Guided Exercises\n1.Given the following, select the directories that would be created by the command mkdir -p\n/tmp/outfiles/text/today /tmp/infiles/text/today\n$ pwd\n/tmp\n$ find\n.\n./outfiles\n./outfiles/text\n/tmp\n/tmp/outfiles\n/tmp/outfiles/text\n/tmp/outfiles/text/today\n/tmp/infiles\n/tmp/infiles/text\n/tmp/infiles/text/today\n2.What does -v do for mkdir, rm, and cp?\n3.What happens if you accidentally attempt to copy three files on the same command line to a\nfile that already exists instead of a directory?\n4.What happens when you use mv to move a directory into itself?\n5.How would you delete all files in your current directory that start with old?\n6.Which of the following files would log_[a-z]_201?_*_01.txt  match?\nlog_3_2017_Jan_01.txt\nlog_+_2017_Feb_01.txt\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n158     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 168,
        "Contenuto": "log_b_2007_Mar_01.txt\nlog_f_201A_Wednesday_01.txt\n7.Create a few globs to match the following list of file names:\ndoc100\ndoc200\ndoc301\ndoc401\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     159"
    },
    {
        "Pagina": 169,
        "Contenuto": "Explorational Exercises\n1.Use the cp man page to find out how to make a copy of a file and have the permissions and\nmodification time match the original.\n2.What does the rmdir -p  command do? Experiment with it and explain how it differs from rm\n-r.\n3.DO NOT ACTUALLY EXECUTE THIS COMMAND: What do you think rm -ri /*  will do?\n(HONESTLY, DO NOT ATTEMPT TO DO THIS!)\n4.Other than using -i, is it possible to prevent mv from overwriting destination files?\n5.Explain the command cp -u.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n160     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 170,
        "Contenuto": "Summary\nThe Linux command line environment provides tools to manage files. Some commonly used ones\nare cp, mv, mkdir, rm, and rmdir. These tools, combined with globs, allow users to get a lot of work\ndone very quickly.\nMany commands have a -i option, which prompts you before doing anything. Prompting can\nsave you a lot of hassle if you mistyped something.\nA lot of commands have a -r option. The -r option usually means recursion. In mathematics and\ncomputer science, a recursive function is a function using itself in its definition. When it comes to\ncommand line tools, it usually means apply the command to a directory and everything in it.\nCommands used in this lesson:\ncat\nRead and output the contents of a file.\ncp\nCopy files or directories.\necho\nOutput a string.\nfind\nTraverse a file system tree and search for files matching a specific set of criteria.\nls\nShow properties of files and directories and list a directory’s contents.\nmkdir\nCreate new directories.\nmv\nMove or rename files or directories.\npwd\nOutput the current working directory.\nrm\nDelete files or directories.\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     161"
    },
    {
        "Pagina": 171,
        "Contenuto": "rmdir\nDelete directories.\ntouch\nCreate new empty files or update an existing file’s modification timestamp.\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n162     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 172,
        "Contenuto": "Answers to Guided Exercises\n1.Given the following, select the directories that would be created by the command mkdir -p\n/tmp/outfiles/text/today /tmp/infiles/text/today\n$ pwd\n/tmp\n$ find\n.\n./outfiles\n./outfiles/text\nThe marked directories would be created. The directories /tmp, /tmp/outfiles , and\n/tmp/outfiles/text  already exist, so mkdir will ignore them.\n/tmp\n/tmp/outfiles\n/tmp/outfiles/text\n/tmp/outfiles/text/today X\n/tmp/infiles X\n/tmp/infiles/text X\n/tmp/infiles/text/today X\n2.What does -v do for mkdir, rm, and cp?\nTypically -v turns on verbose output. It causes the respective programs to output what they are\ndoing as they are doing it:\n$ rm -v a b\nremoved 'a'\nremoved 'b'\n$ mv -v a b\n'a' -> 'b'\n$ cp -v b c\n'b' -> 'c'\n3.What happens if you accidentally attempt to copy three files on the same command line to a\nfile that already exists instead of a directory?\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     163"
    },
    {
        "Pagina": 173,
        "Contenuto": "cp will refuse to do anything and output an error message:\n$ touch a b c d\n$ cp a b c d\ncp: target 'd' is not a directory\n4.What happens when you use mv to move a directory into itself?\nYou will get an error message telling you mv cannot do that.\n$ mv a a\nmv: cannot move 'a' to a subdirectory of itself, 'a/a'\n5.How would you delete all files in your current directory that start with old?\nYou would use the glob old* with rm:\n$ rm old*\n6.Which of the following files would log_[a-z]_201?_*_01.txt  match?\nlog_3_2017_Jan_01.txt\nlog_+_2017_Feb_01.txt\nlog_b_2007_Mar_01.txt\nlog_f_201A_Wednesday_01.txt X\n$ ls log_[a-z]_201?_*_01.txt\nlog_f_201A_Wednesday_01.txt\nlog_[a-z]  matches log_ followed by any lower case letter, so both\nlog_f_201A_Wednesday_01.txt  and log_b_2007_Mar_01.txt  match. _201? matches any\nsingle character, so only log_f_201A_Wednesday_01.txt  matches. Finally *_01.txt  matches\nanything that ends with _01.txt, so our remaining option matches.\n7.Create a few globs to match the following list of file names:\ndoc100\ndoc200\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n164     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 174,
        "Contenuto": "doc301\ndoc401\nThere are several solutions. Here are some of them:\ndoc*\ndoc[1-4]*\ndoc?0?\ndoc[1-4]0?\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     165"
    },
    {
        "Pagina": 175,
        "Contenuto": "Answers to Explorational Exercises\n1.Use the cp man page to find out how to make a copy of a file and have the permissions and\nmodification time match the original.\nYou would use the -p option. From the man page:\n$ man cp\n-p     same as --preserve=mode,ownership,timestamps\n--preserve[=ATTR_LIST]\n              preserve the specified attributes (default: mode,ownership,time‐\n              stamps), if  possible  additional  attributes:  context,  links,\n              xattr, all\n2.What does the rmdir -p  option do? Experiment with it and explain how it differs from rm -r.\nIt causes rmdir to behave similarly to mkdir -p . If passed a tree of empty directories, it will\nremove all of them.\n$ find\n.\n./a\n./a/b\n./a/b/c\n$ rmdir -p a/b/c\n$ ls\n3.DO NOT ACTUALLY EXECUTE THIS COMMAND: What do you think rm -ri /*  will do?\n(HONESTLY, DO NOT ATTEMPT TO DO THIS!)\nIt will remove all files and directories writable by your user account. This includes any\nnetwork file systems.\n4.Other than using -i, is it possible to prevent mv from overwriting destination files?\nYes, the -n or --no-clobber  option prevents mv from overwriting files.\n$ cat a\na\n$ cat b\nb\nLinux Essentials (Version 1.6) | Topic 2: Finding Your Way on a Linux System\n166     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 176,
        "Contenuto": "$ mv -n a b\n$ cat b\nb\n5.Explain cp -u.\nThe -u option causes cp to only copy a file if the destination is missing or is older than the\nsource file.\n$ ls -l\ntotal 24K\ndrwxr-xr-x 123 emma student  12K Feb  2 05:34 ..\ndrwxr-xr-x   2 emma student 4.0K Feb  2 06:56 .\n-rw-r--r--   1 emma student    2 Feb  2 06:56 a\n-rw-r--r--   1 emma student    2 Feb  2 07:00 b\n$ cat a\na\n$ cat b\nb\n$ cp -u a b\n$ cat b\nb\n$ cp -u a c\n$ ls -l\ntotal 12\n-rw-r--r-- 1 emma student 2 Feb  2 06:56 a\n-rw-r--r-- 1 emma student 2 Feb  2 07:00 b\n-rw-r--r-- 1 emma student 2 Feb  2 07:00 c\nLinux Essentials (Version 1.6) | 2.4 Creating, Moving and Deleting Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     167"
    },
    {
        "Pagina": 177,
        "Contenuto": "Topic 3: The Power of the Command Line\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n168     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 178,
        "Contenuto": "3.1 Archiving Files on the Command Line\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 3.1\nWeight\n2\nKey knowledge areas\n•Files, directories\n•Archives, compression\nPartial list of the used files, terms and utilities\n•tar\n•Common tar options\n•gzip, bzip2, xz\n•zip, unzip\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     169"
    },
    {
        "Pagina": 179,
        "Contenuto": "3.1 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 3 The Power of the Command Line\nObjective: 3.1 Archiving Files on the Command Line\nLesson: 1 of 1\nIntroduction\nCompression is used to reduce the amount of space a specific set of data consumes. Compression is\ncommonly used for reducing the amount of space that is needed to store a file. Another common\nuse is to reduce the amount of data sent over a network connection.\nCompression works by replacing repetitive patterns in data. Suppose you have a novel. Some\nwords are extremely common but have multiple characters, such as the word “the”. You could\nreduce the size of the novel significantly if you were to replace these common multi character\nwords and patterns with single character replacements. E.g., replace “the” with a greek letter that\nis not used elsewhere in the text. Data compression algorithms are similar to this but more\ncomplex.\nCompression comes in two varieties, lossless  and lossy . Things compressed with a lossless\nalgorithm can be decompressed back into their original form. Data compressed with a lossy\nalgorithm cannot be recovered. Lossy algorithms are often used for images, video, and audio\nwhere the quality loss is imperceptible to humans, irrelevant to the context, or the loss is worth\nthe saved space or network throughput.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n170     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 180,
        "Contenuto": "Archiving tools are used to bundle up files and directories into a single file. Some common uses\nare backups, bundling software source code, and data retention.\nArchive and compression are commonly used together. Some archiving tools even compress their\ncontents by default. Others can optionally compress their contents. A few archive tools must be\nused in conjunction with stand-alone compression tools if you wish to compress the contents.\nThe most common tool for archiving files on Linux systems is tar. Most Linux distributions ship\nwith the GNU version of tar, so it is the one that will be covered in this lesson. tar on its own only\nmanages the archiving of files but does not compress them.\nThere are lots of compression tools available on Linux. Some common lossless ones are bzip2,\ngzip, and xz. You will find all three on most systems. You may encounter an old or very minimal\nsystem where xz or bzip is not installed. If you become a regular Linux user, you will likely\nencounter files compressed with all three of these. All three of them use different algorithms, so a\nfile compressed with one tool can’t be decompressed by another. Compression tools have a trade\noff. If you want a high compression ratio, it will take longer to compress and decompress the file.\nThis is because higher compression requires more work finding more complex patterns. All of\nthese tools compress data but can not create archives containing multiple files.\nStand-alone compression tools aren’t typically available on Windows systems. Windows archiving\nand compression tools are usually bundled together. Keep this in mind if you have Linux and\nWindows systems that need to share files.\nLinux systems also have tools for handling .zip files commonly used on Windows system. They\nare called zip and unzip. These tools are not installed by default on all systems, so if you need to\nuse them you may have to install them. Fortunately, they are typically found in distributions'\npackage repositories.\nCompression Tools\nHow much disk space is saved by compressing files depends on a few factors. The nature of the\ndata you are compressing, the algorithm used to compress the data, and the compression level.\nNot all algorithms support different compression levels.\nLet’s start with setting up some test files to compress:\n$ mkdir ~/linux_essentials-3.1\n$ cd ~/linux_essentials-3.1\n$ mkdir compression archiving\n$ cd compression\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     171"
    },
    {
        "Pagina": 181,
        "Contenuto": "$ cat /etc/ * > bigfile 2> /dev/null\nNow we create three copies of this file:\n$ cp bigfile bigfile2\n$ cp bigfile bigfile3\n$ cp bigfile bigfile4\n$ ls -lh\ntotal 2.8M\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile2\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile3\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile4\nNow we are going to compress the files with each aforementioned compression tool:\n$ bzip2 bigfile2\n$ gzip bigfile3\n$ xz bigfile4\n$ ls -lh\ntotal 1.2M\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile\n-rw-r--r-- 1 emma emma 170K Jun 23 08:08 bigfile2.bz2\n-rw-r--r-- 1 emma emma 179K Jun 23 08:08 bigfile3.gz\n-rw-r--r-- 1 emma emma 144K Jun 23 08:08 bigfile4.xz\nCompare the sizes of the compressed files to the uncompressed file named bigfile. Also notice\nhow the compression tools added extensions to the file names and removed the uncompressed\nfiles.\nUse bunzip2, gunzip, or unxz to decompress the files:\n$ bunzip2 bigfile2.bz2\n$ gunzip bigfile3.gz\n$ unxz bigfile4.xz\n$ ls -lh\ntotal 2.8M\n-rw-r--r-- 1 emma emma 712K Jun 23 08:20 bigfile\n-rw-r--r-- 1 emma emma 712K Jun 23 08:20 bigfile2\n-rw-r--r-- 1 emma emma 712K Jun 23 08:20 bigfile3\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n172     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 182,
        "Contenuto": "-rw-r--r-- 1 emma emma 712K Jun 23 08:20 bigfile4\nNotice again that now the compressed file is deleted once it is decompressed.\nSome compression tools support different compression levels. A higher compression level usually\nrequires more memory and CPU cycles, but results in a smaller compressed file. The opposite is\ntrue for a lower level. Below is a demonstration with xz and gzip:\n$ cp bigfile bigfile-gz1\n$ cp bigfile bigfile-gz9\n$ gzip -1 bigfile-gz1\n$ gzip -9 bigfile-gz9\n$ cp bigfile bigfile-xz1\n$ cp bigfile bigfile-xz9\n$ xz -1 bigfile bigfile-xz1\n$ xz -9 bigfile bigfile-xz9\n$ ls -lh bigfile bigfile- * *\ntotal 3.5M\n-rw-r--r-- 1 emma emma 712K Jun 23 08:08 bigfile\n-rw-r--r-- 1 emma emma 205K Jun 23 13:14 bigfile-gz1.gz\n-rw-r--r-- 1 emma emma 178K Jun 23 13:14 bigfile-gz9.gz\n-rw-r--r-- 1 emma emma 156K Jun 23 08:08 bigfile-xz1.xz\n-rw-r--r-- 1 emma emma 143K Jun 23 08:08 bigfile-xz9.xz\nIt is not necessary to decompress a file every time you use it. Compression tools typically come\nwith special versions of common tools used to read text files. For example, gzip has a version of\ncat, grep, diff, less, more, and a few others. For gzip, the tools are prefixed with a z, while the\nprefix bz exists for bzip2 and xz exists for xz. Below is an example of using zcat to read display\na file compressed with gzip:\n$ cp /etc/hosts ./\n$ gzip hosts\n$ zcat hosts.gz\n127.0.0.1   localhost\n# The following lines are desirable for IPv6 capable hosts\n::1     localhost ip6-localhost ip6-loopback\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     173"
    },
    {
        "Pagina": 183,
        "Contenuto": "Archiving Tools\nThe tar program is probably the most widely used archiving tool on Linux systems. In case you\nare wondering why it is named how it is, it as an abbreviation for “tape archive”. Files created\nwith tar are often called tar balls . It is very common for applications distributed as source code to\nbe in tar balls.\nThe GNU version of tar that Linux distributions ship with has a lot of options. This lesson is going\nto cover the most commonly used subset.\nLet’s start off by creating an archive of the files used for compression:\n$ cd ~/linux_essentials-3.1\n$ tar cf archiving/3.1.tar compression\nThe c option instructs tar to create a new archive file and the f option is the name of the file to\ncreate. The argument immediately following the options is always going to be the name of the file\nto work on. The rest of the arguments are the paths to any files or directories you wish to add to,\nlist, or extract from the file. In the example, we are adding the directory compression  and all of\nits contents to the archive.\nTo view the contents of a tar ball, use the t option of tar:\n$ tar -tf 3.1.tar\ncompression/\ncompression/bigfile-xz1.xz\ncompression/bigfile-gz9.gz\ncompression/hosts.gz\ncompression/bigfile2\ncompression/bigfile\ncompression/bigfile-gz1.gz\ncompression/bigfile-xz9.xz\ncompression/bigfile3\ncompression/bigfile4\nNotice how the options are preceded with -. Unlike most programs, with tar, the - isn’t required\nwhen specifying options, although it doesn’t cause any harm if it is used.\nNOTEYou can use the -v option to let tar output the names of files it operates on when\ncreating or extracting an archive.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n174     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 184,
        "Contenuto": "Now let’s extract the file:\n$ cd ~/linux_essentials-3.1/archiving\n$ ls\n3.1.tar\n$ tar xf 3.1.tar\n$ ls\n3.1.tar  compression\nSuppose you only need one file out of the archive. If this is the case, you can specify it after the\narchive’s file name. You can specify multiple files if necessary:\n$ cd ~/linux_essentials-3.1/archiving\n$ rm -rf compression\n$ ls\n3.1.tar\n$ tar xvf 3.1.tar compression/hosts.gz\ncompression/\ncompression/bigfile-xz1.xz\ncompression/bigfile-gz9.gz\ncompression/hosts.gz\ncompression/bigfile2\ncompression/bigfile\ncompression/bigfile-gz1.gz\ncompression/bigfile-xz9.xz\ncompression/bigfile3\ncompression/bigfile4\n$ ls\n3.1.tar  compression\n$ ls compression\nhosts.gz\nWith the exception of absolute paths (paths beginning with /), tar files preserve the entire path to\nfiles when they are created. Since the file 3.1.tar was created with a single directory, that\ndirectory will be created relative to your current working directory when extracted. Another\nexample should clarify this:\n$ cd ~/linux_essentials-3.1/archiving\n$ rm -rf compression\n$ cd ../compression\n$ tar cf ../tar/3.1-nodir.tar *\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     175"
    },
    {
        "Pagina": 185,
        "Contenuto": "$ cd ../archiving\n$ mkdir untar\n$ cd untar\n$ tar -xf ../3.1-nodir.tar\n$ ls\nbigfile   bigfile3  bigfile-gz1.gz  bigfile-xz1.xz  hosts.gz\nbigfile2  bigfile4  bigfile-gz9.gz  bigfile-xz9.xz\nTIPIf you wish to use the absolute path in a tar file, you must use the P option. Be aware\nthat this may overwrite important files and might cause errors on your system.\nThe tar program can also manage compression and decompression of archives on the fly. tar\ndoes so by calling one of the compression tools discussed earlier in this section. It is as simple as\nadding the option appropriate to the compression algorithm. The most commonly used ones are j,\nJ, and z for bzip2, xz, and gzip, respectively. Below are examples using the aforementioned\nalgorithms:\n$ cd ~/linux_essentials-3.1/compression\n$ ls\nbigfile   bigfile3  bigfile-gz1.gz  bigfile-xz1.xz  hosts.gz\nbigfile2  bigfile4  bigfile-gz9.gz  bigfile-xz9.xz\n$ tar -czf gzip.tar.gz bigfile bigfile2 bigfile3\n$ tar -cjf bzip2.tar.bz2 bigfile bigfile2 bigfile3\n$ tar -cJf xz.tar.xz bigfile bigfile2 bigfile3\n$ ls -l | grep tar\n-rw-r--r-- 1 emma emma  450202 Jun 27 05:56 bzip2.tar.bz2\n-rw-r--r-- 1 emma emma  548656 Jun 27 05:55 gzip.tar.gz\n-rw-r--r-- 1 emma emma  147068 Jun 27 05:56 xz.tar.xz\nNotice how in the example the .tar files have different sizes. This shows that they were\nsuccessfully compressed. If you create compressed .tar archives, you should always add a second\nfile extension denoting the algorithm you used. They are .xz, .bz, and .gz for xz, bzip2, and\ngzip, respectively. Sometimes shortened extensions such as .tgz are used.\nIt is possible to add files to already existing uncompressed tar archives. Use the u option to do this.\nIf you attempt to add to a compressed archive, you will get an error.\n$ cd ~/linux_essentials-3.1/compression\n$ ls\nbigfile   bigfile3  bigfile-gz1.gz  bigfile-xz1.xz  bzip2.tar.bz2  hosts.gz\nbigfile2  bigfile4  bigfile-gz9.gz  bigfile-xz9.xz  gzip.tar.gz    xz.tar.xz\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n176     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 186,
        "Contenuto": "$ tar cf plain.tar bigfile bigfile2 bigfile3\n$ tar tf plain.tar\nbigfile\nbigfile2\nbigfile3\n$ tar uf plain.tar bigfile4\n$ tar tf plain.tar\nbigfile\nbigfile2\nbigfile3\nbigfile4\n$ tar uzf gzip.tar.gz bigfile4\ntar: Cannot update compressed archives\nTry 'tar --help' or 'tar --usage' for more information.\nManaging ZIP files\nWindows machines often don’t have applications to handle tar balls or many of the compression\ntools commonly found on Linux systems. If you need to interact with Windows systems, you can\nuse ZIP files. A ZIP file is an archive file similar to a compressed tar file.\nThe zip and unzip programs can be used to work with ZIP files on Linux systems. The example\nbelow should be all you need to get started using them. First we create a set of files:\n$ cd ~/linux_essentials-3.1\n$ mkdir zip\n$ cd zip/\n$ mkdir dir\n$ touch dir/file1 dir/file2\nNow we use zip to pack these files into a ZIP file:\n$ zip -r zipfile.zip dir\n  adding: dir/ (stored 0%)\n  adding: dir/file1 (stored 0%)\n  adding: dir/file2 (stored 0%)\n$ rm -rf dir\nFinally, we unpack the ZIP file again:\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     177"
    },
    {
        "Pagina": 187,
        "Contenuto": "$ ls\nzipfile.zip\n$ unzip zipfile.zip\nArchive:  zipfile.zip\n   creating: dir/\n extracting: dir/file1\n extracting: dir/file2\n$ find\n.\n./zipfile.zip\n./dir\n./dir/file1\n./dir/file2\nWhen adding directories to ZIP files, the -r option causes zip to include a directory’s contents.\nWithout it, you would have an empty directory in the ZIP file.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n178     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 188,
        "Contenuto": "Guided Exercises\n1.According to the extensions, which of the following tools were used to create these files?\nFilename tar gzip bzip2 xz\narchive.tar\narchive.tgz\narchive.tar.xz\n2.According to the extensions, which of these files are archives and which are compressed?\nFilename Archive Compressed\nfile.tar\nfile.tar.bz2\nfile.zip\nfile.xz\n3.How would you add a file to a gzip compressed tar file?\n4.Which tar option instructs tar to include the leading / in absolute paths?\n5.Does zip support different compression levels?\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     179"
    },
    {
        "Pagina": 189,
        "Contenuto": "Explorational Exercises\n1.When extracting files, does tar support globs in the file list?\n2.How can you make sure a decompressed file is identical to the file before it was compressed?\n3.What happens if you try to extract a file from a tar archive that already exists on your\nfilesystem?\n4.How would you extract the file archive.tgz  without using the tar z option?\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n180     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 190,
        "Contenuto": "Summary\nLinux systems have several compression and archiving tools available. This lesson covered the\nmost common ones. The most common archiving tool is tar. If interacting with Windows systems\nis necessary, zip and unzip can create and extract ZIP files.\nThe tar command has a few options that are worth memorizing. They are x for extract, c for\ncreate, t for view contents, and u to add or replace files. The v option lists the files which are\nprocessed by tar while creating or extracting an archive.\nThe typical Linux distribution’s repository has many compression tools. The most common are\ngzip, bzip2, and xz. Compression algorithms often support different levels that allow you to\noptimize for speed or file size. Files can be decompressed with gunzip, bunzip2, and unxz.\nCompression tools commonly have programs that behave like common text file tools, with the\ndifference being they work on compressed files. A few of them are zcat, bzcat, and xzcat.\nCompression tools typically ship with programs with the functionality of grep, more, less, diff,\nand cmp.\nCommands used in the exercises:\nbunzip2\nDecompress a bzip2 compressed file.\nbzcat\nOutput the contents of a bzip compressed file.\nbzip2\nCompress files using the bzip2 algorithm and format.\ngunzip\nDecompress a gzip compressed file.\ngzip\nCompress files using the gzip algorithm and format.\ntar\nCreate, update, list and extract tar archives.\nunxz\nDecompress a xz compressed file.\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     181"
    },
    {
        "Pagina": 191,
        "Contenuto": "unzip\nDecompress and extract content from a ZIP file.\nxz Compress files using the xz algorithm and format.\nzcat\nOutput the contents of a gzip compressed file.\nzip\nCreate and compress ZIP archives.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n182     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 192,
        "Contenuto": "Answers to Guided Exercises\n1.According to the extensions, which of the following tools were used to create these files?\nFilename tar gzip bzip2 xz\narchive.tar X\narchive.tgz X X\narchive.tar.xz X X\n2.According to the extensions, which of these files are archives and which are compressed?\nFilename Archive Compressed\nfile.tar X\nfile.tar.bz2 X X\nfile.zip X X\nfile.xz X\n3.How would you add a file to a gzip compressed tar file?\nYou would decompress the file with gunzip, add the file with tar uf, and then compress it\nwith gzip\n4.Which tar option instructs tar to include the leading / in absolute paths?\nThe -P option. From the man page:\n-P, --absolute-names\n        Don't strip leading slashes from file names when creating  archives\n5.Does zip support different compression levels?\nYes. You would use -#, replacing # with a number from 0-9. From the man page:\n-#\n(-0, -1, -2, -3, -4, -5, -6, -7, -8, -9)\n       Regulate the speed of compression using the specified  digit  #,\n       where  -0  indicates  no compression (store all files), -1 indi‐\n       cates the fastest compression speed (less  compression)  and  -9\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     183"
    },
    {
        "Pagina": 193,
        "Contenuto": "indicates  the  slowest  compression speed (optimal compression,\n       ignores the suffix list). The default compression level is -6.\n       Though still being worked, the intention is  this  setting  will\n       control  compression  speed  for  all compression methods.  Cur‐\n       rently only deflation is controlled.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n184     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 194,
        "Contenuto": "Answers to Explorational Exercises\n1.When extracting files, does tar support globs in the file list?\nYes, you would use the --wildcards  option. --wildcards  must be placed right after the tar\nfile when using the no dash style of options. For example:\n$ tar xf tarfile.tar --wildcards dir/file *\n$ tar --wildcards -xf tarfile.tar dir/file *\n2.How can you make sure a decompressed file is identical to the file before it was compressed?\nYou don’t need to do anything with the tools covered in this lesson. All three of them include\nchecksums in their file format that is verified when they are decompressed.\n3.What happens if you try to extract a file from a tar archive that already exists on your\nfilesystem?\nThe file on your filesystem is overwritten with the version that is in the tar file.\n4.How would you extract the file archive.tgz  without using the tar z option?\nYou would decompress it with gunzip first.\n$ gunzip archive.tgz\n$ tar xf archive.tar\nLinux Essentials (Version 1.6) | 3.1 Archiving Files on the Command Line\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     185"
    },
    {
        "Pagina": 195,
        "Contenuto": "3.2 Searching and Extracting Data from Files\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 3.2\nWeight\n3\nKey Knowledge Areas\n•Command line pipes\n•I/O redirection\n•Basic Regular Expressions using ., [ ], *, and ?\nPartial list of the used files, terms and utilities\n•grep\n•less\n•cat, head, tail\n•sort\n•cut\n•wc\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n186     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 196,
        "Contenuto": "3.2 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 3 The Power of the Command Line\nObjective: 3.2 Searching and Extracting Data from Files\nLesson: 1 of 2\nIntroduction\nIn this lab we will be focusing on redirecting or transmitting information from one source to\nanother with the help of specific tools. The Linux command line redirects the information through\nspecific standard channels. The standard input ( stdin  or channel 0) of the command is considered\nto be the keyboard and the standard output ( stdout  or channel 1) is considered the screen. There is\nalso another channel that is meant to redirect error output ( stderr  or channel 2) of a command or\na program’s error messages. The input and/or output can be redirected.\nWhen running a command, sometimes we want to transmit certain information to the command\nor redirect the output to a specific file. Each of these functionalities will be discussed in the next\ntwo sections.\nI/O Redirection\nI/O redirection enables the user to redirect information from or to a command by using a text file.\nAs described earlier, the standard input, output and error output can be redirected, and the\ninformation can be taken from text files.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     187"
    },
    {
        "Pagina": 197,
        "Contenuto": "Redirecting Standard Output\nTo redirect standard output to a file, instead of the screen, we need to use the > operator followed\nby the name of the file. If the file doesn’t exist, a new one will be created, otherwise, the\ninformation will overwrite the existing file.\nIn order to see the contents of the file that we just created, we can use the cat command. By\ndefault, this command displays the contents of a file on the screen. Consult the manual page to\nfind out more about its functionalities.\nThe example below demonstrates the functionality of the operator. In the first instance, a new file\nis created containing the text “Hello World!”:\n$ echo \"Hello World!\" > text\n$ cat text\nHello World!\nIn the second invocation, the same file is overwritten with the new text:\n$ echo \"Hello!\" > text\n$ cat text\nHello!\nIf we want to add new information at the end of the file, we need to use the >> operator. This\noperator also creates a new file if it cannot find an existing one.\nThe first example shows the addition of the text. As it can be seen, the new text was added on the\nfollowing line:\n$ echo \"Hello to you too!\" >> text\n$ cat text\nHello!\nHello to you too!\nThe second example demonstrates that a new file will be created:\n$ echo \"Hello to you too!\" >> text2\n$ cat text2\nHello to you too!\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n188     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 198,
        "Contenuto": "Redirecting Standard Error\nIn order to redirect just the error messages, a user will need to employ the 2> operator followed\nby the name of the file in which the errors will be written. If the file doesn’t exist, a new one will\nbe created, otherwise the file will be overwritten.\nAs explained, the channel for redirecting the standard error is channel 2 . When redirecting the\nstandard error, the channel must be specified, contrary to the other standard output where\nchannel 1  is set by default. For example, the following command searches for a file or directory\nnamed games and only writes the error into the text-error  file, while displaying the standard\noutput on the screen:\n$ find /usr games 2> text-error\n/usr\n/usr/share\n/usr/share/misc\n---------Omitted output----------\n/usr/lib/libmagic.so.1.0.0\n/usr/lib/libdns.so.81\n/usr/games\n$ cat text-error\nfind: `games': No such file or directory\nNOTE For more information about the find command, consult its man page.\nFor example, the following command will run without errors, therefore no information will be\nwritten in the file text-error :\n$ sort /etc/passwd 2> text-error\n$ cat text-error\nAs well as the standard output, the standard error can also be appended to a file with the 2>>\noperator. This will add the new error at the end of the file. If the file doesn’t exist, a new one will\nbe created. The first example shows the addition of the new information into the file, whereas the\nsecond example shows that the command creates a new file where an existing one can’t be found\nwith the same name:\n$ sort /etc 2>> text-error\n$ cat text-error\nsort: read failed: /etc: Is a directory\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     189"
    },
    {
        "Pagina": 199,
        "Contenuto": "$ sort /etc/shadow 2>> text-error2\n$ cat text-error2\nsort: open failed: /etc/shadow: Permission denied\nUsing this type of redirection, only the error messages will be redirected to the file, the normal\noutput will be written on the screen or go through standard output or stdout .\nThere is one particular file that technically is a bit bucket  (a file that accepts input and doesn’t do\nanything with it): /dev/null . You can redirect any irrelevant information that you might not\nwant displayed or redirected into an important file, as shown in the example below:\n$ sort /etc 2> /dev/null\nRedirecting Standard Input\nThis type of redirection is used to input data to a command, from a specified file instead of a\nkeyboard. In this case the < operator is used as shown in the example:\n$ cat < text\nHello!\nHello to you too!\nRedirecting standard input is usually used with commands that don’t accept file arguments. The\ntr command is one of them. This command can be used to translate file contents by modifying the\ncharacters in a file in specific ways, like deleting any particular character from a file, the example\nbelow shows the deletion of the character l:\n$ tr -d \"l\" < text\nHeo!\nHeo to you too!\nFor more information, consult the man page of tr.\nHere Documents\nUnlike the output redirections, the << operator acts in a different way compared to the other\noperators. This input stream is also called here document . Here document  represents the block of\ncode or text which can be redirected to the command or the interactive program. Different types\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n190     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 200,
        "Contenuto": "of scripting languages, like bash, sh and csh are able to take input directly from the command\nline, without using any text files.\nAs can be seen in the example below, the operator is used to input data into the command, while\nthe word after doesn’t specify the file name. The word is interpreted as the delimiter of the input\nand it will not be taken in consideration as content, therefore cat will not display it:\n$ cat << hello\n> hey\n> ola\n> hello\nhey\nola\nConsult the man page of the cat command to find more information.\nCombinations\nThe first combination that we will explore combines the redirection of the standard output and\nstandard error output to the same file. The &> and &>> operators are used, & representing the\ncombination of channel 1  and channel 2 . The first operator will overwrite the existing contents of\nthe file and the second one will append or add the new information at the end of the file. Both\noperators will enable the creation of the new file if it doesn’t exist, just like in the previous\nsections:\n$ find /usr admin &> newfile\n$ cat newfile\n/usr\n/usr/share\n/usr/share/misc\n---------Omitted output----------\n/usr/lib/libmagic.so.1.0.0\n/usr/lib/libdns.so.81\n/usr/games\nfind: `admin': No such file or directory\n$ find /etc/calendar &>> newfile\n$ cat newfile\n/usr\n/usr/share\n/usr/share/misc\n---------Omitted output----------\n/usr/lib/libmagic.so.1.0.0\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     191"
    },
    {
        "Pagina": 201,
        "Contenuto": "/usr/lib/libdns.so.81\n/usr/games\nfind: `admin': No such file or directory\n/etc/calendar\n/etc/calendar/default\nLet’s take a look at an example using the cut command:\n$ cut -f 3 -d \"/\" newfile\n$ cat newfile\nshare\nshare\nshare\n---------Omitted output----------\nlib\ngames\nfind: `admin': No such file or directory\ncalendar\ncalendar\nfind: `admin': No such file or directory\nThe cut command cuts specified fields from the input file by using the -f option, the 3rd field in\nour case. In order for the command to find the field, a delimiter needs to be specified as well with\nthe -d option. In our case the delimiter will be the / character.\nTo find more about the cut command, consult its man page.\nCommand Line Pipes\nRedirection is mostly used to store the result of a command, to be processed by a different\ncommand. This type of intermediate process can become very tedious and complicated if you\nwant the data to go through multiple processes. In order to avoid this, you can link the command\ndirectly via pipes . In other words, the first command’s output automatically becomes the second\ncommand’s input. This connection is made by using the | (vertical bar) operator:\n$ cat /etc/passwd | less\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\n:\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n192     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 202,
        "Contenuto": "In the example above, the less command after the pipe operator modifies the way that the file is\ndisplayed. The less command displays the text file allowing the user to scroll up and down a line\nat the time. less is also used by default to display the man pages, as discussed in the previous\nlessons.\nIt is possible to use multiple pipes at the same time. The intermediate commands that receive\ninput then change it and produce output are called filters . Let’s take the ls -l command and try\nto count the number of words from the first 10 lines of the output. In order to do this, we will have\nto use the head command that by default displays the first 10 lines of a file and then count the\nwords using the wc command:\n$ ls -l | head | wc -w\n10\nAs mentioned earlier, by default, head only displays the first 10 lines of the text file specified. This\nbehaviour can be modified by using specific options. Check the command’s man page to find\nmore.\nThere is another command that displays the end of a file: tail. By default, this command selects\nthe last 10 lines and displays them, but as head the number can also be modified. Check tail’s\nman page for more details.\nNOTEThe -f option can show the last lines of a file while it’s being updated. This feature\ncan become very useful when monitoring a file like syslog for ongoing activity.\nThe wc (word count) command counts by default the lines, words and bytes of a file. As shown in\nthe exercise, the -w option causes the command to only count the words within the selected lines.\nThe most common options that you can use with this command are: -l, which specifies to the\ncommand to only count the lines, and -c, which is used to count only the bytes. More variations\nand options of the command, as well as more information about wc can be found within the\ncommand’s man page.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     193"
    },
    {
        "Pagina": 203,
        "Contenuto": "Guided Exercises\n1.List the contents of your current directory, including the ownership and permissions, and\nredirect the output to a file called contents.txt  within your home directory.\n2.Sort the contents of the contents.txt  file from your current directory and append it to the\nend of a new file named contents-sorted.txt .\n3.Display the last 10 lines of the /etc/passwd  file and redirect it to a new file in your user’s\nDocuments  directory.\n4.Count the number of words within the contents.txt  file and append the output to the end of\na file field2.txt  in your home directory. You will need to use both input and output\nredirection.\n5.Display the first 5 lines of the /etc/passwd  file and sort the output reverse alphabetically.\n6.Using the previously created contents.txt  file, count the number of characters of the last 9\nlines.\n7.Count the number of files called test within the /usr/share  directory and its subdirectories.\nNote: each line output from the find command represents a file.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n194     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 204,
        "Contenuto": "Explorational Exercises\n1.Select the second field of the contents.txt  file and redirect the standard output and error\noutput to another file called field1.txt .\n2.Using the input redirection operator and the tr command, delete the dashes ( -) from the\ncontents.txt  file.\n3.What is the biggest advantage of only redirecting errors to a file?\n4.Replace all recurrent spaces within the alphabetically sorted contents.txt  file with a single\nspace.\n5.In one command line, eliminate the recurrent spaces (as done in the previous exercise), select\nthe ninth field and sort it reverse alphabetically and non-case sensitive. How many pipes did\nyou have to use?\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     195"
    },
    {
        "Pagina": 205,
        "Contenuto": "Summary\nIn this lab you learned:\n•Types of redirection\n•How to use the redirection operators\n•How to use pipes to filter command output\nCommands used in this lesson:\ncut\nRemoves sections from each line of a file.\ncat\nDisplays or concatenates files.\nfind\nSearches for files in a directory hierarchy.\nless\nDisplays a file, allowing the user to scroll one line at the time.\nmore\nDisplays a file, a page at the time.\nhead\nDisplays the first 10 lines of a file.\ntail\nDisplays the last 10 lines of a file.\nsort\nSorts files.\nwc\nCounts by default the lines, words or bytes of a file.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n196     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 206,
        "Contenuto": "Answers to Guided Exercises\n1.List the contents of your current directory, including the ownership and permissions, and\nredirect the output to a file called contents.txt  within your home directory.\n$ ls -l > contents.txt\n2.Sort the contents of the contents.txt  file from your current directory and append it to the\nend of a new file named contents-sorted.txt .\n$ sort contents.txt >> contents-sorted.txt\n3.Display the last 10 lines of the /etc/passwd  file and redirect it to a new file in the your user’s\nDocuments  directory.\n$ tail /etc/passwd > Documents/newfile\n4.Count the number of words within the contents.txt  file and append the output to the end of\na file field2.txt  in your home directory. You will need to use both input and output\nredirection.\n$ wc < contents.txt >> field2.txt\n5.Display the first 5 lines of the /etc/passwd  file and sort the output reverse alphabetically.\n$ head -n 5 /etc/passwd | sort -r\n6.Using the previously created contents.txt  file, count the number of characters of the last 9\nlines.\n$ tail -n 9 contents.txt | wc -c\n531\n7.Count the number of files called test within the /usr/share  directory and its subdirectories.\nNote: each line output from the find command represents a file.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     197"
    },
    {
        "Pagina": 207,
        "Contenuto": "$ find /usr/share -name test | wc -l\n125\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n198     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 208,
        "Contenuto": "Answers to Explorational Exercises\n1.Select the second field of the contents.txt  file and redirect the standard output and error\noutput to another file called field1.txt .\n$ cut -f 2 -d \" \" contents.txt &> field1.txt\n2.Using the input redirection operand and the tr command, delete the dashes ( -) from the\ncontents.txt  file.\n$ tr -d \"-\" < contents.txt\n3.What is the biggest advantage of only redirecting errors to a file?\nOnly redirecting errors to a file can help with keeping a log file that is monitored frequently.\n4.Replace all recurrent spaces within the alphabetically sorted contents.txt  file with a single\nspace.\n$ sort contents.txt | tr -s \" \"\n5.In one command line, eliminate the recurrent spaces (as done in the previous exercise), select\nthe ninth field and sort it reverse alphabetically and non-case sensitive. How many pipes did\nyou have to use?\n$ cat contents.txt | tr -s \" \" | cut -f 9 -d \" \" | sort -fr\nThe exercise uses 3 pipes, one for each filter.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     199"
    },
    {
        "Pagina": 209,
        "Contenuto": "3.2 Lesson 2\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 3 The Power of the Command Line\nObjective: 3.2 Searching and Extracting Data from Files\nLesson: 2 of 2\nIntroduction\nIn this lesson, we are going to look at tools that are used to manipulate text. These tools are\nfrequently used by system administrators or programs to automatically monitor or identify\nspecific recurring information.\nSearching within Files with grep\nThe first tool that we will discuss in this lesson is the grep command. grep is the abbreviation of\nthe phrase “global regular expression print” and its main functionality is to search within files for\nthe specified pattern. The command outputs the line containing the specified pattern highlighted\nin red.\n$ grep bash /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\nuser:x:1001:1001:User,,,,:/home/user:/bin/bash\ngrep, as most commands, can also be tweaked by using options. Here are the most common ones:\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n200     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 210,
        "Contenuto": "-i\nthe search is case insensitive\n-r\nthe search is recursive (it searches into all files within the given directory and its\nsubdirectories)\n-c\nthe search counts the number of matches\n-v\ninvert the match, to print lines that do not match the search term\n-E\nturns on extended regular expressions (needed by some of the more advanced meta-characters\nlike | , + and ?)\ngrep has many other useful options. Consult the man page to find out more about it.\nRegular Expressions\nThe second tool is very powerful. It is used to describe bits of text within files, also called regular\nexpressions . Regular expressions are extremely useful in extracting data from text files by\nconstructing patterns. They are commonly used within scripts or when programming with high\nlevel languages, such as Perl or Python.\nWhen working with regular expressions, it is very important to keep in mind that every character\ncounts  and the pattern is written with the purpose of matching a specific sequence of characters,\nknown as a string. Most patterns use the normal ASCII symbols, such as letters, digits, punctuation\nor other symbols, but it can also use Unicode characters in order to match any other type of text.\nThe following list explains the regular expressions meta-characters that are used to form the\npatterns.\n.\nMatch any single character (except newline)\n[abcABC]\nMatch any one character within the brackets\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     201"
    },
    {
        "Pagina": 211,
        "Contenuto": "[^abcABC]\nMatch any one character except the ones in the brackets\n[a-z]\nMatch any character in the range\n[^a-z]\nMatch any character except the ones in the range\nsun|moon\nFind either of the listed strings\n^\nStart of a line\n$\nEnd of a line\nAll functionalities of the regular expressions can be implemented through grep as well. You can\nsee that in the example above, the word is not surrounded by double quotes. To prevent the shell\nfrom interpreting the meta-character itself, it is recommended that the more complex pattern be\nbetween double quotes (\" \"). For the purpose of practice, we will be using double quotes when\nimplementing regular expressions. The other quotation marks keep their normal functionality, as\ndiscussed in previous lessons.\nThe following examples emphasize the functionality of the regular expressions. We will need data\nwithin the file, therefore the next set of commands just appends different strings to the text.txt \nfile.\n$ echo \"aaabbb1\" > text.txt\n$ echo \"abab2\" >> text.txt\n$ echo \"noone2\" >> text.txt\n$ echo \"class1\" >> text.txt\n$ echo \"alien2\" >> text.txt\n$ cat text.txt\naaabbb1\nabab2\nnoone2\nclass1\nalien2\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n202     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 212,
        "Contenuto": "The first example is a combination of searching through the file without and with regular\nexpressions. In order to fully understand regular expressions, it is very important to show the\ndifference. The first command searches for the exact string, anywhere in the line, whereas the\nsecond command searches for sets of characters that contain any of the characters between the\nbrackets. Therefore, the results of the commands are different.\n$ grep \"ab\" text.txt\naaabbb1\nabab2\n$ grep \"[ab]\" text.txt\naaabbb1\nabab2\nclass1\nalien2\nThe second set of examples shows the application of the beginning and the end of the line meta-\ncharacter. It is very important to specify the need to put the 2 characters at the right place in the\nexpression. When specifying the beginning of the line, the meta-character needs to be before the\nexpression, whereas, when specifying the end of the line, the meta-character needs to be after the\nexpression.\n$ grep \"^a\" text.txt\naaabbb1\nabab2\nalien2\n$ grep \"2$\" text.txt\nabab2\nnoone2\nalien2\nOn top of the previous explained meta-characters, regular expressions also have meta-characters\nthat enable multiplication of the previously specified pattern:\n*\nZero or more of the preceding pattern\n+\nOne or more of the preceding pattern\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     203"
    },
    {
        "Pagina": 213,
        "Contenuto": "?\nZero or one of the preceding pattern\nFor the multiplier meta-characters, the command below searches for a string that contains ab, a\nsingle character and one or more of the characters previously found. The result shows that grep\nfound the aaabbb1 string, matching the abbb part as well as abab2. Since the + character is an\nextended  regular expression character, we need to pass the -E option to the grep command.\n$ grep -E \"ab.+\" text.txt\naaabbb1\nabab2\nMost of the meta-characters are self-explanatory, but they can become tricky when used for the\nfirst time. The previous examples represent a small part of the regular expressions’ functionality.\nTry all meta-characters from the above table to understand more on how they work.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n204     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 214,
        "Contenuto": "Guided Exercises\nUsing grep and the /usr/share/hunspell/en_US.dic  file, find the lines that match the\nfollowing criteria:\n1.All lines containing the word cat anywhere on the line.\n2.All lines that do not contain any of the following characters: sawgtfixk .\n3.All lines that start with any 3 letters and the word dig.\n4.All lines that end with at least one e.\n5.All lines that contain one of the following words: org , kay or tuna.\n6.Number of lines that start with one or no c followed by the string ati.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     205"
    },
    {
        "Pagina": 215,
        "Contenuto": "Explorational Exercises\n1.Find the regular expression that matches the words in the “Include” line and doesn’t match the\nones in the “Exclude” line:\n◦Include: pot, spot, apot\nExclude: potic, spots, potatoe\n◦Include: arp99, apple, zipper\nExclude: zoo, arive, attack\n◦Include: arcane, capper, zoology\nExclude: air, coper, zoloc\n◦Include: 0th/pt, 3th/tc, 9th/pt\nExclude: 0/nm, 3/nm, 9/nm\n◦Include: Hawaii, Dario, Ramiro\nExclude: hawaii, Ian, Alice\n2.What other useful command is commonly used to search within the files? What additional\nfunctionalities does it have?\n3.Thinking back at the previous lesson, use one of the examples and try to look for a specific\npattern within the output of the command, with the help of grep.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n206     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 216,
        "Contenuto": "Summary\nIn this lab you learned:\n•Regular expressions meta-characters\n•How to create patterns with regular expressions\n•How to search within the files\nCommands used in the exercises:\ngrep\nSearches for characters or strings within a file\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     207"
    },
    {
        "Pagina": 217,
        "Contenuto": "Answers to Guided Exercises\nUsing grep and the /usr/share/hunspell/en_US.dic  file, find the lines that match the\nfollowing criteria:\n1.All lines containing the word cat anywhere on the line.\n$ grep \"cat\" /usr/share/hunspell/en_US.dic\nAlcatraz/M\nDecatur/M\nHecate/M\n...\n2.All lines that do not contain any of the following characters: sawgtfixk .\n$ grep -v \"[sawgtfixk]\" /usr/share/hunspell/en_US.dic\n49269\n0/nm\n1/n1\n2/nm\n2nd/p\n3/nm\n3rd/p\n4/nm\n5/nm\n6/nm\n7/nm\n8/nm\n...\n3.All lines that start with any 3 letters and the word dig.\n$ grep \"^...dig\" /usr/share/hunspell/en_US.dic\ncardigan/SM\ncondign\npredigest/GDS\n...\n4.All lines that end with at least one e.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n208     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 218,
        "Contenuto": "$ grep -E \"e+$\" /usr/share/hunspell/en_US.dic\nAnglicize\nAnglophobe\nAnthropocene\n...\n5.All lines that contain one of the following words: org , kay or tuna.\n$ grep -E \"org|kay|tuna\" /usr/share/hunspell/en_US.dic\nBorg/SM\nGeorge/MS\nTokay/M\nfortunate/UY\n...\n6.Number of lines that start with one or no c followed by the string ati.\n$ grep -cE \"^c?ati\" /usr/share/hunspell/en_US.dic\n3\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     209"
    },
    {
        "Pagina": 219,
        "Contenuto": "Answers to Explorational Exercises\n1.Find the regular expression that matches the words in the “Include” line and doesn’t match the\nones in the “Exclude” line:\n◦Include: pot, spot, apot\nExclude: potic, spots, potatoe\nAnswer: pot$\n◦Include: arp99, apple, zipper\nExclude: zoo, arive, attack\nAnswer: p+\n◦Include: arcane, capper, zoology\nExclude: air, coper, zoloc\nAnswer: arc|cap|zoo\n◦Include: 0th/pt, 3th/tc, 9th/pt\nExclude: 0/nm, 3/nm, 9/nm\nAnswer: [0-9]th.+\n◦Include: Hawaii, Dario, Ramiro\nExclude: hawaii, Ian, Alice\nAnswer: ^[A-Z]a.*i+\n2.What other useful command is commonly used to search within the files? What additional\nfunctionalities does it have?\nThe sed command. The command can find and replace characters or sets of characters within\na file.\n3.Thinking back at the previous lesson, use one of the examples and try to look for a specific\npattern within the output of the command, with the help of grep.\nI took one of the answers from the Explorational Exercises and looked for the line that has\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n210     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 220,
        "Contenuto": "read, write and execute as the group permissions. Your answer might be different, depending\non the command that you chose and the pattern that you created.\n$ cat contents.txt | tr -s \" \" | grep \"^....rwx\"\nThis exercise is to show you that grep can also receive input from different commands and it\ncan help in filtering generated information.\nLinux Essentials (Version 1.6) | 3.2 Searching and Extracting Data from Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     211"
    },
    {
        "Pagina": 221,
        "Contenuto": "3.3 Turning Commands into a Script\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 3.3\nWeight\n4\nKey knowledge areas\n•Basic shell scripting\n•Awareness of common text editors (vi and nano)\nPartial list of the used files, terms and utilities\n•#! (shebang)\n•/bin/bash\n•Variables\n•Arguments\n•for loops\n•echo\n•Exit status\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n212     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 222,
        "Contenuto": "3.3 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 3 The Power of the Command Line\nObjective: 3.3 Turning Commands into a Script\nLesson: 1 of 2\nIntroduction\nWe have been learning to execute commands from the shell thus far, but we can also enter\ncommands into a file, and then set that file to be executable. When the file is executed, those\ncommands are run one after the other. These executable files are called scripts , and they are an\nabsolutely crucial tool for any Linux system administrator. Essentially, we can consider Bash to be\na programming language as well as a shell.\nPrinting Output\nLet’s begin by demonstrating a command that you may have seen in previous lessons: echo will\nprint an argument to standard output.\n$ echo \"Hello World!\"\nHello World!\nNow, we will use file redirection to send this command to a new file called new_script .\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     213"
    },
    {
        "Pagina": 223,
        "Contenuto": "$ echo 'echo \"Hello World!\"' > new_script\n$ cat new_script\necho \"Hello World!\"\nThe file new_script  now contains the same command as before.\nMaking a Script Executable\nLet’s demonstrate some of the steps required to make this file execute the way we expect it to. A\nuser’s first thought might be to simply type the name of the script, the way they might type in the\nname of any other command:\n$ new_script\n/bin/bash: new_script: command not found\nWe can safely assume that new_script  exists in our current location, but notice that the error\nmessage isn’t telling us that the file doesn’t exist, it is telling us that the command  doesn’t exist. It\nwould be useful to discuss how Linux handles commands and executables.\nCommands and PATH\nWhen we type the ls command into the shell, for example, we are executing a file called ls that\nexists in our filesystem. You can prove this by using which:\n$ which ls\n/bin/ls\nIt would quickly become tiresome to type in the absolute path of ls every time we wish to look at\nthe contents of a directory, so Bash has an environment variable  which contains all the directories\nwhere we might find the commands we wish to run. You can view the contents of this variable by\nusing echo.\n$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/sn\nap/bin\nEach of these locations is where the shell expects to find a command, delimited with colons ( :).\nYou will notice that /bin is present, but it is safe to assume that our current location is not. The\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n214     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 224,
        "Contenuto": "shell will search for new_script  in each of these directories, but it will not find it and therefore\nwill throw the error we saw above.\nThere are three solutions to this issue: we can move new_script  into one of the PATH directories,\nwe can add our current directory to PATH, or we can change the way we attempt to call the script.\nThe latter solution is easiest, it simply requires us to specify the current location  when calling the\nscript using dot slash ( ./).\n$ ./new_script\n/bin/bash: ./new_script: Permission denied\nThe error message has changed, which indicates that we have made some progress.\nExecute Permissions\nThe first investigation a user should do in this case is to use ls -l to look at the file:\n$ ls -l new_script\n-rw-rw-r-- 1 user user 20 Apr 30 12:12 new_script\nWe can see that the permissions for this file are set to 664 by default. We have not set this file to\nhave execute permissions  yet.\n$ chmod +x new_script\n$ ls -l new_script\n-rwxrwxr-x 1 user user 20 Apr 30 12:12 new_script\nThis command has given execute permissions to all users. Be aware that this might be a security\nrisk, but for now this is an acceptable level of permission.\n$ ./new_script\nHello World!\nWe are now able to execute our script.\nDefining the Interpreter\nAs we have demonstrated, we were able to simply enter text into a file, set it as an executable, and\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     215"
    },
    {
        "Pagina": 225,
        "Contenuto": "run it. new_script  is functionally still a normal text file, but we managed to have it be\ninterpreted by Bash. But what if it is written in Perl, or Python?\nIt is very good practice to specify the type of interpreter we want to use in the first line of a script.\nThis line is called a bang line  or more commonly a shebang . It indicates to the system how we want\nthis file to be executed. Since we are learning Bash, we will be using the absolute path to our Bash\nexecutable, once again using which:\n$ which bash\n/bin/bash\nOur shebang starts with a hash sign and exclamation mark, followed by the absolute path above.\nLet’s open new_script  in a text editor and insert the shebang. Let’s also take the opportunity to\ninsert a comment  into our script. Comments are ignored by the interpreter. They are written for\nthe benefit of other users wishing to understand your script.\n#!/bin/bash\n# This is our first comment. It is also good practice to document all scripts.\necho \"Hello World!\"\nWe will make one additional change to the filename as well: we will save this file as\nnew_script.sh . The file suffix \".sh\" does not change the execution of the file in any way. It is a\nconvention that bash scripts be labelled with .sh or .bash in order to identify them more easily,\nthe same way that Python scripts are usually identified with the suffix .py.\nCommon Text Editors\nLinux users often have to work in an environment where graphical text editors are not available.\nIt is therefore highly recommended to develop at least some familiarity with editing text files from\nthe command line. Two of the most common text editors are vi and nano.\nvi\nvi is a venerable text editor and is installed by default on almost every Linux system in existence.\nvi spawned a clone called vi IMproved  or vim which adds some functionality but maintains the\ninterface of vi. While working with vi is daunting for a new user, the editor is popular and well-\nloved by users who learn its many features.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n216     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 226,
        "Contenuto": "The most important difference between vi and applications such as Notepad is that vi has three\ndifferent modes. On startup, the keys H, J, K and L are used to navigate, not to type. In this\nnavigation mode , you can press I to enter insert mode . At this point, you may type normally. To\nexit insert mode , you press Esc to return to navigation mode . From navigation mode , you can press :\nto enter command mode . From this mode, you can save, delete, quit or change options.\nWhile vi has a learning curve, the different modes can in time allow a savvy user to become more\nefficient than with other editors.\nnano\nnano is a newer tool, built to be simple and easier to use than vi. nano does not have different\nmodes. Instead, a user on startup can begin typing, and uses Ctrl to access the tools printed at the\nbottom of the screen.\n                         [ Welcome to nano.  For basic help, type Ctrl+G. ]\n^G Get Help   ^O Write Out  ^W Where Is   ^K Cut Text   ^J Justify    ^C Cur Pos    M-U Undo\n^X Exit       ^R Read File  ^\\ Replace    ^U Uncut Text ^T To Spell   ^_ Go To Line M-E Redo\nText editors are a matter of personal preference, and the editor that you choose to use will have\nno bearing on this lesson. But becoming familiar and comfortable with one or more text editors\nwill pay off in the future.\nVariables\nVariables are an important part of any programming language, and Bash is no different. When\nyou start a new session from the terminal, the shell already sets some variables for you. The PATH\nvariable is an example of this. We call these environment variables , because they usually define\ncharacteristics of our shell environment. You can modify and add environment variables, but for\nnow let’s focus on setting variables inside our script.\nWe will modify our script to look like this:\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=Carol\necho \"Hello $username!\"\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     217"
    },
    {
        "Pagina": 227,
        "Contenuto": "In this case, we have created a variable  called username  and we have assigned it the value  of\nCarol. Please note that there are no spaces between the variable name, the equals sign, or the\nassigned value.\nIn the next line, we have used the echo command with the variable, but there is a dollar sign ( $)\nin front of the variable name. This is important, since it indicates to the shell that we wish to treat\nusername  as a variable, and not just a normal word. By entering $username  in our command, we\nindicate that we want to perform a substitution , replacing the name  of a variable with the value \nassigned to that variable.\nExecuting the new script, we get this output:\n$ ./new_script.sh\nHello Carol!\n•Variable names must contain only alphanumeric characters or underscores, and are case\nsensitive. Username  and username  will be treated as separate variables.\n•Variable substitution may also have the format ${username} , with the addition of the { }.\nThis is also acceptable.\n•Variables in Bash have an implicit type , and are considered strings. This means that performing\nmath functions in Bash is more complicated than it would be in other programming languages\nsuch as C/C++:\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=Carol\nx=2\ny=4\nz=$x+$y\necho \"Hello $username!\"\necho \"$x + $y\"\necho \"$z\"\n$ ./new_script.sh\nHello Carol!\n2 + 4\n2+4\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n218     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 228,
        "Contenuto": "Using Quotes with Variables\nLet’s make the following change to the value of our variable username :\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=Carol Smith\necho \"Hello $username!\"\nRunning this script will give us an error:\n$ ./new_script.sh\n./new_script.sh: line 5: Smith: command not found\nHello !\nKeep in mind that Bash is an interpreter, and as such it interprets  our script line-by-line. In this\ncase, it correctly interprets username=Carol  to be setting a variable username  with the value\nCarol. But it then interprets the space as indicating the end of that assignment, and Smith as\nbeing the name of a command. In order to have the space and the name Smith be included as the\nnew value of our variable, we will put double quotes ( \") around the name.\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=\"Carol Smith\"\necho \"Hello $username!\"\n$ ./new_script.sh\nHello Carol Smith!\nOne important thing to note in Bash is that double quotes and single quotes ( ') behave very\ndifferently. Double quotes are considered “weak”, because they allow the interpreter to perform\nsubstitution inside the quotes. Single quotes are considered “strong”, because they prevent any\nsubstitution from occurring. Consider the following example:\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     219"
    },
    {
        "Pagina": 229,
        "Contenuto": "#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=\"Carol Smith\"\necho \"Hello $username!\"\necho 'Hello $username!'\n$ ./new_script.sh\nHello Carol Smith!\nHello $username!\nIn the second echo command, the interpreter has been prevented from substituting $username \nwith Carol Smith , and so the output is taken literally.\nArguments\nYou are already familiar with using arguments in the Linux core utilities. For example, rm\ntestfile  contains both the executable rm and one argument testfile . Arguments can be\npassed to the script upon execution, and will modify how the script behaves. They are easily\nimplemented.\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=$1\necho \"Hello $username!\"\nInstead of assigning a value to username  directly inside the script, we are assigning it the value of\na new variable $1. This refers to the value of the first argument .\n$ ./new_script.sh Carol\nHello Carol!\nThe first nine arguments are handled in this way. There are ways to handle more than nine\narguments, but that is outside the scope of this lesson. We will demonstrate an example using just\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n220     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 230,
        "Contenuto": "two arguments:\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername1=$1\nusername2=$2\necho \"Hello $username1 and $username2!\"\n$ ./new_script.sh Carol Dave\nHello Carol and Dave!\nThere is an important consideration when using arguments: In the example above, there are two\narguments Carol and Dave, assigned to $1 and $2 respectively. If the second argument is missing,\nfor example, the shell will not throw an error. The value of $2 will simply be null, or nothing at all.\n$ ./new_script.sh Carol\nHello Carol and !\nIn our case, it would be a good idea to introduce some logic to our script so that different\nconditions  will affect the output  that we wish to print. We will start by introducing another helpful\nvariable and then move on to creating if statements .\nReturning the Number of Arguments\nWhile variables such as $1 and $2 contain the value of positional arguments, another variable $#\ncontains the number of arguments .\n#!/bin/bash\n# This is our first comment. It is also good practice to comment all scripts.\nusername=$1\necho \"Hello $username!\"\necho \"Number of arguments: $#.\"\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     221"
    },
    {
        "Pagina": 231,
        "Contenuto": "$ ./new_script.sh Carol Dave\nHello Carol!\nNumber of arguments: 2.\nConditional Logic\nThe use of conditional logic in programming is a vast topic, and won’t be covered deeply in this\nlesson. We will focus on the syntax  of conditionals in Bash, which differs from most other\nprogramming languages.\nLet’s begin by reviewing what we hope to achieve. We have a simple script which should be able\nto print a greeting to a single user. If there is anything other than one user, we should print an\nerror message.\n•The condition  we are testing is the number of users, which is contained in the variable $#. We\nwould like to know if the value of $# is 1.\n•If the condition is true, the action  we will take is to greet the user.\n•If the condition is false , we will print an error message.\nNow that the logic is clear, we will focus on the syntax  required to implement this logic.\n#!/bin/bash\n# A simple script to greet a single user.\nif [ $# -eq 1 ]\nthen\n  username=$1\n  echo \"Hello $username!\"\nelse\n  echo \"Please enter only one argument.\"\nfi\necho \"Number of arguments: $#.\"\nThe conditional logic is contained between if and fi. The condition to test is located between\nsquare brackets [ ], and the action to take should the condition be true is indicated after then.\nNote the spaces between the square brackets and the logic contained. Omitting this space will\ncause errors.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n222     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 232,
        "Contenuto": "This script will output either our greeting, or the error message. But it will always print the\nNumber of arguments  line.\n$ ./new_script.sh\nPlease enter only one argument.\nNumber of arguments: 0.\n$ ./new_script.sh Carol\nHello Carol!\nNumber of arguments: 1.\nTake note of the if statement. We have used -eq to do a numerical comparison . In this case, we\nare testing that the value of $# is equal  to one. The other comparisons we can perform are:\n-ne\nNot equal to\n-gt\nGreater than\n-ge\nGreater than or equal to\n-lt\nLess than\n-le\nLess than or equal to\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     223"
    },
    {
        "Pagina": 233,
        "Contenuto": "Guided Exercises\n1.The user types the following to their shell:\n$ PATH=~/scripts\n$ ls\nCommand 'ls' is available in '/bin/ls'\nThe command could not be located because '/bin' is not included in the PATH environment\nvariable.\nls: command not found\n◦What has the user done?\n◦What command will combine the current value of PATH with the new directory ~/scripts ?\n2.Consider the following script. Notice that it is using elif to check for a second condition:\n>  /!bin/bash\n> fruit1 = Apples\n> fruit2 = Oranges\n  if [ $1 -lt $# ]\n  then\n    echo \"This is like comparing $fruit1 and $fruit2!\"\n> elif [$1 -gt $2 ]\n  then\n>   echo '$fruit1 win!'\n  else\n>   echo \"Fruit2 win!\"\n> done\n◦The lines marked with a > contain errors. Fix the errors.\n3.What will the output be in the following situations?\n$ ./guided1.sh 3 0\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n224     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 234,
        "Contenuto": "$ ./guided1.sh 2 4\n$ ./guided1.sh 0 1\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     225"
    },
    {
        "Pagina": 235,
        "Contenuto": "Explorational Exercises\n1.Write a simple script that will check if exactly two arguments are passed. If so, print the\narguments in reverse order. Consider this example (note: your code may look different than\nthis, but should lead to the same output):\nif [ $1 == $number ]\nthen\n  echo \"True!\"\nfi\n2.This code is correct, but it is not a number comparison. Use an internet search to discover how\nthis code is different from using -eq.\n3.There is an environment variable that will print the current directory. Use env to discover the\nname of this variable.\n4.Using what you have learned in questions 2 and 3, write a short script that accepts an\nargument. If an argument is passed, check if that argument matches the name of the current\ndirectory. If so, print yes. Otherwise, print no.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n226     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 236,
        "Contenuto": "Summary\nIn this section, you learned:\n•How to create and execute simple scripts\n•How to use a shebang to specify an interpreter\n•How to set and use variables inside scripts\n•How to handle arguments in scripts\n•How to construct if statements\n•How to compare numbers using numerical operators\nCommands used in the exercises:\necho\nPrint a string to standard output.\nenv\nPrints all environment variables to standard output.\nwhich\nPrints the absolute path of a command.\nchmod\nChanges permissions of a file.\nSpecial variables used in the exercises:\n$1, $2, … $9\nContain positional arguments passed to the script.\n$#\nContains the number of arguments passed to the script.\n$PATH\nContains the directories that have executables used by the system.\nOperators used in the exercises:\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     227"
    },
    {
        "Pagina": 237,
        "Contenuto": "-ne\nNot equal to\n-gt\nGreater than\n-ge\nGreater than or equal to\n-lt\nLess than\n-le\nLess than or equal to\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n228     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 238,
        "Contenuto": "Answers to Guided Exercises\n1.The user types the following into their shell:\n$ PATH=~/scripts\n$ ls\nCommand 'ls' is available in '/bin/ls'\nThe command could not be located because '/bin' is not included in the PATH environment\nvariable.\nls: command not found\n◦What has the user done?\nThe user has overwritten the contents of PATH with the directory ~/scripts . The ls\ncommand can no longer be found, since it isn’t contained in PATH. Note that this change\nonly affects the current session, logging out and back in with revert the change.\n◦What command will combine the current value of PATH with the new directory ~/scripts ?\nPATH=$PATH:~/scripts\n2.Consider the following script. Notice that it is using elif to check for a second condition:\n>  /!bin/bash\n> fruit1 = Apples\n> fruit2 = Oranges\n  if [ $1 -lt $# ]\n  then\n    echo \"This is like comparing $fruit1 and $fruit2!\"\n> elif [$1 -gt $2 ]\n  then\n>   echo '$fruit1 win!'\n  else\n>   echo \"Fruit2 win!\"\n> done\n◦The lines marked with a > contain errors. Fix the errors.\n#!/bin/bash\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     229"
    },
    {
        "Pagina": 239,
        "Contenuto": "fruit1=Apples\nfruit2=Oranges\nif [ $1 -lt $# ]\nthen\n  echo \"This is like comparing $fruit1 and $fruit2!\"\nelif [ $1 -gt $2 ]\nthen\n  echo \"$fruit1 win!\"\nelse\n  echo \"$fruit2 win!\"\nfi\n3.What will the output be in the following situations?\n$ ./guided1.sh 3 0\nApples win!\n$ ./guided1.sh 2 4\nOranges win!\n$ ./guided1.sh 0 1\nThis is like comparing Apples and Oranges!\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n230     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 240,
        "Contenuto": "Answers to Explorational Exercises\n1.Write a simple script that will check if exactly two arguments are passed. If so, print the\narguments in reverse order. Consider this example (note: your code may look different than\nthis, but should lead to the same output):\nif [ $1 == $number ]\nthen\n  echo \"True!\"\nfi\n#!/bin/bash\nif [ $# -ne 2 ]\nthen\n  echo \"Error\"\nelse\n  echo \"$2 $1\"\nfi\n2.This code is correct, but it is not a number comparison. Use an internet search to discover how\nthis code is different from using -eq.\nUsing == will compare strings . That is, if the characters of both variables match up exactly, then\nthe condition is true.\nabc == abc true\nabc == ABC false\n1 == 1 true\n1+1 == 2 false\nString comparisons lead to unexpected behavior if you are testing for numbers.\n3.There is an environment variable that will print the current directory. Use env to discover the\nname of this variable.\nPWD\n4.Using what you have learned in questions 2 and 3, write a short script that accepts an\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     231"
    },
    {
        "Pagina": 241,
        "Contenuto": "argument. If an argument is passed, check if that argument matches the name of the current\ndirectory. If so, print yes. Otherwise, print no.\n#!/bin/bash\nif [ \"$1\" == \"$PWD\" ]\nthen\n  echo \"yes\"\nelse\n  echo \"no\"\nfi\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n232     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 242,
        "Contenuto": "3.3 Lesson 2\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 3 The Power of the Command Line\nObjective: 3.3 Turning Commands into a Script\nLesson: 2 of 2\nIntroduction\nIn the last section, we used this simple example to demonstrate Bash scripting:\n#!/bin/bash\n# A simple script to greet a single user.\nif [ $# -eq 1 ]\nthen\n  username=$1\n  echo \"Hello $username!\"\nelse\n  echo \"Please enter only one argument.\"\nfi\necho \"Number of arguments: $#.\"\n•All scripts should begin with a shebang , which defines the path to the interpreter.\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     233"
    },
    {
        "Pagina": 243,
        "Contenuto": "•All scripts should include comments to describe their use.\n•This particular script works with an argument , which is passed to the script when it is called.\n•This script contains an if statement , which tests the conditions of a built-in variable $#. This\nvariable is set to the number of arguments.\n•If the number of arguments passed to the script equals 1, then the value of the first argument is\npassed to a new variable called username  and the script echoes a greeting to the user.\nOtherwise, an error message is displayed.\n•Finally, the script echoes the number of arguments. This is useful for debugging.\nThis is a useful example to begin explaining some of the other features of Bash scripting.\nExit Codes\nYou will notice that our script has two possible states: either it prints \"Hello <user>!\"  or it\nprints an error message. This is quite normal for many of our core utilities. Consider cat, which\nyou are no doubt becoming very familiar with.\nLet’s compare a successful use of cat with a situation where it fails. A reminder that our example\nabove is a script called new_script.sh .\n$ cat -n new_script.sh\n     1  #!/bin/bash\n     2\n     3  # A simple script to greet a single user.\n     4\n     5  if [ $# -eq 1 ]\n     6  then\n     7    username=$1\n     8\n     9    echo \"Hello $username!\"\n    10  else\n    11    echo \"Please enter only one argument.\"\n    12  fi\n    13  echo \"Number of arguments: $#.\"\nThis command succeeds, and you will notice that the -n flag has also printed line numbers. These\nare very helpful when debugging scripts, but please note that they are not  part of the script.\nNow we are going to check the value of a new built-in variable $?. For now, just notice the output:\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n234     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 244,
        "Contenuto": "$ echo $?\n0\nNow let’s consider a situation where cat will fail. First we will see an error message, and then\ncheck the value of $?.\n$ cat -n dummyfile.sh\ncat: dummyfile.sh: No such file or directory\n$ echo $?\n1\nThe explanation for this behaviour is this: any execution of the cat utility will return an exit code .\nAn exit code will tell us if the command succeeded, or experienced an error. An exit code of zero \nindicates that the command completed successfully. This is true for almost every Linux command\nthat you work with. Any other exit code will indicate an error of some kind. The exit code of the\nlast command to run  will be stored in the variable $?.\nExit codes are usually not seen by human users, but they are very useful when writing scripts.\nConsider a script where we may be copying files to a remote network drive. There are many ways\nthat the copy task may have failed: for example our local machine might not be connected to the\nnetwork, or the remote drive might be full. By checking the exit code of our copy utility, we can\nalert the user to problems when running the script.\nIt is very good practice to implement exit codes, so we will do this now. We have two paths in our\nscript, a success and a failure. Let’s use zero to indicate success, and one to indicate failure.\n     1  #!/bin/bash\n     2\n     3  # A simple script to greet a single user.\n     4\n     5  if [ $# -eq 1 ]\n     6  then\n     7    username=$1\n     8\n     9    echo \"Hello $username!\"\n    10    exit 0\n    11  else\n    12    echo \"Please enter only one argument.\"\n    13    exit 1\n    14  fi\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     235"
    },
    {
        "Pagina": 245,
        "Contenuto": "15  echo \"Number of arguments: $#.\"\n$ ./new_script.sh Carol\nHello Carol!\n$ echo $?\n0\nNotice that the echo command on line 15 was ignored entirely. Using exit will end the script\nimmediately, so this line is never encountered.\nHandling Many Arguments\nSo far our script can only handle a single username at a time. Any number of arguments besides\none will cause an error. Let’s explore how we can make this script more versatile.\nA user’s first instinct might be to use more positional variables such as $2, $3 and so on.\nUnfortunately, we can’t anticipate the number of arguments that a user might choose to use. To\nsolve this issue, it will be helpful to introduce more built-in variables.\nWe will modify the logic of our script. Having zero arguments should cause an error, but any\nother number of arguments should be successful. This new script will be called friendly2.sh .\n     1  #!/bin/bash\n     2\n     3  # a friendly script to greet users\n     4\n     5  if [ $# -eq 0 ]\n     6  then\n     7    echo \"Please enter at least one user to greet.\"\n     8    exit 1\n     9  else\n    10    echo \"Hello $@!\"\n    11    exit 0\n    12  fi\n$ ./friendly2.sh Carol Dave Henry\nHello Carol Dave Henry!\nThere are two built-in variables which contain all arguments passed to the script: $@ and $*. For\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n236     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 246,
        "Contenuto": "the most part, both behave the same. Bash will parse  the arguments, and separate each argument\nwhen it encounters a space between them. In effect, the contents of $@ look like this:\n0 1 2\nCarol Dave Henry\nIf you are familiar with other programming languages, you might recognize this type of variable\nas an array . Arrays in Bash can be created simply by putting space between elements like the\nvariable FILES in script arraytest  below:\nFILES=\"/usr/sbin/accept /usr/sbin/pwck/ usr/sbin/chroot\"\nIt contains a list of many items. So far this isn’t very helpful, because we have not yet introduced\nany way of handling these items individually.\nFor Loops\nLet’s refer to the arraytest  example shown before. If you recall, in this example we are\nspecifying an array of our own called FILES. What we need is a way to “unpack” this variable and\naccess each individual value, one after the other. To do this, we will use a structure called a for\nloop , which is present in all programming languages. There are two variables that we will refer to:\none is the range, and the other is for the individual value that we are currently working on. This is\nthe script in its entirety:\n#!/bin/bash\nFILES=\"/usr/sbin/accept /usr/sbin/pwck/ usr/sbin/chroot\"\nfor file in $FILES\ndo\n  ls -lh $file\ndone\n$ ./arraytest\nlrwxrwxrwx 1 root root 10 Apr 24 11:02 /usr/sbin/accept -> cupsaccept\n-rwxr-xr-x 1 root root 54K Mar 22 14:32 /usr/sbin/pwck\n-rwxr-xr-x 1 root root 43K Jan 14 07:17 /usr/sbin/chroot\nIf you refer again to the friendly2.sh  example above, you can see that we are working with a\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     237"
    },
    {
        "Pagina": 247,
        "Contenuto": "range of values contained within a single variable $@. For clarity’s sake, we will call the latter\nvariable username . Our script now looks like this:\n     1  #!/bin/bash\n     2\n     3  # a friendly script to greet users\n     4\n     5  if [ $# -eq 0 ]\n     6  then\n     7    echo \"Please enter at least one user to greet.\"\n     8    exit 1\n     9  else\n    10    for username in $@\n    11    do\n    12      echo \"Hello $username!\"\n    13    done\n    14    exit 0\n    15  fi\nRemember that the variable that you define here can be named whatever you wish, and that all\nthe lines inside do… done  will be executing once for each element of the array. Let’s observe the\noutput from our script:\n$ ./friendly2.sh Carol Dave Henry\nHello Carol!\nHello Dave!\nHello Henry!\nNow let’s assume that we want to make our output seem a little more human. We want our\ngreeting to be on one line.\n     1  #!/bin/bash\n     2\n     3  # a friendly script to greet users\n     4\n     5  if [ $# -eq 0 ]\n     6  then\n     7    echo \"Please enter at least one user to greet.\"\n     8    exit 1\n     9  else\n    10    echo -n \"Hello $1\"\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n238     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 248,
        "Contenuto": "11    shift\n    12    for username in $@\n    13    do\n    14      echo -n \", and $username\"\n    15    done\n    16    echo \"!\"\n    17    exit 0\n    18  fi\nA couple of notes:\n•Using -n with echo will suppress the newline  after printing. This means that all echoes will\nprint to the same line, and the newline will be printed only after the !` on line 16.\n•The shift command will remove the first element of our array, so that this:\n0 1 2\nCarol Dave Henry\nBecomes this:\n0 1\nDave Henry\nLet’s observe the output:\n$ ./friendly2.sh Carol\nHello Carol!\n$ ./friendly2.sh Carol Dave Henry\nHello Carol, and Dave, and Henry!\nUsing Regular Expressions to Perform Error Checking\nIt’s possible that we want to verify all arguments that the user is entering. For example, perhaps\nwe want to ensure that all names passed to friendly2.sh  contain only letters , and any special\ncharacters or numbers will cause an error. To perform this error checking, we will use grep.\nRecall that we can use regular expressions with grep.\n$ echo Animal | grep \"^[A-Za-z]*$\"\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     239"
    },
    {
        "Pagina": 249,
        "Contenuto": "Animal\n$ echo $?\n0\n$ echo 4n1ml | grep \"^[A-Za-z]*$\"\n$ echo $?\n1\nThe ^ and the $ indicate the beginning and end of the line respectively. The [A-Za-z]  indicates a\nrange of letters, upper or lower case. The * is a quantifier , and modifies our range of letters so that\nwe are matching zero to many letters. In summary, our grep will succeed if the input is only \nletters, and fails otherwise.\nThe next thing to note is that grep is returning exit codes based on whether there was a match or\nnot. A positive match returns 0, and a no match returns a 1. We can use this to test our arguments\ninside our script.\n     1  #!/bin/bash\n     2\n     3  # a friendly script to greet users\n     4\n     5  if [ $# -eq 0 ]\n     6  then\n     7    echo \"Please enter at least one user to greet.\"\n     8    exit 1\n     9  else\n    10    for username in $@\n    11    do\n    12      echo $username | grep \"^[A-Za-z]*$\" > /dev/null\n    13      if [ $? -eq 1 ]\n    14      then\n    15        echo \"ERROR: Names must only contains letters.\"\n    16        exit 2\n    17      else\n    18        echo \"Hello $username!\"\n    19      fi\n    20    done\n    21    exit 0\n    22  fi\nOn line 12, we are redirecting standard output to /dev/null , which is a simple way to suppress it.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n240     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 250,
        "Contenuto": "We don’t want to see any output from the grep command, we only want to test its exit code,\nwhich happens on line 13. Notice also that we are using an exit code of 2 to indicate an invalid\nargument. It is generally good practice to use different exit codes to indicate different errors; in\nthis way, a savvy user can use these exit codes to troubleshoot.\n$ ./friendly2.sh Carol Dave Henry\nHello Carol!\nHello Dave!\nHello Henry!\n$ ./friendly2.sh 42 Carol Dave Henry\nERROR: Names must only contains letters.\n$ echo $?\n2\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     241"
    },
    {
        "Pagina": 251,
        "Contenuto": "Guided Exercises\n1.Read the contents of script1.sh  below:\n#!/bin/bash\nif [ $# -lt 1 ]\nthen\n  echo \"This script requires at least 1 argument.\"\n  exit 1\nfi\necho $1 | grep \"^[A-Z]*$\" > /dev/null\nif [ $? -ne 0 ]\nthen\n  echo \"no cake for you!\"\n  exit 2\nfi\necho \"here's your cake!\"\nexit 0\nWhat is the output of these commands?\n◦./script1.sh\n◦echo $?\n◦./script1.sh cake\n◦echo $?\n◦./script1.sh CAKE\n◦echo $?\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n242     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 252,
        "Contenuto": "2.Read the contents of file script2.sh :\nfor filename in $1/*.txt\ndo\n   cp $filename $filename.bak\ndone\nDescribe the purpose of this script as you understand it.\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     243"
    },
    {
        "Pagina": 253,
        "Contenuto": "Explorational Exercises\n1.Create a script that will take any number of arguments from the user, and print only those\narguments which are numbers greater than 10.\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n244     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 254,
        "Contenuto": "Summary\nIn this section, you learned:\n•What exit codes are, what they mean, and how to implement them\n•How to check the exit code of a command\n•What for loops are, and how to use them with arrays\n•How to use grep, regular expressions and exit codes to check user input in scripts.\nCommands used in the exercises:\nshift\nThis will remove the first element of an array.\nSpecial Variables:\n$?\nContains the exit code of the last command executed.\n$@, $*\nContain all arguments passed to the script, as an array.\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     245"
    },
    {
        "Pagina": 255,
        "Contenuto": "Answers to Guided Exercises\n1.Read the contents of script1.sh  below:\n#!/bin/bash\nif [ $# -lt 1 ]\nthen\n  echo \"This script requires at least 1 argument.\"\n  exit 1\nfi\necho $1 | grep \"^[A-Z]*$\" > /dev/null\nif [ $? -ne 0 ]\nthen\n  echo \"no cake for you!\"\n  exit 2\nfi\necho \"here's your cake!\"\nexit 0\nWhat is the output of these commands?\n◦Command: ./script1.sh\nOutput: This script requires at least 1 argument.\n◦Command: echo $?\nOutput: 1\n◦Command: ./script1.sh cake\nOutput: no cake for you!\n◦Command: echo $?\nOutput: 2\n◦Command: ./script1.sh CAKE\nOutput: here’s your cake!\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n246     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 256,
        "Contenuto": "◦Command: echo $?\nOutput: 0\n2.Read the contents of file script2.sh :\nfor filename in $1/*.txt\ndo\n   cp $filename $filename.bak\ndone\nDescribe the purpose of this script as you understand it.\nThis script will make backup copies of all files ending with .txt in a subdirectory defined in\nthe first argument.\nLinux Essentials (Version 1.6) | 3.3 Turning Commands into a Script\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     247"
    },
    {
        "Pagina": 257,
        "Contenuto": "Answers to Explorational Exercises\n1.Create a script that will take any number of arguments from the user, and print only those\narguments that are numbers greater than 10.\n#!/bin/bash\nfor i in $@\ndo\n  echo $i | grep \"^[0-9]*$\" > /dev/null\n  if [ $? -eq 0 ]\n  then\n    if [ $i -gt 10 ]\n    then\n      echo -n \"$i \"\n    fi\n  fi\ndone\necho \"\"\nLinux Essentials (Version 1.6) | Topic 3: The Power of the Command Line\n248     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 258,
        "Contenuto": "Topic 4: The Linux Operating System\nLinux Essentials (Version 1.6) |\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     249"
    },
    {
        "Pagina": 259,
        "Contenuto": "4.1 Choosing an Operating System\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 4.1\nWeight\n1\nKey knowledge areas\n•Differences between Windows, OS X and Linux\n•Distribution life cycle management\nPartial list of the used files, terms and utilities\n•GUI versus command line, desktop configuration\n•Maintenance cycles, beta and stable\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n250     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 260,
        "Contenuto": "4.1 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 4 The Linux Operating System\nObjective: 4.1 Choosing an Operating System\nLesson: 1 of 1\nIntroduction\nNo matter if you are using your computer system at home, at the university or within an\nenterprise, there still has to be a decision made on the operating system that you will use. This\ndecision may be made by you, especially if it is your computer, but you may also be responsible\nfor making the choice across systems in your business. As always, being well-informed about the\nchoices available will aid you in making a responsible decision. In this lesson we aim to help keep\nyou informed of the operating system choices that you may be considering.\nWhat is an Operating System\nOne of the first things that we must be sure of before we begin our journey in choosing an\noperating system is to understand what we mean by the term. The operating system lies at the\nheart of your computer and allows applications to run within and on top of it. Additionally, the\noperating system will contain drivers to access the computer’s hardware such as disks and\npartitions, screens, keyboards, network cards and so on. We often abbreviate the operating\nsystem to simply the OS. Today there are many operating systems available for both business\ncomputer usage as well as for those looking for something in the home. If we want to simplify the\nselection available to us, we can group selections as follows:\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     251"
    },
    {
        "Pagina": 261,
        "Contenuto": "•Linux-based Operating Systems\n◦Enterprise Linux\n◦Consumer Linux\n•UNIX\n•macOS\n•Windows-based Operation Systems\n◦Windows Servers\n◦Windows Desktops\nChoosing a Linux Distribution\nThe Linux Kernel and Linux Distributions\nWhen talking about Linux distributions the operating system is Linux. Linux is the kernel  and at\nthe core of every Linux distribution. The software of the Linux kernel is maintained by a group of\nindividuals, lead by Linus Torvalds. Torvalds is employed by an industry consortium called The\nLinux Foundation  to work on the Linux kernel.\nNOTEThe Linux kernel was first developed by Linus Torvalds, a student from Finland,\nback in 1991. In 1992, the first Kernel release under the GNU General Public\nLicense version 2 (GPLv2) was version 0.12.\nLinux Kernel\nAs we have mentioned, all Linux distributions run the same operating system, Linux.\nLinux Distribution\nWhen people talk about Red Hat Linux, or Ubuntu Linux they are referring to the Linux\ndistribution . The Linux distribution will ship with a Linux kernel and an environment that\nmakes the kernel useful in a way that we can interact with it. At a minimum we would need a\ncommand line shell such as Bash and a set of basic commands allowing us to access and\nmanage the system. Often, of course, the Linux distribution will have a full Desktop\nEnvironment such as Gnome or KDE.\nEven though each Linux distribution runs the Linux operating system, distributions can and do\nvary on the version of the operating system that is used. By this, we mean, the version of the Linux\nKernel that is in use  when the distribution boots.\nTIPIf you have access to a Linux command line at the moment, you can easily check the\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n252     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 262,
        "Contenuto": "version of the Linux kernel that you are running by reading the kernel release :\n$ uname -r\n4.15.0-1019-aws\nTypes of Linux Distributions\nIt may seem an obvious choice to always run the latest version of the Linux kernel but it is not\nquite as simple as that. We can vaguely categorize Linux distributions into three sets:\n•Enterprise Grade Linux Distributions\n◦Red Hat Enterprise Linux\n◦CentOS\n◦SUSE Linux Enterprise Server\n◦Debian GNU/Linux\n◦Ubuntu LTS\n•Consumer Grade Linux Distributions\n◦Fedora\n◦Ubuntu non-LTS\n◦openSUSE\n•Experimental and Hacker Linux Distributions\n◦Arch\n◦Gentoo\nThis, of course, is a just a very small subset of possible distributions but the importance is the\ndifference between enterprise , consumer  and experimental  distributions and why each exists.\nEnterprise Grade Linux\nDistributions such as CentOS ( Community Enterprise OS ) are designed to be deployed within\nlarge organizations using enterprise hardware. The needs of the enterprise are very different\nfrom the needs of the small business, hobbyist or home user. In order to ensure the availability\nof their services, enterprise users have higher requirements regarding the stability of their\nhard- and software. Therefore, enterprise Linux distributions tend to include older releases of\nthe kernel and other software, which are known to work reliably. Often the distributions port\nimportant updates like security fixes back to these stable versions. In return, enterprise Linux\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     253"
    },
    {
        "Pagina": 263,
        "Contenuto": "distributions might lack support for the most recent consumer hardware and provide older\nversions of software packages. However, like consumer Linux distributions, enterprises tend to\nalso choose mature hardware components and build their services on stable software versions.\nConsumer Grade Linux\nDistributions such as Ubuntu are more targeted for small business or home and hobbyist users.\nAs such, they are also likely to be using the latest hardware found on consumer grade systems.\nThese systems will need the latest drivers to make the most of the new hardware but the\nmaturity of both the hardware and the drivers is unlikely to meet the needs of larger\nenterprises. For the consumer market, however, the latest kernel is exactly what is needed with\nthe most modern drivers even if they are little under tested. The newer Linux kernels will have\nthe latest drivers to support the very latest hardware that are likely to be in use. Especially with\nthe development we see with Linux in the gaming market it is tremendously important that the\nlatest drivers are available to these users.\nNOTESome distributions like Ubuntu provide both consumer grade versions which\ncontain recent software and receive updates for a rather small period of time, as\nwell as so-called Long Term Support versions, LTS for short, which are more suited\nfor enterprise environments.\nExperimental and Hacker Linux Distributions\nDistributions such as Arch Linux or Gentoo Linux live on the cutting edge of technology. They\ncontain the most recent versions of software, even if these versions still contain bugs and\nuntested features. In return, these distributions tend to use a rolling release model which\nallows them to deliver updates at any time. These distributions are used by advanced users\nwho want to always receive the most recent software and are aware that functionality can\nbreak at any time and are able to repair their systems in such cases.\nIn short, when considering Linux as your operating system, if you are using enterprise grade\nhardware on your servers or desktops then you can make use of either enterprise grade or\nconsumer grade Linux distributions. If you are using consumer grade hardware and need to make\nthe most of the latest hardware innovations then you are likely to need a similar Linux\ndistribution to match the needs of the hardware.\nSome Linux distributions are related to each other. Ubuntu, for example, is based on Debian\nLinux and uses the same packaging system, DPKG. Fedora, as another example, is a testbed for\nRedHat Enterprise Linux, where potential features of future RHEL versions can be explored ahead\nof their availability in the enterprise distribution.\nAs well as the distributions we have mentioned here there are many other Linux distributions.\nOne advantage that comes with Linux being open source software is that many people can\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n254     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 264,
        "Contenuto": "develop what they think Linux should look like. As such we have many hundreds of distributions.\nTo view more Linux distributions you may choose to visit The Distro Watch Web Site , the\nmaintainers of the website list the top 100 downloads of Linux distributions, allowing you to\ncompare and see what is currently popular.\nLinux Support Lifecycle\nAs you might expect, enterprise Linux distributions have a longer support life than consumer or\ncommunity editions of Linux. For example Red Hat Enterprise Linux has support for 10 years. Red\nHat Enterprise Linux 8 was launched in May 2019, while software updates and support are\navailable until May 2029.\nConsumer editions often will only have community support via forums. Software updates are\noften available for 3 releases. If we take Ubuntu as an example, at the time of writing 19.04 is the\nlatest available having updates through the release of 19.10 and stopping in January 2020. Ubuntu\nalso supply editions with long term support, known as LTS editions, which have 5 years of support\nfrom the original release. The current LTS version is 18.04 which will have software updates until\n2023. These LTS versions make Ubuntu a possible option for the enterprise with commercial\nsupport available from Canonical (the company behind the Ubuntu brand) or independent\nconsulting firms.\nNOTEThe Ubuntu distributions use date-based version numbers in the format YY.MM:\nFor example, version 19.04 was released April 2019.\nLinux as Your Desktop\nUsing Linux as your desktop system may be more challenging in an enterprise where desktop\nsupport focusses on commercial operating system offerings. However it is not only the support\nthat may prove challenging. An enterprise customer may also have made large investments into\nsoftware solutions that tie them into specific desktop operating systems. Having said this, there\nare many examples of Linux desktops being integrated into large organizations with companies\nlike Amazon even having their own Linux distribution Amazon Linux 2 . This is used on their AWS\ncloud platform but also internally for both servers and desktops.\nUsing Linux in a smaller business or at home becomes a lot easier and can be a rewarding\nexperience, removing the need for licensing and opening your eyes to the wealth of free and open\nsource software that is available for Linux. You will also find that there are many different\ndesktop environments available. The most common being Gnome and KDE, however many others\nexists. The decision comes down to personal preference.\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     255"
    },
    {
        "Pagina": 265,
        "Contenuto": "Using Linux on Servers\nUsing Linux as your server operating system is common practice in the enterprise sector. Servers\nare maintained by engineers who specialize in Linux. So even with thousands of users, the users\ncan remain ignorant of the servers that they are connecting to. The server operating system is not\nimportant to them and, in general, client applications will not differ between Linux and other\noperating systems in the backend. It is also true that as more applications are virtualized or\ncontainerized within local and remote clouds, the operating system is masked even more and the\nembedded operating system is likely to be Linux.\nLinux in the Cloud\nAnother opportunity to become familiar with Linux is to deploy Linux within one of the many\npublic clouds available. Creating an account with one of the many others cloud providers will\nallow you to quickly deploy many different Linux distributions quickly and easily.\nNon Linux Operating Systems\nYes, incredible as it seems, there are operating systems that are not based on the Linux kernel. Of\ncourse, over the years there have been many and some have fallen by the wayside but there are\nstill other choices that are available to you. Either at home or in the office.\nUnix\nBefore we had Linux as an operating system there was Unix. Unix used to be sold along with\nhardware and still today several commercial Unixes such as AIX and HP-UX are available on the\nmarket. While Linux was highly inspired by Unix (and the lack of its availability for certain\nhardware), the family of BSD operating systems is directly based on Unix. Today, FreeBSD, NetBSD\nand OpenBSD, along with some other related BSD systems, are available as free software.\nUnix was heavily used in the enterprise but we have seen a decline in the fortunes of Unix with\nthe growth of Linux. As Linux has grown and the enterprise support offerings have also grown,\nwe have seen Unix slowly start to vanish. Solaris, originally from Sun before moving to Oracle, has\nrecently disappeared. This was one of the larger Unix Operating Systems used by\ntelecommunication companies, heralded as Telco Grade Unix .\nUnix Operating Systems include:\n•AIX\n•FreeBSD, NetBSD, OpenBSD\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n256     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 266,
        "Contenuto": "•HP-UX\n•Irix\n•Solaris\nmacOS\nmacOS (previously OS X) from Apple dates back to 2001. Based very much on BSD Unix, and\nmaking use of the Bash command line shell, it is a friendly system to use if you are used to using\nUnix or Linux operating systems. If you’re using macOS you can open the terminal application to\naccess the command line. Running the same uname command again we can check the reported\noperating system:\n$ uname -s\nDarwin\nNOTEWe make use of the option -s in this case to return the OS name. We previously\nused -r to return the kernel version number.\nMicrosoft Windows\nWe can still say that the majority of desktops and laptops out there will be Windows based. The\noperating system has been truly successful and has dominated the desktop market for years.\nAlthough it is proprietary software and is not free, often the operating system license is included\nwhen you buy the hardware so it becomes the easy choice to make. There is, of course, wide\nsupport for Windows throughout hardware and software vendors as well of course many open\nsource applications are also available for Windows. The future for Windows does not seem as\nbright as it has been. With fewer desktops and laptops being sold now the focus is on the tablet\nand phone market. This has been dominated by Apple and Android and it is hard for Microsoft to\ngain ground.\nAs a server platform Microsoft does now allow its customers to choose between a GUI ( Graphical\nUser Interface ) and command line only version. The separation of the GUI and the command line\nis an important one. Most of the time the GUI of older Microsoft Servers will be loaded but no-one\nwill use it. Consider an Active Directory Domain Controller… users use it all the time to\nauthenticate to the domain, but it is managed remotely from administrators' desktops and not the\nserver.\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     257"
    },
    {
        "Pagina": 267,
        "Contenuto": "Guided Exercises\n1.Which project makes up the common component of all Linux distributions?\nCentOS\nRed Hat\nUbuntu\nLinux Kernel\nCoreOS\n2.Which operating system is reported in use for macOS from Apple?\nOS X\nOSX\nDarwin\nMacOS\n3.How does a Linux distribution differ from the Linux kernel?\nThe kernel is part of a distribution, the\ndistribution as applications to surround the\nkernel to make it useful\nThe kernel is the Linux distribution\nAll distributions that use the same kernel are\nthe same\n4.Which of the following is a desktop environment in Linux?\nMint\nElementary\nZorin\nGnome\n5.Which component of an operating system allows access to hardware?\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n258     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 268,
        "Contenuto": "Drivers\nShells\nService\nApplication\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     259"
    },
    {
        "Pagina": 269,
        "Contenuto": "Explorational Exercises\n1.Retrieve the current Kernel release of your Linux system if you have access to the command\nline.\n2.Using your preferred search engine locate and identify public cloud providers available to you.\nThese could include AWS, Google Cloud, Rackspace and many more. Choose one and see which\noperating systems are available to deploy.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n260     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 270,
        "Contenuto": "Summary\nIn this section you have learned how to differentiate between different operating systems\ncommonly available. We discussed:\n•Linux Based Operating Systems\n•UNIX\n•macOS\n•Windows Based Operation Systems\nWithin the Linux category we could further break the selection down into distributions with long\nterm support and those with a shorter support cycle. LTS versions being more suited to the\nEnterprise and shorter term support being targeted toward home and hobby users.\n•Enterprise Grade Linux Distributions\n◦Red Hat Enterprise Linux\n◦CentOS\n◦SUSE Linux Enterprise Server\n◦Debian GNU/Linux\n◦Ubuntu LTS\n•Consumer Grade Linux Distributions\n◦Fedora\n◦Ubuntu non-LTS\n◦openSUSE\n•Experimental and Hacker Linux Distributions\n◦Arch\n◦Gentoo\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     261"
    },
    {
        "Pagina": 271,
        "Contenuto": "Answers to Guided Exercises\n1.Which project makes up the common component of all Linux distributions?\nCentOS\nRed Hat\nUbuntu\nLinux Kernel X\nCoreOS\n2.Which operating system is reported in use for OS X from Apple?\nOS X\nOSX\nDarwin X\nMacOS\n3.How does a Linux distribution differ from the Linux kernel?\nThe kernel is part of a distribution, the\ndistribution as applications to surround the\nkernel to make it usefulX\nThe kernel is the Linux distribution\nAll distributions that use the same kernel are\nthe same\n4.Which of the following is a desktop environment in Linux?\nMint\nElementary\nZorin\nGnome X\n5.Which component of an operating system allows access to hardware?\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n262     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 272,
        "Contenuto": "Drivers X\nShells\nService\nApplication\nLinux Essentials (Version 1.6) | 4.1 Choosing an Operating System\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     263"
    },
    {
        "Pagina": 273,
        "Contenuto": "Answers to Explorational Exercises\n1.Retrieve the current kernel release of your Linux system if you have access to the command\nline.\n$ uname -r\n4.15.0-47-generic\n2.Using your preferred search engine locate and identify public cloud providers available to you.\nThese could include AWS, Google Cloud, Rackspace and many more. Choose one and see which\noperating systems are available to deploy.\nAWS, as an example, allows you to deploy many Linux distributions such as Debian, Red Hat,\nSUSE or Ubuntu as well as Windows.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n264     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 274,
        "Contenuto": "4.2 Understanding Computer Hardware\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 4.2\nWeight\n2\nKey Knowledge Areas\n•Hardware\nPartial list of the used files, terms and utilities\n•Motherboards, processors, power supplies, optical drives, peripherals\n•Hard drives, solid state disks and partitions, /dev/sd*\n•Drivers\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     265"
    },
    {
        "Pagina": 275,
        "Contenuto": "4.2 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 4 The Linux Operating System\nObjective: 4.2 Understanding Computer Hardware\nLesson: 1 of 1\nIntroduction\nWithout hardware, software is nothing more than another form of literature. Hardware processes\nthe commands described by the software and provides mechanisms for storage, input, and output.\nEven the cloud is ultimately backed by hardware.\nAs an operating system, one of Linux' responsibilities is providing software with interfaces to\naccess a system’s hardware. Most configuration specifics are beyond the scope of this lesson.\nHowever, users are often concerned with the performance, capacity, and other factors of system\nhardware since they impact the ability of a system to adequately support specific applications.\nThis lesson discusses hardware as separate physical items using standard connectors and\ninterfaces. The standards are relatively static. But the form factor, performance, and capacity\ncharacteristics of hardware are constantly evolving. Regardless of how changes may blur physical\ndistinctions the conceptual aspects of hardware described in this lesson still apply.\nNOTEAt various points within this lesson command line examples are used to\ndemonstrate ways to access information about hardware. Most examples are from\na Raspberry Pi B+ but should apply to most systems. Understanding these\ncommands is not required to understand this material.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n266     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 276,
        "Contenuto": "Power Supplies\nAll of the active components in a computer system require electricity to operate. Unfortunately,\nmost sources of electricity are not appropriate. Computer system hardware requires specific\nvoltages with relatively tight tolerances. Which is not what is available from your local wall outlet.\nPower supplies normalize available sources of power. Standard voltage requirements allow\nmanufacturers to create hardware components that can be used in systems anywhere in the\nworld. Desktop power supplies tend to use the electricity from wall outlets as a source. Server\npower supplies tend to be more critical so they can often connect to multiple sources to assure\nthat they continue operating if one source fails.\nConsuming power generates heat. Excessive heat can cause system components to operate slowly\nor even fail. Most systems have some form of fan to move air for more efficient cooling.\nComponents such as processors often generate heat that air flow alone cannot dissipate. These hot\ncomponents attach special fins known as heat sinks to help dissipate the heat they generate. Heat\nsinks often have their own small local fan to ensure adequate air flow.\nMotherboard\nAll of a system’s hardware needs to interconnect. A motherboard normalizes that interconnection\nusing standardized connectors and form factors. It also provides support for the configuration\nand electrical needs of those connectors.\nThere are a large number of motherboard configurations. They support different processors and\nmemory systems. They have different combinations of standardized connectors. And they adapt to\nthe different sizes of the packaging that contains them. Except perhaps for the ability to connect\nspecific external devices, motherboard configuration is effectively transparent to users.\nAdministrators are mostly exposed to motherboard configuration when there is a need to identify\nspecific devices.\nWhen power is first applied there is motherboard specific hardware that must be configured and\ninitialized before the system can operate. Motherboards use programming stored in nonvolatile\nmemory known as firmware to deal with motherboard specific hardware. The original form of\nmotherboard firmware was known as BIOS ( Basic Input/Output System ). Beyond basic\nconfiguration settings BIOS was mostly responsible for identifying, loading, and transferring\noperation to an operating system such as Linux. As hardware evolved, firmware expanded to\nsupport larger disks, diagnostics, graphical interfaces, networking, and other advanced\ncapabilities independent of any loaded operating system. Early attempts to advance firmware\nbeyond basic BIOS was often specific to a motherboard manufacturer. Intel defined a standard for\nadvanced firmware known as EFI ( Extensible Firmware Interface ). Intel contributed EFI to a\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     267"
    },
    {
        "Pagina": 277,
        "Contenuto": "standards organization to create UEFI ( Unified Extensible Firmware Interface ). Today, most\nmotherboards use UEFI. BIOS and EFI are almost never seen on recent systems. Regardless, most\npeople still refer to motherboard firmware as BIOS.\nThere are very few firmware settings of interest to general users so only individuals responsible\nfor system hardware configuration typically need to deal with firmware and its settings. One of\nthe few commonly changed options is enabling virtualization extensions of modern CPUs.\nMemory\nSystem memory holds the data and program code of currently running applications. When they\ntalk about computer memory most people are referring to this system memory. Another common\nterm used for system memory is the acronym RAM ( Random Access Memory ) or some variation of\nthat acronym. Sometimes references to the physical packaging of the system memory such as\nDIMM, SIMM or DDR are also used.\nPhysically, system memory is usually packaged on individual circuit board modules that plug into\nthe motherboard. Individual memory modules currently range in size from 2 GB to 64 GB. For\nmost general purpose applications 4 GB is the minimum system memory people should consider.\nFor individual workstations 16 GB is typically more than sufficient. However even 16 GB might be\nlimiting for users running gaming, video, or high-end audio applications. Servers often require\n128 GB or even 256 GB of memory to efficiently support user loads.\nFor the most part Linux allows users to treat system memory as a black box. An application is\nstarted and Linux takes care of allocating the system memory required. Linux releases the\nmemory for use by other applications when an application completes. But what if an application\nrequires more than the available system memory? In this case, Linux moves idle applications\nfrom system memory into a special disk area known as swap space. Linux moves idle applications\nfrom the disk swap space back to system memory when they need to run.\nSystems without dedicated video hardware often use a portion of the system memory (often 1 GB)\nto act as video display storage. This reduces the effective system memory. Dedicated video\nhardware typically has its own separate memory that is not available as system memory.\nThere are several ways to obtain information about system memory. As a user, the total amount\nof memory available and in use are typically the values of interest. One source of information\nwould be to run the command free along with the parameter -m to use megabytes in the output:\n$ free -m\n              total        used        free      shared  buff/cache   available\nMem:            748          37          51          14         660         645\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n268     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 278,
        "Contenuto": "Swap:            99           0          99\nThe first line specifies the total memory available to the system ( total), the memory in use ( used)\nand the free memory ( free). The second line displays this information for the swap space.\nMemory indicated as shared and buff/cache  is currently used for other system functions,\nalthough the amount indicated in available  could be used for application.\nProcessors\nThe word “processor” implies that something is being processed. In computers most of that\nprocessing is dealing with electrical signals. Typically those signals are treated as having one of\nthe binary values 1 or 0.\nWhen people talk about computers they often use the word processor interchangeably with the\nacronym CPU ( Central Processing Unit ). Which is not technically correct. Every general purpose\ncomputer has a CPU that processes the binary commands specified by software. So it is\nunderstandable that people interchange processor and CPU. However, in addition to a CPU,\nmodern computers often include other task specific processors. Perhaps the most recognizable\nadditional processor is a GPU ( Graphical Processing Unit ). Thus, while a CPU is a processor, not all\nprocessors are CPUs.\nFor most people CPU architecture is a reference to the instructions that the processor supports.\nAlthough Intel and AMD make processors supporting the same instructions it is meaningful to\ndifferentiate by vendor because of vendor specific packaging, performance, and power\nconsumption differences. Software distributions commonly use these designations to specify the\nminimum set of instructions they require to operate:\ni386\nReferences the 32-bit instruction set associated with the Intel 80386.\nx86\nTypically references the 32-bit instruction sets associated with successors to the 80386 such as\n80486, 80586, and Pentium.\nx64 / x86-64\nReferences processors that support both the 32-bit and 64-bit instructions of the x86 family.\nAMD\nA reference to x86 support by AMD processors.\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     269"
    },
    {
        "Pagina": 279,
        "Contenuto": "AMD64\nA reference to x64 support by AMD processors.\nARM\nReferences a Reduced Instruction Set Computer  (RISC) CPU that is not based on the x86\ninstruction set. Commonly used by embedded, mobile, tablet, and battery operated devices. A\nversion of Linux for ARM is used by the Raspberry Pi.\nThe file /proc/cpuinfo  contains detailed information about a system’s processor. Unfortunately\nthe details are not friendly to general users. A more general result can be obtained with the\ncommand lscpu. Output from a Raspberry Pi B+:\n$ lscpu\nArchitecture:          armv7l\nByte Order:            Little Endian\nCPU(s):                4\nOn-line CPU(s) list:   0-3\nThread(s) per core:    1\nCore(s) per socket:    4\nSocket(s):             1\nModel:                 4\nModel name:            ARMv7 Processor rev 4 (v7l)\nCPU max MHz:           1400.0000\nCPU min MHz:           600.0000\nBogoMIPS:              38.40\nFlags:                 half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32\nlpae evtstrm crc32\nTo most people the myriad of vendors, processor families, and specification factors represent a\nbewildering array of choices. Regardless, there are several factors associated with CPUs and\nprocessors that even general users and administrators often need to consider when they need to\nspecify operational environments:\nBit size\nFor CPUs this number relates to both the native size of data it manipulates and the amount of\nmemory it can access. Most modern systems are either 32-bit or 64-bit. If an application needs\naccess to more than 4 gigabytes of memory then it must run on a 64-bit system since 4\ngigabytes is the maximum address that can be represented using 32 bits. And, while 32-bit\napplications can typically run on 64-bit systems, 64-bit applications cannot run on 32-bit\nsystems.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n270     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 280,
        "Contenuto": "Clock speed\nOften expressed in megahertz (MHz) or gigahertz (GHz). This relates to how fast a processor\nprocesses instructions. But processor speed is just one of the factors impacting system response\ntimes, wait times, and throughput. Even an active multi-tasking user rarely keeps a CPU of a\ncommon desktop PC active more than 2 or 3 percent of the time. Regardless, if you frequently\nuse computationally intensive applications involving activities such as encryption or video\nrendering then CPU speed may have a significant impact on throughput and wait time.\nCache\nCPUs require a constant stream of both instructions and data in order to operate. The cost and\npower consumption of a multi-gigabyte system memory that could be accessed at CPU clock\nspeeds would be prohibitive. CPU-speed cache memory is integrated onto the CPU chip to\nprovide a high-speed buffer between CPUs and system memory. Cache is separated into\nmultiple layers, commonly referenced as L1, L2, L3 and even L4. In the case of cache, more is\noften better.\nCores\nCore refers to an individual CPU. In addition to core representing a physical CPU, Hyper-\nThreading Technology  (HTT) allows a single physical CPU to concurrently process multiple\ninstructions thus virtually acting as multiple physical CPUs. Most typically, multiple physical\ncores are packaged as a single physical processor chip. However, there are motherboards that\nsupport multiple physical processor chips. In theory having more cores to process tasks would\nalways seem to yield better system throughput. Unfortunately, desktop applications often only\nkeep CPUs busy 2 or 3 percent of the time, so adding more mostly idle CPUs is likely to result in\nminimal improvement to throughput. More cores are best suited to running applications that\nare written to have multiple independent threads of operation such as video frame rendering,\nweb page rendering, or multi-user virtual machine environments.\nStorage\nStorage devices provide a method for retaining programs and data. Hard Disk Drives  (HDDs) and\nSolid State Drives  (SSDs) are the most common form of storage device for servers and desktops.\nUSB memory sticks and optical devices such as DVD are also used but rarely as a primary device.\nAs the name implies, a hard disk drive stores information on one or more rigid physical disks. The\nphysical disks are covered with magnetic media to make storage possible. The disks are contained\nwithin a sealed package since dust, small particles, and even finger prints would interfere with\nthe ability of the HDD to read and write the magnetic media.\nSSDs are effectively more sophisticated versions of USB memory sticks with significantly larger\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     271"
    },
    {
        "Pagina": 281,
        "Contenuto": "capacity. SSDs store information in microchips so there are no moving parts.\nAlthough the underlying technologies for HDDs and SSDs are different, there are important\nfactors that can be compared. HDD capacity is based on scaling physical components while SSD\ncapacity depends on the number of microchips. Per gigabyte, SSDs cost between 3 and 10 times\nwhat an HDD costs. To read or write, an HDD must wait for a location on a disk to rotate to a\nknown location while SSDs are random access. SSD access speeds are typically 3 to 5 times faster\nthan HDD devices. Since they have no moving parts SSDs consume less power and are more\nreliable than HDDs.\nStorage capacity is constantly increasing for HDDs and SSDs. Today, 5 terabyte HDDs and 1\nterabyte SSDs are commonly available. Regardless, large storage capacity is not always better.\nWhen a storage device fails the information it contained is no longer available. And of course,\nbackup takes longer when there is more information to back up. For applications which read and\nwrite a lot of data, latency and performance may be more important than capacity.\nModern systems use SCSI ( Small Computer System Interface ) or SATA ( Serial AT Attachment ) to\nconnect with storage devices. These interfaces are typically supported by the appropriate\nconnector on the motherboard. Initial load comes from a storage device attached to the\nmotherboard. Firmware settings define the order in which devices are accessed for this initial\nloading.\nStorage systems known as RAID ( Redundant Array of Independent Disks ) are a common\nimplementation to avoid loss of information. A RAID array consists of multiple physical devices\ncontaining duplicate copies of information. If one device fails all of the information is still\navailable. Different physical RAID configurations are referenced as 0, 1, 5, 6, and 10. Each\ndesignation has different storage size, performance characteristics and ways to store redundant\ndata or checksums for data recovery. Beyond some administrative configuration overhead, the\nexistence of RAID is effectively transparent to users.\nStorage devices commonly read and write data as blocks of bytes. The lsblk command can be\nused to list the block devices available to a system. The following example was run on a Raspberry\nPi using an SD card as a storage device. The details of the output are covered by information in the\nPartitions  and Drivers  lessons that follow:\n$ lsblk\nNAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nmmcblk0     179:0    0 29.7G  0 disk\n+-mmcblk0p1 179:1    0 43.9M  0 part /boot\n+-mmcblk0p2 179:2    0 29.7G  0 part /\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n272     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 282,
        "Contenuto": "Partitions\nA storage device is effectively a long sequence of storage locations. Partitioning is the mechanism\nthat tells Linux if it is to see these storage locations as a single sequence or multiple independent\nsequences. Each partition is treated as if it is an individual device. Most of the time partitions are\ncreated when a system is first configured. If change is needed, administrative tools are available\nto manage device partitioning.\nSo why would multiple partitions be desirable? Some examples for using partitions would be\nmanaging available storage, isolating encryption overhead, or supporting multiple file systems.\nPartitions make it possible to have a single storage device that can boot under different operating\nsystems.\nWhile Linux can recognize the storage sequence of a raw device a raw device cannot be used as-is.\nTo use a raw device it must be formatted. Formatting writes a file system to a device and prepares\nit for file operations. Without a file system a device cannot be used for file-related operations.\nUsers see partitions as if they are individual devices. This makes it easy to overlook the fact that\nthey’re still dealing with a single physical device. In particular, device to device operations that\nare actually partition to partition operations will not have the expected performance. A single\ndevice is one physical mechanism with one set of read/write hardware. More importantly, you\ncan’t use partitions of a single physical device as a fault tolerant design. If the device fails, all\npartitions fail so there would be no fault tolerance.\nNOTELogical Volume Manager  (LVM) is a software capability that allows administrators\nto combine individual disks and disk partitions and treat them as if they are a\nsingle drive.\nPeripherals\nServers and workstations need a combination of CPU, system memory, and storage to operate. But\nthese fundamental components don’t directly interface with the external world. Peripherals are\nthe devices that provide systems with input, output, and access to the rest of the real world.\nMost motherboards have built-in external connectors and firmware support for common legacy\nperipheral interfaces supporting devices such as keyboard, mouse, sound, video, and network.\nRecent motherboards typically have an Ethernet connector to support networks, a HDMI\nconnector supporting basic graphical needs, and one or more USB ( Universal Serial Bus )\nconnectors for mostly everything else. There are several versions of USB with different speed and\nphysical characteristics. Several versions of USB ports are common on a single motherboard.\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     273"
    },
    {
        "Pagina": 283,
        "Contenuto": "Motherboards may also have one or more expansion slots. Expansion slots allow users to add\nspecial circuit boards known as expansion cards that support custom, legacy, and non-standard\nperipherals. Graphics, sound, and network interfaces are common expansion cards. Expansion\ncards also support RAID, and special format legacy interfaces involving serial and parallel\nconnections.\nSystem on a Chip  (SoC) configurations achieve power, performance, space, and reliability\nadvantages over motherboard configurations by packaging processors, system memory, SSD, and\nhardware to control peripherals as a single integrated circuit package. The peripherals supported\nby SoC configurations are limited by the components packaged. Thus, SoC configurations tend to\nbe developed for specific uses. Phones, tablets, and other portable devices are often based on SoC\ntechnology.\nSome systems incorporate peripherals. Laptops are similar to workstations but incorporate\ndefault display, keyboard, and mouse peripherals. All-In-One systems are similar to laptops but\nrequire mouse and keyboard peripherals. Motherboard or SoC based controllers are often\npackaged with integral peripherals appropriate to a specific use.\nDrivers and Device Files\nSo far, this lesson has presented information about processors, memory, disks, partitioning,\nformatting and peripherals. But requiring general users to deal with the specific details for each\nof the devices in their system would make those systems unusable. Likewise, software developers\nwould need to modify their code for every new or modified device they need to support.\nThe solution to this “dealing with the details” problem is provided by a device driver. Device\ndrivers accept a standard set of requests then translate those requests into the device appropriate\ncontrol activities. Device drivers are what allow you and the applications you run to read from the\nfile /home/carol/stuff  without worrying about whether that file is on a hard drive, solid state\ndrive, memory stick, encrypted storage, or some other device.\nDevice files are found in the /dev directory and identify physical devices, device access, and\nsupported drivers. By convention, in modern systems using SCSI or SATA based storage devices\nthe specification filename starts with the prefix sd. The prefix is followed by a letter such as a or b\nindicating a physical device. After the prefix and device identifier comes a number indicating a\npartition within the physical device. So, /dev/sda  would reference the entire first storage device\nwhile /dev/sda3  would reference partition 3 in the first storage device. The device file for each\ntype of device has a naming convention appropriate to the device. While covering all of the\npossible naming conventions is beyond the scope of this lesson it is important to remember that\nthese conventions are critical to making system administration possible.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n274     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 284,
        "Contenuto": "While it is beyond the scope of this lesson to cover the contents of the /dev directory it is\ninformative to look at the entry for a storage device. Device files for SD cards typically use mmcblk\nas a prefix:\n$ ls -l mmcblk *\nbrw-rw---- 1 root disk 179, 0 Jun 30 01:17 mmcblk0\nbrw-rw---- 1 root disk 179, 1 Jun 30 01:17 mmcblk0p1\nbrw-rw---- 1 root disk 179, 2 Jun 30 01:17 mmcblk0p2\nThe listing details for a device file are different from typical file details:\n•Unlike a file or directory the first letter of the permissions field is b. This indicates that blocks\nare read from and written to the device in blocks rather than individual characters.\n•The size field is two values separated by a comma rather than a single value. The first value\ngenerally indicates a particular driver within the kernel and the second value specifies a\nspecific device handled by the driver.\n•The filename uses a number for the physical device so the naming convention adapts by\nspecifying the partition suffix as a p followed by a digit.\nNOTEEach system device should have an entry in /dev. Since the contents of the /dev\ndirectory are created at installation there are often entries for every possible\ndriver and device even if no physical device exists.\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     275"
    },
    {
        "Pagina": 285,
        "Contenuto": "Guided Exercises\n1.Describe these terms:\nProcessor\nCPU\nGPU\n2.If you are primarily running video editing applications (a computationally intensive activity)\nwhich components and characteristics would you expect to have the most impact on system\nusability:\nCPU cores\nCPU speed\nAvailable system memory\nStorage system\nGPU\nVideo display\nNone of the above\n3.What would you expect the name of the device file in /dev to be for partition 3 of the third\nSATA drive in a system:\nsd3p3\nsdcp3\nsdc3\nNone of the above\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n276     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 286,
        "Contenuto": "Explorational Exercises\n1.Run the lsblk command on your system. Identify the parameters below. If a system is not\nimmediately available, consider the lsblk -f  listing for the Raspberry Pi system mentioned in\nthe “Storage” section above:\n$ lsblk -f\nNAME        FSTYPE LABEL  UUID                                 MOUNTPOINT\nmmcblk0\n+-mmcblk0p1 vfat   boot   9304-D9FD                            /boot\n+-mmcblk0p2 ext4   rootfs 29075e46-f0d4-44e2-a9e7-55ac02d6e6cc /\n◦The type of devices and how many\n◦The partition structure of each device\n◦The type of file system and mount for each partition\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     277"
    },
    {
        "Pagina": 287,
        "Contenuto": "Summary\nA system is the sum of its components. Different components impact cost, performance, and\nusability in different ways. While there are common configurations for workstations and servers\nthere is no single best configuration.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n278     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 288,
        "Contenuto": "Answers to Guided Exercises\n1.Describe these terms:\nProcessor\nA general term that applies to any type of processor. Often used incorrectly as a synonym for\nCPU.\nCPU\nA Central Processing Unit. A processing unit providing support for general purpose\ncomputational tasks.\nGPU\nA Graphical Processing Unit. A processing unit optimized for supporting activities relating to\nthe presentation of graphics.\n2.If you are primarily running video editing applications (a computationally intensive activity)\nwhich components and characteristics would you expect to have the most impact on system\nusability:\nCPU cores\nYes. Multiple cores support the concurrent presentation and rendering tasks required by\nvideo editing.\nCPU speed\nYes. Video rendering requires a significant amount of computational activity.\nAvailable system memory\nLikely. The uncompressed video used in editing is large. General purpose systems often\ncome with 8 gigabytes of memory. 16 or even 32 gigabytes of memory allows the system to\nhandle more frames of uncompressed video making editing activities more efficient.\nStorage system\nYes. Video files are large. The overhead of local SSD drives supports more efficient transfer.\nSlower network drives are likely to be counterproductive.\nGPU\nNo. GPU primarily impacts the presentation of the rendered video.\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     279"
    },
    {
        "Pagina": 289,
        "Contenuto": "Video display\nNo. The video display primarily impacts the presentation of the rendered video.\nNone of the above\nNo. Some of these factors have obvious impacts on how usable your system would be.\n3.What would you expect the name of the device file in /dev to be for partition 3 of the third\nSATA drive in a system:\nsd3p3 Not correct. Drive 3 would be sdc not sd3\nsdcp3 Not correct. Partition 3 would be 3 not p3\nsdc3 Correct\nNone of the above Not correct. The correct answer is one of the\nchoices.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n280     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 290,
        "Contenuto": "Answers to Explorational Exercises\n1.Run the lsblk command on your system. Identify the parameters below. If a system is not\nimmediately available, consider the lsblk -f  listing for the Raspberry Pi system mentioned in\nthe “Storage” section above:\n$ lsblk -f\nNAME        FSTYPE LABEL  UUID                                 MOUNTPOINT\nmmcblk0\n+-mmcblk0p1 vfat   boot   9304-D9FD                            /boot\n+-mmcblk0p2 ext4   rootfs 29075e46-f0d4-44e2-a9e7-55ac02d6e6cc /\nAnswers that follow are based the lsblk -f  listing for the Raspberry Pi system above. Your\nanswers may differ:\nThe type of devices and how many\nThere is one device: mmcblk0. You know by convention that the mmcblk would be an SD\nmemory card.\nThe partition structure of each device\nThere are two partitions: mmcblk0p1  and mmcblk0p2 .\nThe type of file system and mount for each partition\nPartition 1 uses the vfat file system. It is used to boot the system and is mounted as /boot.\nPartition 2 uses the ext4 file system. It is used as the primary file system and is mounted as\n/.\nLinux Essentials (Version 1.6) | 4.2 Understanding Computer Hardware\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     281"
    },
    {
        "Pagina": 291,
        "Contenuto": "4.3 Where Data is Stored\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 4.3\nWeight\n3\nKey knowledge areas\n•Programs and configuration\n•Processes\n•Memory addresses\n•System messaging\n•Logging\nPartial list of the used files, terms and utilities\n•ps, top, free\n•syslog, dmesg\n•/etc/, /var/log/\n•/boot/, /proc/, /dev/, /sys/\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n282     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 292,
        "Contenuto": "4.3 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 4 The Linux Operating System\nObjective: 4.3 Where Data is Stored\nLesson: 1 of 2\nIntroduction\nFor an operating system, everything is considered data. For Linux, everything is considered a file:\nprograms, regular files, directories, block devices (hard disks, etc.), character devices (consoles,\netc.), kernel processes, sockets, partitions, links, etc. The Linux directory structure, starting from\nthe root  /, is a collection of files containing data. The fact that everything is a file is a powerful\nfeature of Linux as it allows for tweaking virtually every single aspect of the system.\nIn this lesson we will be discussing the different locations in which important data is stored as\nestablished by the Linux Filesystem Hierarchy Standard (FHS) . Some of these locations are real\ndirectories which store data persistently on disks, whereas others are pseudo filesystems loaded\nin memory which give us access to kernel subsystem data such as running processes, use of\nmemory, hardware configuration and so on. The data stored in these virtual directories is used by\na number of commands that allow us to monitor and handle it.\nPrograms and their Configuration\nImportant data on a Linux system are — no doubt — its programs and their configuration files.\nThe former are executable files containing sets of instructions to be run by the computer’s\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     283"
    },
    {
        "Pagina": 293,
        "Contenuto": "processor, whereas the latter are usually text documents that control the operation of a program.\nExecutable files can be either binary files or text files. Executable text files are called scripts.\nConfiguration data on Linux is traditionally stored in text files too, although there are various\nstyles of representing configuration data.\nWhere Binary Files are Stored\nLike any other file, executable files live in directories hanging ultimately from /. More specifically,\nprograms are distributed across a three-tier structure: the first tier ( /) includes programs that can\nbe necessary in single-user mode, the second tier ( /usr) contains most multi-user programs and\nthe third tier ( /usr/local ) is used to store software that is not provided by the distribution and\nhas been compiled locally.\nTypical locations for programs include:\n/sbin\nIt contains essential binaries for system administration such as parted or ip.\n/bin\nIt contains essential binaries for all users such as ls, mv, or mkdir.\n/usr/sbin\nIt stores binaries for system administration such as deluser, or groupadd .\n/usr/bin\nIt includes most executable files — such as free, pstree, sudo or man — that can be used by all\nusers.\n/usr/local/sbin\nIt is used to store locally installed programs for system administration that are not managed by\nthe system’s package manager.\n/usr/local/bin\nIt serves the same purpose as /usr/local/sbin  but for regular user programs.\nRecently some distributions started to replace /bin and /sbin with symbolic links to /usr/bin \nand /usr/sbin .\nNOTE The /opt directory is sometimes used to store optional third-party applications.\nApart from these directories, regular users can have their own programs in either:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n284     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 294,
        "Contenuto": "•/home/$USER/bin\n•/home/$USER/.local/bin\nTIPYou can find out what directories are available for you to run binaries from by\nreferencing the PATH variable with echo $PATH . For more information on PATH,\nreview the lessons on variables and shell customization.\nWe can find the location of programs with the which command:\n$ which git\n/usr/bin/git\nWhere Configuration Files are Stored\nThe /etc Directory\nIn the early days of Unix there was a folder for each type of data, such as /bin for binaries and\n/boot for the kernel(s). However, /etc (meaning et cetera ) was created as a catch-all directory to\nstore any files that did not belong in the other categories. Most of these files were configuration\nfiles. With the passing of time more and more configuration files were added so /etc became the\nmain folder for configuration files of programs. As said above, a configuration file usually is a\nlocal, plain text (as opposed to binary) file which controls the operation of a program.\nIn /etc we can find different patterns for config files names:\n•Files with an ad hoc  extension or no extension at all, for example\ngroup\nSystem group database.\nhostname\nName of the host computer.\nhosts\nList of IP addresses and their hostname translations.\npasswd\nSystem user database — made up of seven fields separated by colons providing information\nabout the user.\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     285"
    },
    {
        "Pagina": 295,
        "Contenuto": "profile\nSystem-wide configuration file for Bash.\nshadow\nEncrypted file for user passwords.\n•Initialization files ending in rc:\nbash.bashrc\nSystem-wide .bashrc file for interactive bash shells.\nnanorc\nSample initialization file for GNU nano (a simple text editor that normally ships with any\ndistribution).\n•Files ending in .conf:\nresolv.conf\nConfig file for the resolver — which provide access to the Internet Domain Name System\n(DNS).\nsysctl.conf\nConfig file to set system variables for the kernel.\n•Directories with the .d suffix:\nSome programs with a unique config file ( *.conf or otherwise) have evolved to have a\ndedicated *.d directory which help build modular, more robust configurations. For example,\nto configure logrotate, you will find logrotate.conf , but also the logrotate.d  directories.\nThis approach comes in handy in those cases where different applications need configurations\nfor the same specific service. If, for example, a web server package contains a logrotate\nconfiguration, this configuration can now be placed in a dedicated file in the logrotate.d \ndirectory. This file can be updated by the webserver package without interfering with the\nremaining logrotate configuration. Likewise, packages can add specific tasks by placing files in\nthe /etc/cron.d  directory instead of modifying /etc/crontab .\nIn Debian — and Debian derivatives — such an approach has been applied to the list of reliable\nsources read by the package management tool apt: apart from the classic\n/etc/apt/sources.list , now we find the /etc/apt/sources.list.d  directory:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n286     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 296,
        "Contenuto": "$ ls /etc/apt/sources *\n/etc/apt/sources.list\n/etc/apt/sources.list.d:\nConfiguration Files in HOME (Dotfiles)\nAt user level, programs store their configurations and settings in hidden files in the user’s home\ndirectory (also represented ~). Remember, hidden files start with a dot ( .) — hence their name:\ndotfiles .\nSome of these dotfiles are Bash scripts that customize the user’s shell session and are sourced as\nsoon as the user logs into the system:\n.bash_history\nIt stores the command line history.\n.bash_logout\nIt includes commands to execute when leaving the login shell.\n.bashrc\nBash’s initialization script for non-login shells.\n.profile\nBash’s initialization script for login shells.\nNOTERefer to the lesson on “Command Line Basics” to learn more about Bash and its init\nfiles.\nOther user-specific programs' config files get sourced when their respective programs are started:\n.gitconfig , .emacs.d , .ssh, etc.\nThe Linux Kernel\nBefore any process can run, the kernel must be loaded into a protected area of memory. After\nthat, the process with PID 1 (more often than not systemd nowadays) sets off the chain of\nprocesses, that is to say, one process starts other(s) and so on. Once the processes are active, the\nLinux kernel is in charge of allocating resources to them (keyboard, mouse, disks, memory,\nnetwork interfaces, etc).\nNOTEPrior to systemd, /sbin/init  was always the first process in a Linux system as\npart of the System V Init  system manager. In fact, you still find /sbin/init \nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     287"
    },
    {
        "Pagina": 297,
        "Contenuto": "currently but linked to /lib/systemd/systemd .\nWhere Kernels are Stored: /boot\nThe kernel resides in /boot — together with other boot-related files. Most of these files include the\nkernel version number components in their names (kernel version, major revision, minor\nrevision and patch number).\nThe /boot directory includes the following types of files, with names corresponding with the\nrespective kernel version:\nconfig-4.9.0-9-amd64\nConfiguration settings for the kernel such as options and modules that were compiled along\nwith the kernel.\ninitrd.img-4.9.0-9-amd64\nInitial RAM disk image that helps in the startup process by loading a temporary root filesystem\ninto memory.\nSystem-map-4.9.0-9-amd64\nThe System-map  (on some systems it will be named System.map ) file contains memory\naddress locations for kernel symbol names. Each time a kernel is rebuilt the file’s contents will\nchange as the memory locations could be different. The kernel uses this file to lookup memory\naddress locations for a particular kernel symbol, or vice-versa.\nvmlinuz-4.9.0-9-amd64\nThe kernel proper in a self-extracting, space-saving, compressed format (hence the z in\nvmlinuz; vm stands for virtual memory and started to be used when the kernel first got support\nfor virtual memory).\ngrub\nConfiguration directory for the grub2 bootloader.\nTIPBecause it is a critical feature of the operating system, more than one kernel and its\nassociated files are kept in /boot in case the default one becomes faulty and we have\nto fall back on a previous version to — at least — be able to boot the system up and fix\nit.\nThe /proc Directory\nThe /proc directory is one of the so-called virtual or pseudo filesystems since its contents are not\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n288     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 298,
        "Contenuto": "written to disk, but loaded in memory. It is dynamically populated every time the computer boots\nup and constantly reflects the current state of the system. /proc includes information about:\n•Running processes\n•Kernel configuration\n•System hardware\nBesides all the data concerning processes that we will see in the next lesson, this directory also\nstores files with information about the system’s hardware and the kernel’s configuration settings.\nSome of these files include:\n/proc/cpuinfo\nIt stores information about the system’s CPU:\n$ cat /proc/cpuinfo\nprocessor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 158\nmodel name  : Intel(R) Core(TM) i7-8700K CPU @ 3.70GHz\nstepping    : 10\ncpu MHz     : 3696.000\ncache size  : 12288 KB\n(...)\n/proc/cmdline\nIt stores the strings passed to the kernel on boot:\n$ cat /proc/cmdline\nBOOT_IMAGE=/boot/vmlinuz-4.9.0-9-amd64 root=UUID=5216e1e4-ae0e-441f-b8f5-8061c0034c74 ro\nquiet\n/proc/modules\nIt shows the list of modules loaded into the kernel:\n$ cat /proc/modules\nnls_utf8 16384 1 - Live 0xffffffffc0644000\nisofs 40960 1 - Live 0xffffffffc0635000\nudf 90112 0 - Live 0xffffffffc061e000\ncrc_itu_t 16384 1 udf, Live 0xffffffffc04be000\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     289"
    },
    {
        "Pagina": 299,
        "Contenuto": "fuse 98304 3 - Live 0xffffffffc0605000\nvboxsf 45056 0 - Live 0xffffffffc05f9000 (O)\njoydev 20480 0 - Live 0xffffffffc056e000\nvboxguest 327680 5 vboxsf, Live 0xffffffffc05a8000 (O)\nhid_generic 16384 0 - Live 0xffffffffc0569000\n(...)\nThe /proc/sys  Directory\nThis directory includes kernel configuration settings in files classified into categories per\nsubdirectory:\n$ ls /proc/sys\nabi  debug  dev  fs  kernel  net  user  vm\nMost of these files act like a switch and — therefore — only contain either of two possible values: 0\nor 1 (“on” or “off”). For instance:\n/proc/sys/net/ipv4/ip_forward\nThe value that enables or disables our machine to act as a router (be able to forward packets):\n$ cat /proc/sys/net/ipv4/ip_forward\n0\nThere are some exceptions, though:\n/proc/sys/kernel/pid_max\nThe maximum PID allowed:\n$ cat /proc/sys/kernel/pid_max\n32768\nWARNINGBe extra careful when changing the kernel settings as the wrong value may\nresult in an unstable system.\nHardware Devices\nRemember, in Linux “everything is a file”. This implies that hardware device information as well\nas the kernel’s own configuration settings are all stored in special files that reside in virtual\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n290     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 300,
        "Contenuto": "directories.\nThe /dev Directory\nThe device  directory /dev contains device files (or nodes) for all connected hardware devices.\nThese device files are used as an interface between the devices and the processes using them.\nEach device file falls into one of two categories:\nBlock devices\nAre those in which data is read and written in blocks which can be individually addressed.\nExamples include hard disks (and their partitions, like /dev/sda1 ), USB flash drives, CDs,\nDVDs, etc.\nCharacter devices\nAre those in which data is read and written sequentially one character at a time. Examples\ninclude keyboards, the text console ( /dev/console ), serial ports (such as /dev/ttyS0  and so\non), etc.\nWhen listing device files, make sure you use ls with the -l switch to differentiate between the\ntwo. We can — for instance — check for hard disks and partitions:\n# ls -l /dev/sd *\nbrw-rw---- 1 root disk 8, 0 may 25 17:02 /dev/sda\nbrw-rw---- 1 root disk 8, 1 may 25 17:02 /dev/sda1\nbrw-rw---- 1 root disk 8, 2 may 25 17:02 /dev/sda2\n(...)\nOr for serial terminals (TeleTYpewriter):\n# ls -l /dev/tty *\ncrw-rw-rw- 1 root tty     5,  0 may 25 17:26 /dev/tty\ncrw--w---- 1 root tty     4,  0 may 25 17:26 /dev/tty0\ncrw--w---- 1 root tty     4,  1 may 25 17:26 /dev/tty1\n(...)\nNotice how the first character is b for block devices and c for character devices.\nTIPThe asterisk ( *) is a globbing character than means 0 or more characters. Hence its\nimportance in the ls -l /dev/sd*  and ls -l /dev/tty*  commands above. To\nlearn more about these special characters, refer to the lesson on globbing.\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     291"
    },
    {
        "Pagina": 301,
        "Contenuto": "Furthermore, /dev includes some special files which are quite useful for different programming\npurposes:\n/dev/zero\nIt provides as many null characters as requested.\n/dev/null\nAka bit bucket . It discards all information sent to it.\n/dev/urandom\nIt generates pseudo-random numbers.\nThe /sys Directory\nThe sys filesystem  (sysfs) is mounted on /sys. It was introduced with the arrival of kernel 2.6\nand meant a great improvement on /proc/sys .\nProcesses need to interact with the devices in /dev and so the kernel needs a directory which\ncontains information about these hardware devices. This directory is /sys and its data is orderly\narranged into categories. For instance, to check on the MAC address of your network card (\nenp0s3), you would cat the following file:\n$ cat /sys/class/net/enp0s3/address\n08:00:27:02:b2:74\nMemory and Memory Types\nBasically, for a program to start running, it has to be loaded into memory. By and large, when we\nspeak of memory we refer to Random Access Memory  (RAM) and — when compared to mechanical\nhard disks — it has the advantage of being a lot faster. On the down side, it is volatile (i.e., once the\ncomputer shuts down, the data is gone).\nNotwithstanding the aforementioned — when it comes to memory — we can differentiate two\nmain types in a Linux system:\nPhysical memory\nAlso known as RAM , it comes in the form of chips made up of integrated circuits containing\nmillions of transistors and capacitors. These, in turn, form memory cells (the basic building\nblock of computer memory). Each of these cells has an associated hexadecimal code — a\nmemory address — so that it can be referenced when needed.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n292     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 302,
        "Contenuto": "Swap\nAlso known as swap space , it is the portion of virtual memory that lives on the hard disk and is\nused when there is no more RAM available.\nOn the other hand, there is the concept of virtual memory  which is an abstraction of the total\namount of usable, addressing memory (RAM, but also disk space) as seen by applications.\nfree parses /proc/meminfo  and displays the amount of free and used memory in the system in a\nvery clear manner:\n$ free\n              total        used        free      shared  buff/cache   available\nMem:        4050960     1474960     1482260       96900     1093740     2246372\nSwap:       4192252           0     4192252\nLet us explain the different columns:\ntotal\nTotal amount of physical and swap memory installed.\nused\nAmount of physical and swap memory currently in use.\nfree\nAmount of physical and swap memory currently not in use.\nshared\nAmount of physical memory used — mostly — by tmpfs.\nbuff/cache\nAmount of physical memory currently in use by kernel buffers and the page cache and slabs.\navailable\nEstimate of how much physical memory is available for new processes.\nBy default free shows values in kibibytes, but allows for a variety of switches to display its results\nin different units of measurement. Some of these options include:\n-b\nBytes.\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     293"
    },
    {
        "Pagina": 303,
        "Contenuto": "-m\nMebibytes.\n-g\nGibibytes.\n-h\nHuman-readable format.\n-h is always comfortable to read:\n$ free -h\n              total        used        free      shared  buff/cache   available\nMem:           3,9G        1,4G        1,5G         75M        1,0G        2,2G\nSwap:          4,0G          0B        4,0G\nNOTEA kibibyte (KiB) equals 1,024 bytes while a kilobytes (KB) equals 1000 bytes. The\nsame is respectively true for mebibytes, gibibytes, etc.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n294     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 304,
        "Contenuto": "Guided Exercises\n1.Use the which command to find out the location of the following programs and complete the\ntable:\nProgram which command Path to Executable\n(output)User needs root\nprivileges?\nswapon\nkill\ncut\nusermod\ncron\nps\n2.Where are the following files to be found?\nFile /etc ~\n.bashrc\nbash.bashrc\npasswd\n.profile\nresolv.conf\nsysctl.conf\n3.Explain the meaning of the number elements for kernel file vmlinuz-4.15.0-50-generic \nfound in /boot:\nNumber Element Meaning\n4\n15\n0\n50\n4.What command would you use to list all hard drives and partitions in /dev?\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     295"
    },
    {
        "Pagina": 305,
        "Contenuto": "Linux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n296     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 306,
        "Contenuto": "Explorational Exercises\n1.Device files for hard drives are represented based on the controllers they use — we saw\n/dev/sd*  for drives using SCSI (Small Computer System Interface) and SATA (Serial Advanced\nTechnology Attachment), but\n◦How were old IDE (Integrated Drive Electronics) drives represented?\n◦And modern NVMe (Non-Volatile Memory Express) drives?\n2.Take a look at the file /proc/meminfo . Compare the contents of this file to the output of the\ncommand free and identify which key from /proc/meminfo  correspond to the following\nfields in the output of free:\nfree output /proc/meminfo  field\ntotal\nfree\nshared\nbuff/cache\navailable\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     297"
    },
    {
        "Pagina": 307,
        "Contenuto": "Summary\nIn this lesson you have learned about the location of programs and their configuration files in a\nLinux system. Important facts to remember are:\n•Basically, programs are to be found across a three-level directory structure: /, /usr and\n/usr/local . Each of these levels may contain bin and sbin directories.\n•Configuration files are stored in /etc and ~.\n•Dotfiles are hidden files that start with a dot ( .).\nWe have also discussed the Linux kernel. Important facts are:\n•For Linux, everything is a file.\n•The Linux kernel lives in /boot together with other boot-related files.\n•For processes to start executing, the kernel has to first be loaded into a protected area of\nmemory.\n•The kernel job is that of allocating system resources to processes.\n•The /proc virtual (or pseudo) filesystem stores important kernel and system data in a volatile\nway.\nLikewise, we have explored hardware devices and learned the following:\n•The /dev directory stores special files (aka nodes) for all connected hardware devices: block\ndevices  or character devices . The former transfer data in blocks; the latter, one character at a\ntime.\n•The /dev directory also contains other special files such as /dev/zero , /dev/null  or\n/dev/urandom .\n•The /sys directory stores information about hardware devices arranged into categories.\nFinally, we touched upon memory. We learned:\n•A program runs when it is loaded into memory.\n•What RAM (Random Access Memory) is.\n•What Swap is.\n•How to display the use of memory.\nCommands used in this lesson:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n298     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 308,
        "Contenuto": "cat\nConcatenate/print file content.\nfree\nDisplay amount of free and used memory in the system.\nls\nList directory contents.\nwhich\nShow location of program.\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     299"
    },
    {
        "Pagina": 309,
        "Contenuto": "Answers to Guided Exercises\n1.Use the which command to find out the location of the following programs and complete the\ntable:\nProgram which command Path to Binary\n(output)User needs root\nprivileges?\nswapon which swapon /sbin/swapon Yes\nkill which kill /bin/kill No\ncut which cut /usr/bin/cut No\nusermod which usermod /usr/sbin/usermod Yes\ncron which cron /usr/sbin/cron Yes\nps which ps /bin/ps No\n2.Where are the following files to be found?\nFile /etc ~\n.bashrc No Yes\nbash.bashrc Yes No\npasswd Yes No\n.profile No Yes\nresolv.conf Yes No\nsysctl.conf Yes No\n3.Explain the meaning of the number elements for kernel file vmlinuz-4.15.0-50-generic \nfound in /boot:\nNumber Element Meaning\n4 Kernel version\n15 Major revision\n0 Minor revision\n50 Patch number\n4.What command would you use to list all hard drives and partitions in /dev?\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n300     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 310,
        "Contenuto": "ls /dev/sd*\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     301"
    },
    {
        "Pagina": 311,
        "Contenuto": "Answers to Explorational Exercises\n1.Device files for hard drives are represented based on the controllers they use — we saw\n/dev/sd*  for drives using SCSI (Small Computer System Interface) and SATA (Serial Advanced\nTechnology Attachment), but\n◦How were old IDE (Integrated Drive Electronics) drives represented?\n/dev/hd*\n◦And modern NVMe (Non-Volatile Memory Express) drives?\n/dev/nvme*\n2.Take a look at the file /proc/meminfo . Compare the contents of this file to the output of the\ncommand free and identify which key from /proc/meminfo  correspond to the following\nfields in the output of free:\nfree output /proc/meminfo  field\ntotal MemTotal  / SwapTotal\nfree MemFree / SwapFree\nshared Shmem\nbuff/cache Buffers, Cached and SReclaimable\navailable MemAvailable\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n302     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 312,
        "Contenuto": "4.3 Lesson 2\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 4 The Linux Operating System\nObjective: 4.3 Where Data is Stored\nLesson: 2 of 2\nIntroduction\nAfter exploring programs and their configuration files, in this lesson we will learn how commands\nare executed as processes. Likewise, we will be commenting on the system messaging, the use of\nthe kernel ring buffer and how the arrival of systemd and its journal daemon — \njournald  — changed the ways things had been done so far regarding system logging.\nProcesses\nEvery time a user issues a command, a program is run and one or more processes are generated.\nProcesses exist in a hierarchy. After the kernel is loaded in memory on boot, the first process is\ninitiated which — in turn — starts other processes, which, again, can start other processes. Every\nprocess has a unique identifier ( PID) and parent process identifier ( PPID). These are positive\nintegers that are assigned in sequential order.\nExploring Processes Dynamically: top\nYou can get a dynamic listing of all running processes with the top command:\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     303"
    },
    {
        "Pagina": 313,
        "Contenuto": "$ top\ntop - 11:10:29 up  2:21,  1 user,  load average: 0,11, 0,20, 0,14\nTasks:  73 total,   1 running,  72 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0,0 us,  0,3 sy,  0,0 ni, 99,7 id,  0,0 wa,  0,0 hi,  0,0 si,  0,0 st\nKiB Mem :  1020332 total,   909492 free,    38796 used,    72044 buff/cache\nKiB Swap:  1046524 total,  1046524 free,        0 used.   873264 avail Mem\n   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n   436 carol     20   0   42696   3624   3060 R  0,7  0,4   0:00.30 top\n     4 root      20   0       0      0      0 S  0,3  0,0   0:00.12 kworker/0:0\n   399 root      20   0   95204   6748   5780 S  0,3  0,7   0:00.22 sshd\n     1 root      20   0   56872   6596   5208 S  0,0  0,6   0:01.29 systemd\n     2 root      20   0       0      0      0 S  0,0  0,0   0:00.00 kthreadd\n     3 root      20   0       0      0      0 S  0,0  0,0   0:00.02 ksoftirqd/0\n     5 root       0 -20       0      0      0 S  0,0  0,0   0:00.00 kworker/0:0H\n     6 root      20   0       0      0      0 S  0,0  0,0   0:00.00 kworker/u2:0\n     7 root      20   0       0      0      0 S  0,0  0,0   0:00.08 rcu_sched\n     8 root      20   0       0      0      0 S  0,0  0,0   0:00.00 rcu_bh\n     9 root      rt   0       0      0      0 S  0,0  0,0   0:00.00 migration/0\n    10 root       0 -20       0      0      0 S  0,0  0,0   0:00.00 lru-add-drain\n    (...)\nAs we saw above, top can also give us information about memory and CPU consumption of the\noverall system as well as for each process.\ntop allows the user some interaction.\nBy default, the output is sorted by the percentage of CPU time used by each process in descending\norder. This behavior can be modified by pressing the following keys from within top:\nM\nSort by memory usage.\nN\nSort by process ID number.\nT\nSort by running time.\nP\nSort by percentage of CPU usage.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n304     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 314,
        "Contenuto": "To switch between descending/ascending order just press R.\nTIPA fancier and more user-friendly version of top is htop. Another — perhaps more\nexhaustive — alternative is atop. If not already installed in your system, I encourage\nyou to use your package manager to install them and give them a try.\nA Snapshot of Processes: ps\nAnother very useful command to get information about processes is ps. Whereas top provides\ndynamic information, that of ps is static.\nIf invoked without options, the output of ps is quite discrete and relates only to the processes\nattached to the current shell:\n$ ps\n  PID TTY          TIME CMD\n 2318 pts/0    00:00:00 bash\n 2443 pts/0    00:00:00 ps\nThe displayed information has to do with the process identifier ( PID), the terminal in which the\nprocess is run ( TTY), the CPU time taken by the process ( TIME) and the command which started the\nprocess ( CMD).\nA useful switch for ps is -f which shows the full-format listing:\n$ ps -f\nUID        PID  PPID  C STIME TTY          TIME CMD\ncarol     2318  1682  0 08:38 pts/1    00:00:00 bash\ncarol     2443  2318  0 08:46 pts/1    00:00:00 ps -f\nIn combination with other switches, -f shows the relationship between parent and child\nprocesses:\n$ ps -uf\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\ncarol       2318  0.0  0.1  21336  5140 pts/1    Ss   08:38   0:00 bash\ncarol       2492  0.0  0.0  38304  3332 pts/1    R+   08:51   0:00  \\_ ps -uf\ncarol       1780  0.0  0.1  21440  5412 pts/0    Ss   08:28   0:00 bash\ncarol       2291  0.0  0.7 305352 28736 pts/0    Sl+  08:35   0:00  \\_ emacs index.en.adoc\n-nw\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     305"
    },
    {
        "Pagina": 315,
        "Contenuto": "(...)\nLikewise, ps can show the percentage of memory used when invoked with the -v switch:\n$ ps -v\n  PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND\n 1163 tty2     Ssl+   0:00      1    67 201224 5576  0.1 /usr/lib/gdm3/gdm-x-session (...)\n (...)\nNOTEAnother visually attractive command that shows the hierarchy of processes is\npstree. It ships with all major distributions.\nProcess Information in the /proc Directory\nWe have already seen the /proc filesystem. /proc includes a numbered subdirectory for every\nrunning process in the system (the number is the PID of the process):\ncarol@debian:~# ls /proc\n1    108  13   17   21   27   354  41   665  8    9\n10   109  14   173  22   28   355  42   7    804  915\n103  11   140  18   23   29   356  428  749  810  918\n104  111  148  181  24   3    367  432  75   811\n105  112  149  19   244  349  370  433  768  83\n106  115  15   195  25   350  371  5    797  838\n107  12   16   2    26   353  404  507  798  899\n(...)\nThus, all the information about a particular process is included within its directory. Let us list the\ncontents of the first process — that whose PID is 1 (the output has been truncated for readability):\n# ls /proc/1/\nattr        cmdline          environ  io        mem       ns\nautogroup   comm             exe      limits    mountinfo numa_maps\nauxv        coredump_filter  fd       loginuid  mounts    oom_adj\n...\nYou can check — for instance — the process executable:\n# cat /proc/1/cmdline; echo\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n306     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 316,
        "Contenuto": "/sbin/init\nAs you can see, the binary that started the hierarchy of processes was /sbin/init .\nNOTECommands can be concatenated with the semicolon ( ;). The point in using the\necho command above is to provide a newline. Try and run simply cat\n/proc/1/cmdline  to see the difference.\nThe System Load\nEach process on a system can potentially consume system resources. The so-called system load\ntries to aggregate the overall load of the system into a single numeric indicator. You can see the\ncurrent load with the command uptime:\n$ uptime\n 22:12:54 up 13 days, 20:26,  1 user,  load average: 2.91, 1.59, 0.39\nThe three last digits indicate the system’s load average for the last minute ( 2.91), the last five\nminutes ( 1.59) and the last fifteen minutes ( 0.39), respectively.\nEach of these numbers indicates how many processes were waiting either for CPU resources or\nfor input/output operations to complete. This means that these processes were ready to run if they\nhad received the respective resources.\nSystem Logging and System Messaging\nAs soon as the kernel and the processes start executing and communicating with each other, a lot\nof information is produced. Most of it is sent to files — the so-called log files or, simply, logs.\nWithout logging, searching for an event that happened on a server would give sysadmins many a\nheadache, hence the importance of having a standardized and centralized way of keeping track of\nany system events. Besides, logs are determinant and telling when it comes to troubleshooting and\nsecurity as well as reliable data sources for understanding system statistics and making trend\npredictions.\nLogging with the syslog Daemon\nTraditionally, system messages have been managed by the standard logging facility — syslog — or\nany of its derivatives — syslog-ng or rsyslog. The logging daemon collects messages from other\nservices and programs and stores them in log files, typically under /var/log . However, some\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     307"
    },
    {
        "Pagina": 317,
        "Contenuto": "services take care of their own logs (take — for example — the Apache HTTPD web server).\nLikewise, the Linux kernel uses an in-memory ring buffer for storing its log messages.\nLog Files in /var/log\nBecause logs are data that varies over time, they are normally found in /var/log .\nIf you explore /var/log , you will realize that the names of logs are — to a certain degree — quite\nself-explanatory. Some examples include:\n/var/log/auth.log\nIt stores information about authentication.\n/var/log/kern.log\nIt stores kernel information.\n/var/log/syslog\nIt stores system information.\n/var/log/messages\nIt stores system and application data.\nNOTE The exact name and contents of log files may vary across Linux distributions.\nAccessing Log Files\nWhen exploring log files, remember to be root (if you do not have reading permissions) and use a\npager such as less;\n# less /var/log/messages\nJun  4 18:22:48 debian liblogging-stdlog:  [origin software=\"rsyslogd\" swVersion=\"8.24.0\" x-\npid=\"285\" x-info=\"http://www.rsyslog.com\"] rsyslogd was HUPed\nJun 29 16:57:10 debian kernel: [    0.000000] Linux version 4.9.0-8-amd64 (debian-\nkernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) ) #1 SMP\nDebian 4.9.130-2 (2018-10-27)\nJun 29 16:57:10 debian kernel: [    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-4.9.0-\n8-amd64 root=/dev/sda1 ro quiet\nAlternatively, you can use tail with the -f switch to read the most recent messages of the file\nand dynamically show new lines as they are appended:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n308     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 318,
        "Contenuto": "# tail -f /var/log/messages\nJul  9 18:39:37 debian kernel: [    2.350572] RAPL PMU: hw unit of domain psys 2^-0 Joules\nJul  9 18:39:37 debian kernel: [    2.512802] input: VirtualBox USB Tablet as\n/devices/pci0000:00/0000:00:06.0/usb1/1-1/1-1:1.0/0003:80EE:0021.0001/input/input7\nJul  9 18:39:37 debian kernel: [    2.513861] Adding 1046524k swap on /dev/sda5.  Priority:-\n1 extents:1 across:1046524k FS\nJul  9 18:39:37 debian kernel: [    2.519301] hid-generic 0003:80EE:0021.0001:\ninput,hidraw0: USB HID v1.10 Mouse [VirtualBox USB Tablet] on usb-0000:00:06.0-1/input0\nJul  9 18:39:37 debian kernel: [    2.623947] snd_intel8x0 0000:00:05.0: white list rate for\n1028:0177 is 48000\nJul  9 18:39:37 debian kernel: [    2.914805] IPv6: ADDRCONF(NETDEV_UP): enp0s3: link is not\nready\nJul  9 18:39:39 debian kernel: [    4.937283] e1000: enp0s3 NIC Link is Up 1000 Mbps Full\nDuplex, Flow Control: RX\nJul  9 18:39:39 debian kernel: [    4.938493] IPv6: ADDRCONF(NETDEV_CHANGE): enp0s3: link\nbecomes ready\nJul  9 18:39:40 debian kernel: [    5.315603] random: crng init done\nJul  9 18:39:40 debian kernel: [    5.315608] random: 7 urandom warning(s) missed due to\nratelimiting\nYou will find the output into the following format:\n•Timestamp\n•Hostname from which the message came from\n•Name of program/service that generated the message\n•The PID of the program that generated the message\n•Description of the action that took place\nMost log files are written in plain text; however, a few can contain binary data as is the case with\n/var/log/wtmp  — which stores data relevant to successful logins. You can use the file command\nto determine which is the case:\n$ file /var/log/wtmp\n/var/log/wtmp: dBase III DBT, version number 0, next free block index 8\nThese files are normally read using special commands. last is used to interpret the data in\n/var/log/wtmp :\n$ last\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     309"
    },
    {
        "Pagina": 319,
        "Contenuto": "carol    tty2         :0               Thu May 30 10:53   still logged in\nreboot   system boot  4.9.0-9-amd64    Thu May 30 10:52   still running\ncarol    tty2         :0               Thu May 30 10:47 - crash  (00:05)\nreboot   system boot  4.9.0-9-amd64    Thu May 30 09:11   still running\ncarol    tty2         :0               Tue May 28 08:28 - 14:11  (05:42)\nreboot   system boot  4.9.0-9-amd64    Tue May 28 08:27 - 14:11  (05:43)\ncarol    tty2         :0               Mon May 27 19:40 - 19:52  (00:11)\nreboot   system boot  4.9.0-9-amd64    Mon May 27 19:38 - 19:52  (00:13)\ncarol    tty2         :0               Mon May 27 19:35 - down   (00:03)\nreboot   system boot  4.9.0-9-amd64    Mon May 27 19:34 - 19:38  (00:04)\nNOTESimilar to /var/log/wtmp , /var/log/btmp  stores information about failed login\nattempts and the special command to read its contents is lastb.\nLog Rotation\nLog files can grow a lot over a few weeks or months and take up all free disk space. To tackle this,\nthe utility logrotate  is used. It implements log rotation or cycling which implies actions such as\nmoving log files to a new name, archiving and/or compressing them, sometimes emailing them to\nthe sysadmin and eventually deleting them as they grow old. The conventions used for naming\nthese rotated log files are diverse (adding a suffix with the date, for example); however, simply\nadding a suffix with an integer is commonplace:\n# ls /var/log/apache2/\naccess.log  error.log  error.log.1  error.log.2.gz  other_vhosts_access.log\nNote how error.log.2.gz  has already been compressed with gzip (hence the .gz suffix).\nThe Kernel Ring Buffer\nThe kernel ring buffer is a fixed-size data structure that records kernel boot messages as well as\nany live kernel messages. The function of this buffer — a very important one — is that of logging\nall the kernel messages produced on boot — when syslog is not yet available. The dmesg\ncommand prints the kernel ring buffer (which used to be also stored in /var/log/dmesg ).\nBecause of the extension of the ring buffer, this command is normally used in combination with\nthe text filtering utility grep or a pager such as less. For instance, to search for boot messages:\n$ dmesg | grep boot\n[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-4.9.0-9-amd64 root=UUID=5216e1e4-ae0e-\n441f-b8f5-8061c0034c74 ro quiet\n[    0.000000] smpboot: Allowing 1 CPUs, 0 hotplug CPUs\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n310     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 320,
        "Contenuto": "[    0.000000] Kernel command line: BOOT_IMAGE=/boot/vmlinuz-4.9.0-9-amd64\nroot=UUID=5216e1e4-ae0e-441f-b8f5-8061c0034c74 ro quiet\n[    0.144986] AppArmor: AppArmor disabled by boot time parameter\n(...)\nNOTEAs the kernel ring buffer grows with new messages over time, the oldest ones will\nfade away.\nThe System Journal: systemd-journald\nAs of 2015, systemd replaced SysV Init as a de facto  system and service manager in most major\nLinux distributions. As a consequence, the journal daemon — journald — has become the standard\nlogging component, superseding syslog in most aspects. The data is no longer stored in plain text\nbut in binary form. Thus, the journalctl  utility is necessary to read the logs. On top of that,\njournald is syslog compatible and can be integrated with syslog.\njournalctl  is the utility that is used to read and query systemd’s journal database. If invoked\nwithout options, it prints the entire journal:\n# journalctl\n-- Logs begin at Tue 2019-06-04 17:49:40 CEST, end at Tue 2019-06-04 18:13:10 CEST. --\njun 04 17:49:40 debian systemd-journald[339]: Runtime journal (/run/log/journal/) is 8.0M,\nmax 159.6M, 151.6M free.\njun 04 17:49:40 debian kernel: microcode: microcode updated early to revision 0xcc, date =\n2019-04-01\nJun 04 17:49:40 debian kernel: Linux version 4.9.0-8-amd64 (debian-kernel@lists.debian.org)\n(gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) )\nJun 04 17:49:40 debian kernel: Command line: BOOT_IMAGE=/boot/vmlinuz-4.9.0-8-amd64\nroot=/dev/sda1 ro quiet\n(...)\nHowever, if invoked with the -k or --dmesg switches, it will be equivalent to using the dmesg\ncommand:\n# journalctl -k\n[    0.000000] Linux version 4.9.0-9-amd64 (debian-kernel@lists.debian.org) (gcc version\n6.3.0 20170516 (Debian 6.3.0-18+deb9u1) ) #1 SMP Debian 4.9.168-1+deb9u2 (2019-05-13)\n[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-4.9.0-9-amd64 root=UUID=5216e1e4-ae0e-\n441f-b8f5-8061c0034c74 ro quiet\n(...)\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     311"
    },
    {
        "Pagina": 321,
        "Contenuto": "Other interesting options for journalctl  include:\n-b, --boot\nIt shows boot information.\n-u\nIt shows messages about a specified unit. Roughly, a unit can be defined as any resource\nhandled by systemd. For example journalctl -u apache2.service  is used to read\nmessages about the apache2 web server.\n-f\nIt shows most recent journal messages and keeps printing new entries as they are appended to\nthe journal — much like tail -f.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n312     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 322,
        "Contenuto": "Guided Exercises\n1.Have a look at the following listing of top and answer the following questions:\ncarol@debian:~$ top\ntop - 13:39:16 up 31 min,  1 user,  load average: 0.12, 0.15, 0.10\nTasks:  73 total,   2 running,  71 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  1.1 us,  0.4 sy,  0.0 ni, 98.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  1020332 total,   698700 free,   170664 used,   150968 buff/cache\nKiB Swap:  1046524 total,  1046524 free,        0 used.   710956 avail Mem\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n  605 nobody    20   0 1137620 132424  34256 S  6.3 13.0   1:47.24 ntopng\n  444 www-data  20   0  364780   4132   2572 S  0.3  0.4   0:00.44 apache2\n  734 root      20   0   95212   7004   6036 S  0.3  0.7   0:00.36 sshd\n  887 carol     20   0   46608   3680   3104 R  0.3  0.4   0:00.03 top\n    1 root      20   0   56988   6688   5240 S  0.0  0.7   0:00.42 systemd\n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd\n    3 root      20   0       0      0      0 S  0.0  0.0   0:00.09 ksoftirqd/0\n    4 root      20   0       0      0      0 S  0.0  0.0   0:00.87 kworker/0:0\n(...)\n◦Which processes have been started by the user carol?\n◦What virtual directory of /proc should you visit to search for data regarding the top\ncommand?\n◦What process was run first? How can you tell?\n◦Complete the table specifying in what area of top output the following information is found:\nInformation about … Summary Area Task Area\nMemory\nSwap\nPID\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     313"
    },
    {
        "Pagina": 323,
        "Contenuto": "Information about … Summary Area Task Area\nCPU time\nCommands\n2.What command is used to read the following binary logs?\n◦/var/log/wtmp\n◦/var/log/btmp\n◦/run/log/journal/2a7d9730cd3142f4b15e20d6be631836/system.journal\n3.In combination with grep, what commands would you use to find out the following\ninformation about your Linux system?\n◦When the system was last rebooted ( wtmp)\n◦Which hard disks are installed ( kern.log )\n◦When the last login occurred ( auth.log )\n4.What two commands would you use to have the kernel ring buffer displayed?\n5.Indicate where the following log messages belong:\n◦Jul 10 13:37:39 debian dbus[303]: [system] Successfully activated service\n'org.freedesktop.nm_dispatcher'\n/var/log/auth.log\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n314     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 324,
        "Contenuto": "◦Jul 10 11:23:58 debian kernel: [ 1.923349] usbhid: USB HID core driver\n/var/log/auth.log\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages\n◦Jul 10 14:02:53 debian sudo: pam_unix(sudo:session): session opened for\nuser root by carol(uid=0)\n/var/log/auth.log\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages\n◦Jul 10 11:23:58 debian NetworkManager[322]: <info> [1562750638.8672]\nNetworkManager (version 1.6.2) is starting…\n/var/log/auth.log\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages\n6.Have journalctl  query information about the following units?\nUnit Command\nssh\nnetworking\nrsyslog\ncron\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     315"
    },
    {
        "Pagina": 325,
        "Contenuto": "Explorational Exercises\n1.Reconsider the top output from the guided exercises and answer the following questions:\n◦What two steps would you follow to kill the apache  web server?\n◦In the summary area, how could you display the information about physical memory and\nswap using progress bars?\n◦Now, sort the processes by memory usage:\n◦Now that you have memory information displayed in progress bars and processes sorted by\nmemory usage, save these configurations so that you get them as default next time you use\ntop:\n◦What file stores top’s configuration settings? Where does it live? How can you check for its\nexistence?\n2.Learn about the command exec in Bash. Try to demonstrate its functionality by starting a Bash\nsession, finding the Bash process with ps, then run exec /bin/sh  and search for the process\nwith the same PID again.\n3.Follow these steps to explore kernel events and udev’s dynamic management of devices:\n◦Hotplug a USB drive into your computer. Run dmesg and pay attention to the last lines. What\nis the most recent line?\n◦Bearing in mind the output from the previous command, run ls /dev/sd*  and make sure\nyour USB drive appears in the listing. What is the output?\n◦Now remove the USB drive and run dmesg again. How does the most recent line read?\n◦Run ls /dev/sd*  again and make sure your device disappeared from the listing. What is\nthe output?\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n316     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 326,
        "Contenuto": "Linux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     317"
    },
    {
        "Pagina": 327,
        "Contenuto": "Summary\nIn the context of data storage, the following topics have been discussed in this lesson: process\nmanagement and system logging and messaging.\nRegarding process management, we have learned the following:\n•Programs generate processes and processes exist in a hierarchy.\n•Every process has a unique identifier ( PID) and a parent process identifier ( PPID).\n•top is a very useful command to dynamically and interactively explore the running processes\nof the system.\n•ps can be used to obtain a snapshot of the current running processes in the system.\n•The /proc directory includes directories for every running process in the system named after\ntheir PIDs.\n•The concept of system load average — which is very useful to check on CPU\nutilization/overloading.\nConcerning system logging, we must remember that:\n•A log is a file where system events are recorded. Logs are invaluable when it comes to\ntroubleshooting.\n•Logging has traditionally been handled by special services such as syslog, syslog-ng or rsyslog.\nNevertheless, some programs use their own logging daemons.\n•Because logs are variable data, they are kept in /var and — sometimes — their names can give\nyou a clue about their content ( kern.log , auth.log , etc.)\n•Most logs are written in plain text and can be read with any text editor as long as you have the\nright permissions. However, a few of them are binary and must be read using special\ncommands.\n•To avoid problems with disk space, log rotation  is carried out by the logrotate utility.\n•As for the kernel, it uses a circular data structure — the ring buffer — where boot messages are\nkept (old messages fade away over time).\n•The system and service manager systemd replaced System V init in virtually all distros with\njournald becoming the standard logging service.\n•To read systemd’s journal, the journalctl  utility is needed.\nCommands used in this lesson:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n318     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 328,
        "Contenuto": "cat\nConcatenate/print file content.\ndmesg\nPrint the kernel ring buffer.\necho\nDisplay a line of text or a newline.\nfile\nDetermine file type.\ngrep\nPrint lines matching a pattern.\nlast\nShow a listing of last logged in users.\nless\nDisplay contents of file one page at a time.\nls\nList directory contents.\njournalctl\nQuery the systemd journal.\ntail\nDisplay the last lines of a file.\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     319"
    },
    {
        "Pagina": 329,
        "Contenuto": "Answers to Guided Exercises\n1.Have a look the following listing of top and answer the following questions:\ncarol@debian:~$ top\ntop - 13:39:16 up 31 min,  1 user,  load average: 0.12, 0.15, 0.10\nTasks:  73 total,   2 running,  71 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  1.1 us,  0.4 sy,  0.0 ni, 98.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  1020332 total,   698700 free,   170664 used,   150968 buff/cache\nKiB Swap:  1046524 total,  1046524 free,        0 used.   710956 avail Mem\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n  605 nobody    20   0 1137620 132424  34256 S  6.3 13.0   1:47.24 ntopng\n  444 www-data  20   0  364780   4132   2572 S  0.3  0.4   0:00.44 apache2\n  734 root      20   0   95212   7004   6036 S  0.3  0.7   0:00.36 sshd\n  887 carol     20   0   46608   3680   3104 R  0.3  0.4   0:00.03 top\n    1 root      20   0   56988   6688   5240 S  0.0  0.7   0:00.42 systemd\n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd\n    3 root      20   0       0      0      0 S  0.0  0.0   0:00.09 ksoftirqd/0\n    4 root      20   0       0      0      0 S  0.0  0.0   0:00.87 kworker/0:0\n(...)\n◦Which processes have been started by the user carol?\nAnswer: Only one: top.\n◦What virtual directory of /proc should you visit to search for data regarding the top\ncommand?\nAnswer: /proc/887\n◦What process was run first? How can you tell?\nAnswer: systemd. Because it is the one with PID #1.\n◦Complete the table specifying in what area of top output the following information is found:\nInformation about … Summary Area Task Area\nMemory Yes Yes\nSwap Yes No\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n320     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 330,
        "Contenuto": "Information about … Summary Area Task Area\nPID No Yes\nCPU time Yes Yes\nCommands No Yes\n2.What command is used to read the following binary logs?\n◦/var/log/wtmp\nAnswer: last\n◦/var/log/btmp\nAnswer: lastb\n◦/run/log/journal/2a7d9730cd3142f4b15e20d6be631836/system.journal\nAnswer: journalctl\n3.In combination with grep, what commands would you use to find out the following\ninformation about your Linux system?\n◦When the system was last rebooted ( wtmp)\nAnswer: last\n◦Which hard disk are installed ( kern.log )\nAnswer: less /var/log/kern.log\n◦When the last login occurred ( auth.log )\nAnswer: less /var/log/auth.log\n4.What two commands would you use to have the kernel ring buffer displayed?\ndmesg and journalctl -k  (also journalctl --dmesg ).\n5.Indicate where the following log messages belong:\n◦Jul 10 13:37:39 debian dbus[303]: [system] Successfully activated service\n'org.freedesktop.nm_dispatcher'\n/var/log/auth.log\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     321"
    },
    {
        "Pagina": 331,
        "Contenuto": "/var/log/kern.log\n/var/log/syslog X\n/var/log/messages\n◦Jul 10 11:23:58 debian kernel: [ 1.923349] usbhid: USB HID core driver\n/var/log/auth.log\n/var/log/kern.log X\n/var/log/syslog\n/var/log/messages X\nJul 10 14:02:53 debian sudo: pam_unix(sudo:session): session opened for\nuser root by carol(uid=0)\n/var/log/auth.log X\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages\n◦Jul 10 11:23:58 debian NetworkManager[322]: <info> [1562750638.8672]\nNetworkManager (version 1.6.2) is starting…\n/var/log/auth.log\n/var/log/kern.log\n/var/log/syslog\n/var/log/messages X\n6.Have journalctl  query information about the following units:\nUnit Command\nssh journalctl -u ssh.service\nnetworking journalctl -u networking.service\nrsyslog journalctl -u rsyslog.service\ncron journalctl -u cron.service\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n322     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 332,
        "Contenuto": "Answers to Explorational Exercises\n1.Reconsider the top output from the guided exercises and answer the following questions:\n◦What two steps would you follow to kill the apache  web server?\nFirst, press k; then provide a kill value.\n◦In the summary area, how could you display the information about physical memory and\nswap using progress bars?\nBy pressing m once or twice.\n◦Now, sort the processes by memory usage:\nM\n◦Now that you have memory information displayed in progress bars and processes sorted by\nmemory usage, save these configurations so that you get them as default next time you use\ntop:\nW\n◦What file stores top’s configuration settings? Where does it live? How can you check for its\nexistence?\nThe file is ~/.config/procps/toprc  and lives in the user’s home directory ( ~). Since it is a\nhidden file (it resides in a directory whose name starts with a dot), we can check for its\nexistence with ls -a (list all files). This file can be generated by pressing Shift + W while in\ntop.\n2.Learn about the command exec in Bash. Try to demonstrate its functionality by starting a Bash\nsession, finding the Bash process with ps, then run exec /bin/sh  and search for the process\nwith the same PID again.\nexec replaces a process with another command. In the following example we can see that the\nBash process is replaced by /bin/sh (instead of /bin/sh becoming a child process):\n$ echo $$\n19877\n$ ps auxf | grep 19877 | head -1\ncarol  19877  0.0  0.0   7448  3984 pts/25   Ss   21:17   0:00  \\_ bash\n$ exec /bin/sh\nLinux Essentials (Version 1.6) | 4.3 Where Data is Stored\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     323"
    },
    {
        "Pagina": 333,
        "Contenuto": "sh-5.0$ ps auxf | grep 19877 | head -1\ncarol  19877  0.0  0.0   7448  3896 pts/25   Ss   21:17   0:00  \\_ /bin/sh\n3.Follow these steps to explore kernel events and udev’s dynamic management of devices:\n◦Hotplug a USB drive into your computer. Run dmesg and pay attention to the last lines. What\nis the most recent line?\nYou should get something along the lines of [ 1967.700468] sd 6:0:0:0: [sdb]\nAttached SCSI removable disk .\n◦Bearing in mind the output from the previous command, run ls /dev/sd*  and make sure\nyour USB drive appears in the listing. What is the output?\nDepending on the number of devices connected to your system, you should get something\nlike /dev/sda /dev/sda1 /dev/sdb /dev/sdb1 /dev/sdb2 . In our case, we find our\nUSB drive ( /dev/sdb ) and its two partitions ( /dev/sdb1  and /dev/sdb2 ).\n◦Now remove the USB drive and run dmesg again. How does the most recent line read?\nYou should get something along the lines of [ 2458.881695] usb 1-9: USB\ndisconnect, device number 6 .\n◦Run ls /dev/sd*  again and make sure your device disappeared from the listing. What is\nthe output?\nIn our case, /dev/sda /dev/sda1 .\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n324     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 334,
        "Contenuto": "4.4 Your Computer on the Network\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 4.4\nWeight\n2\nKey knowledge areas\n•Internet, network, routers\n•Querying DNS client configuration\n•Querying network configuration\nPartial list of the used files, terms and utilities\n•route, ip route show\n•ifconfig , ip addr show\n•netstat, ss\n•/etc/resolv.conf , /etc/hosts\n•IPv4, IPv6\n•ping\n•host\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     325"
    },
    {
        "Pagina": 335,
        "Contenuto": "4.4 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 4 The Linux Operating System\nObjective: 4.4 Your Computer on the Network\nLesson: 1 of 1\nIntroduction\nIn today’s world, computing devices of any kind exchange information through networks. At the\nvery heart of the concept of computer networks are the physical connections between a device\nand its peer(s). These connections are called links , and they are the most basic connection between\ntwo different devices. Links can be established through various media, such as copper cables,\noptical fibres, radio waves or lasers.\nEach link is connected with an interface of a device. Each device can have multiple interfaces and\nthus be connected to multiple links. Through these links computers can form a network; a small\ncommunity of devices that can directly connect to each other. There are numerous examples of\nsuch networks in the world. To be able to communicate beyond the scope of a link layer network,\ndevices use routers. Think of link layer networks as islands connected by routers which connect\nthe islands — just like bridges which information has to travel to reach a device which is part of a\nremote island.\nThis model leads to several different layers of networking:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n326     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 336,
        "Contenuto": "Link Layer\nHandles the communication between directly connected devices.\nNetwork Layer\nHandles routing outside of individual networks and the unique addressing of devices beyond a\nsingle link layer network.\nApplication Layer\nEnables individual programs to connect to each other.\nWhen first invented, computer networks used the same methods of communication as telephones\nin that they were circuit switched. This means that a dedicated and direct link had to be formed\nbetween two nodes for them to be able to communicate. This method worked well, however, it\nrequired all the space on a given link for only two hosts to communicate.\nEventually computer networks moved over to something called packet switching . In this method\nthe data is grouped up with a header, which contains information about where the information is\ncoming from and where it’s going to. The actual content information is contained in this frame\nand sent over the link to the recipient indicated in the frame’s header. This allows for multiple\ndevices to share a single link and communicate almost simultaneously.\nLink Layer Networking\nThe job of any packet is to carry information from the source to its destination through a link\nconnecting both devices. These devices need a way to identify themselves to each other. This is the\npurpose of a link layer address . In an ethernet network, Media Access Control Addresses  (MAC) are\nused to identify individual devices. A MAC address consists of 48 bits. They are not necessarily\nglobally unique and cannot be used to address peers outside of the current link. Thus these\naddresses can not be used to route packets to another links. The recipient of a packet checks\nwhether the destination address matches its own link layer and, if it does, processes the packet.\nOtherwise the packet is dropped. The exception to this rule is broadcast packets  (a packet sent to\neveryone in a given local network) which are always accepted.\nThe command ip link show  displays a list of all the available network interfaces and their link\nlayer addresses as well as some other information about the maximum packet size:\n$ ip link show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group\ndefault qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     327"
    },
    {
        "Pagina": 337,
        "Contenuto": "group default qlen 1000\n    link/ether 00:0c:29:33:3b:25 brd ff:ff:ff:ff:ff:ff\nThe above output shows that the device has two interfaces, lo and ens33. lo is the loopback\ndevice  and has the MAC address 00:00:00:00:00:00  while ens33 is an ethernet interface and\nhas the MAC address 00:0c:29:33:3b:25 .\nIPv4 Networking\nTo visit websites such as Google or Twitter, to check emails or to allow businesses to connect to\neach other, packets need to be able to roam from one link layer network to another. Often, these\nnetworks are connected just indirectly, with several intermediate link layer networks which\npackets have to cross to reach their actual destination.\nThe link layer addresses of a network interface cannot be used outside that specific link layer\nnetwork. Since this address has no significance to devices in other link layer networks, a form of\nglobally unique addresses are needed in order to implement routing. This addressing scheme,\nalong with the overall concept of routing, is implemented by the Internet Protocol  (IP).\nNOTEA protocol  is a set of procedures of doing something so that all parties following the\nprotocol are compatible to each other. A protocol can be seen as the definition of a\nstandard. In computing, the Internet Protocol is a standard agreed upon by\neveryone so that different devices produced by different manufacturers can all\ncommunicate with each other.\nIPv4 Addresses\nIP addresses, like MAC addresses, are a way to indicate where a data packet comes from and\nwhere it is going to. IPv4 was the original protocol. IPv4 addresses are 32 bits wide giving a\ntheoretical maximum number of 4,294,967,296 addresses. However, the number of those\naddresses useable by devices is much smaller as some ranges are reserved for special use cases\nsuch as broadcast addresses (which are used to reach all participants of a specific network),\nmulticast addresses (similar to broadcast addresses, but a device must tune in like a radio) or\nthose reserved for private use.\nIn their human readable format IPv4 addresses are denoted as four digits separated by a dot. Each\ndigit can range from 0 to 255. For example, take the following IP address:\n192.168.0.1\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n328     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 338,
        "Contenuto": "Technically, each of these digits represents eight individual bits. Thus this address could also be\nwritten like this:\n11000000.10101000.00000000.00000001\nIn practice the decimal notation as seen above is used. However, the bitwise representation is still\nimportant to understand subnetting.\nIPv4 Subnets\nIn order to support routing, IP addresses can be split into two parts: the network and host\nportions. The network portion identifies the network that the device is on and is used to route\npackets to that network. The host portion is used to specifically identify a given device on a\nnetwork and to hand the packet over to its specific recipient once it has reached its link layer\nnetwork.\nIP addresses can be broken into subnet and host parts at any point. The so-called subnet mask \ndefines where this split happens. Let’s reconsider the binary representation of the IP address from\nthe former example:\n11000000.10101000.00000000.00000001\nNow for this IP address, the subnet mask sets each bit which belongs to the network part to 1 and\neach bit that belongs to the host part to 0:\n11111111.11111111.11111111.00000000\nIn practice the netmask is written in the decimal notation:\n255.255.255.0\nThis means that this network ranges from 192.168.0.0  to 192.168.0.255 . Note that the first\nthree numbers, which have all bits set in the net mask, stay unchanged in the IP addresses.\nFinally, there is an alternative notation for the subnet mask, which is called Classless Inter-Domain\nRouting  (CIDR). This notation just indicates how many bits are set in the subnet mask and adds\nthis number to the IP address. In the example, 24 out of 32 bits are set to 1 in the subnet mask.\nThis can be expressed in CIDR notation as 192.168.0.1/24\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     329"
    },
    {
        "Pagina": 339,
        "Contenuto": "Private IPv4 Addreses\nAs mentioned before, certain sections of the IPv4 address space are reserved for special use cases.\nOne of these use cases are private address assignments. The following subnets are reserved for\nprivate addressing:\n•10.0.0.0/8\n•172.16.0.0/12\n•192.168.0.0/16\nAddresses out of these subnets can be used by anyone. However, these subnets can not be routed\non the public internet as they are potentially used by numerous networks at the same time.\nToday, most networks use these internal addresses. They allow internal communication without\nthe need of any external address assignment. Most internet connections today just come with a\nsingle external IPv4 address. Routers map all the internal addresses to that single external IP\naddress when forwarding packets to the internet. This is called Network Address Translation \n(NAT). The special case of NAT where a router maps internal addresses to a single external IP\naddress is sometimes call masquerading . This allows any device on the inside network to establish\nnew connections with any global IP address on the internet.\nNOTEWith masquerading, the internal devices can not be referenced from the internet\nsince they do not have a globally valid address. However, this is not a security\nfeature. Even when using masquerading, a firewall is still needed.\nIPv4 Address Configuration\nThere are two main ways to configure IPv4 addresses on a computer. Either by assigning\naddresses manually or by using the Dynamic Host Configuration Protocol  (DHCP) for automatic\nconfiguration.\nWhen using DHCP, a central server controls which addresses are handed out to which devices.\nThe server can also supply devices with other information about the network such as the IP\naddresses of DNS servers, the IP address of the default router or, in the case of more complicated\nsetups, to start an operating system from the network. DHCP is enabled by default on many\nsystems, therefore you will likely already have an IP address when you are connected to a\nnetwork.\nIP addresses can also be manually added to an interface using the command ip addr add . Here,\nwe add the address 192.168.0.5  to the interface ens33. The network uses the netmask\n255.255.255.0  which equals /24 in CIDR notation:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n330     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 340,
        "Contenuto": "$ sudo ip addr add 192.168.0.5/255.255.255.0 dev ens33\nNow we can verify that the address was added using the ip addr show  command:\n$ ip addr show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n25: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen\n1000\n    link/ether 00:0c:29:33:3b:25 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.5/24 192.168.0.255 scope global ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::010c:29ff:fe33:3b25/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\nThe above output shows both the lo interface and the ens33 interface with its address assigned\nwith the command above.\nTo verify the reachability of a device, the ping command can be used. It sends a special type of\nmessage called an echo request  in which the sender asks the recipient for a response. If the\nconnection between the two devices can be successfully established, the recipient will send back\nan echo reply, thus verifying the connection:\n$ ping -c 3 192.168.0.1\nPING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.\n64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=2.16 ms\n64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=1.85 ms\n64 bytes from 192.168.0.1: icmp_seq=3 ttl=64 time=3.41 ms\n--- 192.168.0.1 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 5ms\nrtt min/avg/max/mdev = 1.849/2.473/3.410/0.674 ms\nThe -c 3 parameter makes ping stop after sending three echo requests. Otherwise, ping\ncontinues to run forever and has to be stopped by pressing Ctrl + C.\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     331"
    },
    {
        "Pagina": 341,
        "Contenuto": "IPv4 Routing\nRouting is the process in which a packet gets from the source network to the destination network.\nEach device maintains a routing table which contains information about which IP network can be\ndirectly reached through the device’s attachment to link layer networks and which IP network can\nbe reached by passing packets on to a router. Finally, a default route  defines a router which\nreceives all packets which did not match any other route.\nWhen establishing a connection, the device looks up the target’s IP address in its routing table. If\nan entry matches the address, the packet is either sent to the respective link layer network or\npassed on to the router indicated in the routing table.\nRouters themselves maintain routing tables, too. When receiving a packet, a router also looks up\nthe destination address in its own routing table and sends the packet on to the next router. This is\nrepeated until the packet arrives at the router on the destination network. Each router involved in\nthis journey is called a hop. This last router finds a direct connected link for the target address in\nits routing table and sends the packets to its target interface.\nMost home networks only have one way out, the singular router that came from the internet\nservice provider  (ISP). In this case a device just forwards all packets that aren’t for the internal\nnetwork directly to the home router which will then send it to the provider’s router for further\nforwarding. This is an example of the default route.\nThe command ip route show  lists the current IPv4 routing table:\n$ ip route show\n127.0.0.0/8 via 127.0.0.1 dev lo0\n192.168.0.0/24 dev ens33 scope link\nTo add a default route, all that’s needed is the internal address of the router that’s going to be the\ndefault gateway. If, for example, the router has the address 192.168.0.1 , then the following\ncommand sets it up as a default route:\n$ sudo ip route add default via 192.168.0.1\nTo verify, run ip route show  again:\n$ ip route show\ndefault via 192.168.0.1 dev ens33\n127.0.0.0/8 via 127.0.0.1 dev lo0\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n332     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 342,
        "Contenuto": "192.168.0.0/24 dev ens33 scope link\nIPv6 Networking\nIPv6 was designed to deal with the shortcomings of IPv4, mainly the lack of addresses as more and\nmore devices were being brought online. However, IPv6 also includes other features such as new\nprotocols for automatic network configuration. Instead of 32 bits per address IPv6 uses 128. This\nallows for approximately 2128\n addresses. However, like IPv4, the number of globally unique usable\naddresses is a lot smaller due to sections of the allocation being reserved for other uses. This large\nnumber of addresses means there are more than enough public addresses for every device\ncurrently connected to the internet and for many more to come, thus reducing the need for\nmasquerading and its issues such as the delay during translation and the impossibility to directly\nconnect to masqueraded devices.\nIPv6 Addresses\nWritten down, the addresses use 8 groups of 4 hexadecimal digits each separated by a colon:\n2001:0db8:0000:abcd:0000:0000:0000:7334\nNOTEHexadecimal digits range from 0 to f, so each digit can contain one of 16 different\nvalues.\nTo make it easier leading zeros from each group can be removed when written down however\neach group must contain at least one digit:\n2001:db8:0:abcd:0:0:0:7334\nWhere multiple groups containing only zeros follow directly after each other they may be entirely\nreplaced by '::':\n2001:db8:0:abcd::7334\nHowever, this can only happen once in each address.\nIPv6 Prefix\nThe first 64 bits of an IPv6 address are known as the routing prefix . The prefix is used by routers to\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     333"
    },
    {
        "Pagina": 343,
        "Contenuto": "determine which network a device belongs to and therefore which path the data needs to be sent\non. Subnetting always happens within the prefix. ISPs usually hand out /48 or /58 prefixes to their\ncustomers, leaving them 16 or 8 bits for their internal subnetting.\nThere are three major prefix types in IPv6:\nGlobal Unique Address\nWherein the prefix is assigned from the blocks reserved for global addresses. These addresses\nware valid in the entire internet.\nUnique Local Address\nMay not be routed in the internet. They may, however, be routed internally within an\norganization. These addresses are used within a network to ensure the devices still have an\naddress even when there is no internet connection. They are the equivalent of the private\naddress ranges from IPv4. The first 8 bits are always fc or fd, followed by 40 randomly\ngenerated bits.\nLink Local Address\nAre only valid on a particular link. Every IPv6 capable network interface has one such address,\nstarting with fe80. These addresses are used internally by IPv6 to request additional addresses\nusing automatic configuration and to find other computers on the network using the Neighbor\nDiscovery protocol.\nIPv6 Interface Identifier\nWhile the prefix determines in which network a device resides, the interface identifier is used to\nenumerate the devices within a network. The last 64 bits in an IPv6 address form the interface\nidentifier, just like the last bits of an IPv4 address.\nWhen an IPv6 address is assigned manually, the interface identifier is set as part of the address.\nWhen using automatic address configuration, the interface identifier is either chosen randomly or\nderived from the device’s link layer address. This makes a variation of the link layer address\nappear within the IPv6 address.\nIPv6 Address Configuration\nLike IPv4, IPv6 address can be either assigned manually or automatically. However, IPv6 has two\ndifferent types of automated configuration, DHCPv6 and Stateless Address Autoconfiguration \n(SLAAC).\nSLAAC is the easier of the two automated methods and built right into the IPv6 standard. The\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n334     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 344,
        "Contenuto": "messages use the new Neighbor Discovery Protocol  which allows devices to find each other and\nrequest information regarding a network. This information is sent by routers and can contain\nIPv6 prefixes which the devices may use by combining them with an interface identifier of their\nchoice, as long as the resulting address it not yet in use. The devices do not provide feedback to the\nrouter about the actual addresses they have created.\nDHCPv6, on the other hand, is the updated DHCP made to work with the changes of IPv6. It allows\nfor finer control over the information handed out to clients, like allowing for the same address to\nbe handed out to the same client every time, and sending out more options to the client than\nSLAAC. With DHCPv6, clients need to get the explicit consent of a DHCP server in order to use an\naddress.\nThe method to manually assign an IPv6 address to an interface is the same as with IPv4:\n$ sudo ip addr add 2001:db8:0:abcd:0:0:0:7334/64 dev ens33\nTo verify the assignment has worked the same ip addr show  command is used:\n$ ip addr show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n25: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen\n1000\n    link/ether 00:0c:29:33:3b:25 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.5/24 192.168.0.255 scope global ens33\n       valid_lft forever preferred_lft forever\n    inet6 fe80::010c:29ff:fe33:3b25/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:0:abcd::7334/64 scope global\n       valid_lft forever preferred_lft forever\nHere we also see the link-local address fe80::010c:29ff:fe33:3b25/64 .\nLike IPv4, the ping command can also be used to confirm the reachability of devices through\nIPv6:\n$ ping 2001:db8:0:abcd::1\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     335"
    },
    {
        "Pagina": 345,
        "Contenuto": "PING 2001:db8:0:abcd::1(2001:db8:0:abcd::1) 56 data bytes\n64 bytes from 2001:db8:0:abcd::1: icmp_seq=1 ttl=64 time=0.030 ms\n64 bytes from 2001:db8:0:abcd::1: icmp_seq=2 ttl=64 time=0.040 ms\n64 bytes from 2001:db8:0:abcd::1: icmp_seq=3 ttl=64 time=0.072 ms\n--- 2001:db8:0:abcd::1 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 43ms\nrtt min/avg/max/mdev = 0.030/0.047/0.072/0.018 ms\nNOTEOn some Linux systems, ping does not support IPv6. These systems provide a\ndedicated ping6 command instead.\nTo verify the link-local address again use ping again. But since all interfaces use the fe80::/64 \nprefix, the correct interface has to be specified along with the address:\n$ ping6 -c 1 fe80::010c:29ff:fe33:3b25%ens33\nPING fe80::010c:29ff:fe33:3b25(fe80::010c:29ff:fe33:3b25) 56 data bytes\n64 bytes from fe80::010c:29ff:fe33:3b25%ens33: icmp_seq=1 ttl=64 time=0.049 ms\n--- fe80::010c:29ff:fe33:3b25 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.049/0.049/0.049/0.000 ms\nDNS\nIP addresses are difficult to remember and don’t exactly have a high coolness factor if you’re\ntrying to market a service or product. This is where the Domain Name System  comes into play. In\nits simplest form DNS is a distributed phone book that maps friendly rememberable domain\nnames such as example.com  to IP addresses. When, for example, a user navigates to a website,\nthey enter the DNS hostname as part of the URL. The web browser then sends the DNS name to\nwhichever DNS resolver has been configured. That DNS resolver will in turn find out the address\nthat correlates to the domain. The resolver then replies with that address and the web browser\ntries to reach the web server at that IP address.\nThe resolvers that Linux uses to look up DNS data are configured in the /etc/resolv.conf \nconfiguration file:\n$ cat /etc/resolv.conf\nsearch lpi\nnameserver 192.168.0.1\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n336     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 346,
        "Contenuto": "When the resolver performs a name lookup, it first checks the /etc/hosts  file to see if it contains\nan address for the requested name. If it does, it returns that address and does not contact the DNS.\nThis allows network administrators to provide name resolution without having to go through the\neffort of configuration a complete DNS server. Each line in that file contains one IP address\nfollowed by one or more names:\n127.0.0.1          localhost.localdomain   localhost\n::1                localhost.localdomain   localhost\n192.168.0.10       server\n2001:db8:0:abcd::f server\nTo perform a lookup in the DNS, use the command host:\n$ host learning.lpi.org\nlearning.lpi.org has address 208.94.166.198\nMore detailed information can be retrieved using the command dig:\n$ dig learning.lpi.org\n; <<>> DiG 9.14.3 <<>> learning.lpi.org\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 21525\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 2ac55879b1adef30a93013705d3306d2128571347df8eadf (bad)\n;; QUESTION SECTION:\n;learning.lpi.org.      IN  A\n;; ANSWER SECTION:\nlearning.lpi.org.   550 IN  A   208.94.166.198\n;; Query time: 3 msec\n;; SERVER: 192.168.0.1#53(192.168.0.1)\n;; WHEN: Sat Jul 20 14:20:21 EST 2019\n;; MSG SIZE  rcvd: 89\nHere we also see the name of the DNS record types, in this case A for IPv4.\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     337"
    },
    {
        "Pagina": 347,
        "Contenuto": "Sockets\nA socket  is a communication endpoint for two programs talking to each other. If the socket is\nconnected over a network, the programs can run on different devices, such as a web browser\nrunning on a user’s laptop and a web server running in a company’s data center.\nThere are three main types of sockets:\nUnix Sockets\nWhich connect processes running on the same device.\nUDP (User Datagram Protocol) Sockets\nWhich connect applications using a protocol which is fast but not resilient.\nTCP (Transmission Control Protocol) Sockets\nWhich are more reliable than UDP sockets and, for example, confirm the receipt of data.\nUnix sockets can only connect applications running on the same device. TCP and UDP sockets\nhowever can connect over a network. TCP allows for a stream of data that always arrives in the\nexact order it was sent. UDP is more fire and forget; the packet is sent but its delivery at the other\nend is not guaranteed. UDP does however lack the overhead of TCP, making it perfect for low\nlatency applications such as online video games.\nTCP and UDP both use ports to address multiple sockets on the same IP address. While the source\nport for a connection is usually random, target ports are standardized for a specific service. HTTP\nis, for example, usually hosted at port 80, HTTPS is run on port 443. SSH, a protocol to securely log\ninto a remote Linux system, listens on port 22.\nThe ss command allows an administrator to investigate all of the sockets on a Linux computer. It\nshows everything from the source address, destination address and type. One of its best features is\nthe use of filters so a user can monitor the sockets in whatever connection state they would like.\nss can be run with a set of options as well as a filter expression to limit the information shown.\nWhen executed without any options, the command shows a list of all established sockets. Using\nthe -p option includes information on the process using each socket. The –s option shows a\nsummary of sockets. There are many more options available for this tool but the last set of major\nones are -4 and -6 for narrowing down the IP protocol to either IPv4 or IPv6 respectively, -t and\n-u allow the administrator to select TCP or UDP sockets and -l to show only socket which listen\nfor new connections.\nThe following command, for example, lists all TCP sockets currently in use:\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n338     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 348,
        "Contenuto": "$ ss -t\nState       Recv-Q  Send-Q    Local Address:Port      Peer Address:Port\nESTAB       0       0           192.168.0.5:49412      192.168.0.1:https\nESTAB       0       0           192.168.0.5:37616      192.168.0.1:https\nESTAB       0       0           192.168.0.5:40114      192.168.0.1:https\nESTAB       0       0           192.168.0.5:54948      192.168.0.1:imap\n...\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     339"
    },
    {
        "Pagina": 349,
        "Contenuto": "Guided Exercises\n1.A network engineer is asked to assign two IP addresses to the ens33 interface of a host, one\nIPv4 address ( 192.168.10.10/24 ) and one IPv6 address\n(2001:0:0:abcd:0:8a2e:0370:7334/64 ). What commands must they enter to achieve this?\n2.Which addresses from the list below are private?\n192.168.10.1\n120.56.78.35\n172.16.57.47\n10.100.49.162\n200.120.42.6\n3.What entry would you add into the hosts file to assign 192.168.0.15  to example.com ?\n4.What effect would the following command have?\nsudo ip -6 route add default via 2001:db8:0:abcd::1\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n340     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 350,
        "Contenuto": "Explorational Exercises\n1.Name the DNS record type used to serve the following requests:\n◦Textual data\n◦Reverse IP address lookup\n◦A domain that has no address of its own and relies on another domain for this information\n◦Mail Server\n2.Linux has a feature called bridging, what does it do and how is it useful?\n3.What option needs to be supplied to the ss command in order to view all established UDP\nsockets?\n4.Which command shows a summary of all sockets running on a Linux device?\n5.The following output is generated by the command from the previous exercise. How many TCP\nand UDP sockets are active?\nTotal: 978 (kernel 0)\nTCP:   4 (estab 0, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 0\nTransport Total     IP        IPv6\n*     0         -         -\nRAW   1         0         1\nUDP   7         5         2\nTCP   4         3         1\nINET      12        8         4\nFRAG      0         0         0\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     341"
    },
    {
        "Pagina": 351,
        "Contenuto": "Summary\nThis topic covers networking your Linux computer. First we learned about the various levels of\nnetworking:\n•The link layer which connects devices directly.\n•The networking layer which provides routing between networks and a global address space.\n•The application layer where applications connect to each other.\nWe have seen how IPv4 and IPv6 are used to address individual computers, and how TCP and UDP\nenumerate sockets used by applications to connect to each other. We also learned how DNS is\nused to resolve names to IP addresses.\nCommands used in the exercises:\ndig\nQuery DNS information and provide verbose information about the DNS queries and\nresponses.\nhost\nQuery DNS information and provide condensed output.\nip\nConfigure networking on Linux, including network interfaces, addresses and routing.\nping\nTest the connectivity to a remote device.\nss\nShow information regarding sockets.\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n342     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 352,
        "Contenuto": "Answers to Guided Exercises\n1.A network engineer is asked to assign two IP addresses to the ens33 interface of a host, one\nIPv4 address ( 192.168.10.10/24 ) and one IPv6 address\n(2001:0:0:abcd:0:8a2e:0370:7334/64 ). What commands must they enter to achieve this?\nsudo ip addr add 192.168.10.10/24 dev ens33\nsudo ip addr add 2001:0:0:abcd:0:8a2e:0370:7334/64 dev ens33\n2.Which addresses from the list below are private?\n192.168.10.1 X\n120.56.78.35\n172.16.57.47 X\n10.100.49.162 X\n200.120.42.6\n3.What entry would you add into the hosts file to assign 192.168.0.15  to example.com ?\n192.168.0.15  example.com\n4.What effect would the following command have?\nsudo ip -6 route add default via 2001:db8:0:abcd::1\nIt would add a default route into the table that sends all IPv6 traffic to the router with an\ninternal address of 2001:db8:0:abcd::1 .\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     343"
    },
    {
        "Pagina": 353,
        "Contenuto": "Answers to Explorational Exercises\n1.Name the DNS record type used to serve the following requests:\n◦Textual data\nTXT\n◦Reverse IP address lookup\nPTR\n◦A domain that has no address of its own and relies on another domain for this information\nCNAME\n◦Mail Server\nMX\n2.Linux has a feature called bridging, what does it do and how is it useful?\nA bridge connects multiple networking interfaces. All interfaces connected to a bridge can\ncommunicate as if they were connected to the same link layer network: All devices use IP\naddresses from the same subnet and do not require a router in order to connect to each other.\n3.What option needs to be supplied to the ss command in order to view all established UDP\nsockets?\nThe -u option shows all established UDP sockets.\n4.Which command shows a summary of all sockets running on a Linux device?\nThe ss -s command shows a summary of all sockets\n5.The following output is generated by the command from the previous exercise. How many TCP\nand UDP sockets are active?\nTotal: 978 (kernel 0)\nTCP:   4 (estab 0, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 0\nTransport Total     IP        IPv6\n*     0         -         -\nRAW   1         0         1\nLinux Essentials (Version 1.6) | Topic 4: The Linux Operating System\n344     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 354,
        "Contenuto": "UDP   7         5         2\nTCP   4         3         1\nINET      12        8         4\nFRAG      0         0         0\n11 TCP and UDP sockets are active.\nLinux Essentials (Version 1.6) | 4.4 Your Computer on the Network\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     345"
    },
    {
        "Pagina": 355,
        "Contenuto": "Topic 5: Security and File Permissions\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n346     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 356,
        "Contenuto": "5.1 Basic Security and Identifying User Types\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 5.1\nWeight\n2\nKey knowledge areas\n•Root and standard users\n•System users\nPartial list of the used files, terms and utilities\n•/etc/passwd , /etc/shadow , /etc/group\n•id, last, who, w\n•sudo, su\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     347"
    },
    {
        "Pagina": 357,
        "Contenuto": "5.1 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 5 Security and File Permissions\nObjective: 5.1 Basic Security and Identifying User Types\nLesson: 1 of 1\nIntroduction\nThis lesson will focus on the basic terminology of the accounts, access controls and security of\nlocal Linux systems, the command line interface (CLI) tools in a Linux system for basic security\naccess controls and the basic files to support user and group accounts, including those used for\nelementary privilege escalation.\nBasic security in Linux systems is modeled after Unix access controls that, despite being nearly\nfifty years-old, are quite effective in comparison to some popular consumer operating systems of\nmuch newer lineage. Even some other, popular, Unix-based operating systems tend to “take\nliberties” that are focused on “ease-of-access,” while Linux does not.\nModern Linux desktop environments and interfaces simplify the creation and management of\nusers and often automate the assignment of access controls when a user logs in — e.g., to the\ndisplay, audio and other services — requiring virtually no manual system administrator\nintervention. However, it is important to understand the basic concepts of an underlying Linux\noperating system.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n348     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 358,
        "Contenuto": "Accounts\nSecurity involves many concepts, one of the most common being the general concept of access\ncontrols. Before one can tackle file access controls such as ownership and permissions, one must\nunderstand the basic concepts of Linux user accounts , which are broken out into several types.\nEvery user on a Linux system has an associated account which besides login information (like\nusername and password) also defines how, and where, the user can interact with the system.\nPrivileges and access controls define the “boundaries” within which each user can operate.\nIdentifiers (UIDs/GIDs)\nThe User  and Group Identifiers  (UIDs/GIDs) are the basic, enumerated references to accounts. Early\nimplementations were limited 16-bit (values 0 to 65535) integers, but 21st century systems support\n64-bit UIDs and GIDs. Users and groups are enumerated independently, so the same ID can stand\nfor both a user and group.\nEvery user has not only an UID, but also a primary GID . The primary GID for a user can be unique\nto that user alone, and may end up not being used by any other users. However, this group could\nalso be a group shared by numerous users. In addition to these primary groups, each user can be\nmember of other groups, too.\nBy default on Linux systems, every user is assigned to a group with the same name as their\nusername, and same GID as his UID. E.g., create a new user named newuser and, by default, its\ndefault group is newuser as well.\nThe Superuser Account\nOn Linux the superuser account is root, which always has UID 0. The superuser is sometimes\ncalled the system administrator , and has unlimited access and control over the system, including\nother users.\nThe default group for the superuser has the GID 0 and is also named root. The home directory for\nthe superuser is a dedicated, top level directory, /root, only accessible by the root user himself.\nStandard User Accounts\nAll accounts other than root are technically regular user accounts, but on a Linux system the\ncolloquial term user account  often means a “regular” (unprivileged) user account. They typically\nhave the following properties, with select exceptions:\n•UIDs starting at 1000 (4 digits), although some legacy systems may start at 500.\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     349"
    },
    {
        "Pagina": 359,
        "Contenuto": "•A defined home directory, usually a subdirectory of /home, depending on the site-local\nconfiguration.\n•A defined login shell. In Linux the default shell is usually the Bourne Again Shell  (/bin/bash ),\nthough others may be available.\nIf a user account does not have a valid shell in their attributes, the user will not be able to open an\ninteractive shell. Usually /sbin/nologin  is used as an invalid shell. This may be purposeful, if the\nuser will only be authenticated for services other than console or SSH access, e.g., Secure FTP\n(sftp) access only.\nNOTETo avoid confusion, the term user account  will only apply to standard or regular\nuser accounts going forward. E.g., system account  will be used to explain a Linux\nuser account that is of the system user account type.\nSystem Accounts\nSystem accounts  are typically pre-created at system installation time. These are for facilities,\nprograms and services that will not run as the superuser. In an ideal world, these would all be\noperating system facilities.\nThe system accounts vary, but their attributes include:\n•UIDs are usually under 100 (2-digit) or 500-1000 (3-digit).\n•Either no dedicated home directory or a directory that is usually not under /home.\n•No valid login shell (typically /sbin/nologin ), with rare exceptions.\nMost system accounts on Linux will never login, and do not need a defined shell in their\nattributes. Many processes owned and executed by system accounts are forked into their own\nenvironment by the system management, running with the specified, system account. These\naccounts usually have limited or, more often than not, no privileges.\nNOTEFrom the standpoint of the LPI Linux Essentials, system accounts are UIDs <1000,\nwith 2 or 3 digit UIDs (and GIDs).\nIn general, the system accounts should not have a valid login shell. The opposite would be a\nsecurity issue in most cases.\nService Accounts\nService accounts  are typically created when services are installed and configured. Similar to\nsystem accounts, these are for facilities, programs and services that will not run as the superuser.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n350     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 360,
        "Contenuto": "In much documentation, system and service accounts are similar, and interchanged often. This\nincludes the location of home directories typically being outside of /home, if defined at all (service\naccounts are often more likely to have one, compared to system accounts), and no valid login\nshell. Although there is no strict definition, the primary difference between system and service\naccounts breaks down to UID/GID.\nSystem account\nUID/GID <100 (2-digit) or <500-1000 (3-digit)\nService account\nUID/GID >1000 (4+ digit), but not a “standard” or “regular” user account, an account for\nservices, with an UID/GID >1000 (4+ digits)\nSome Linux distributions still have pre-reserved service accounts under UID <100, and those could\nbe considered a system account as well, even though they are not created at system installation.\nE.g., on Fedora-based (including Red Hat) Linux distributions, the user for the Apache Web server\nhas UID (and GID) 48, clearly a system account, despite having a home directory (usually at\n/usr/share/httpd  or /var/www/html/ ).\nNOTEFrom the standpoint of the LPI Linux Essentials, system accounts are UIDs <1000,\nand regular user accounts are UIDs >1000. Since the regular user accounts are\n>1000, these UIDs can also include service accounts.\nLogin Shells and Home Directories\nSome accounts have a login shell, while others do not for security purposes as they do not require\ninteractive access. The default login shell on most Linux distributions is the Bourne Again Shell , or\nbash, but other shells may be available, like the C Shell ( csh), Korn shell ( ksh) or Z shell ( zsh), to\nname a few.\nA user can change his login shell using the chsh command. By default the command runs in\ninteractive mode, and displays a prompt asking which shell should be used. The answer should be\nthe full path to the shell binary, like below:\n$ chsh\nChanging the login shell for emma\nEnter the new value, or press ENTER for the default\n    Login Shell [/bin/bash]: /usr/bin/zsh\nYou can also run the command in non-interactive mode, with the -s parameter followed by the\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     351"
    },
    {
        "Pagina": 361,
        "Contenuto": "path to the binary, like so:\n$ chsh -s /usr/bin/zsh\nMost accounts have a defined home directory. On Linux, this is usually the only location where\nthat user account has guaranteed write access, with some exceptions (e.g., temporary file system\nareas). However, some accounts are purposely setup to not have any write access to even their\nown home directory, for security purposes.\nGetting Information About Your Users\nListing basic user information is a common, everyday practice on a Linux system. In some cases,\nusers will need to switch users and raise privilege to complete privileged tasks.\nEven users have the ability to list attributes and access from the command line, using the\ncommands below. Basic information under limited context is not a privileged operation.\nListing the current information of a user at the command line is as simple as a two letter\ncommand, id. The output will vary based on your login ID:\n$ id\nuid=1024(emma) gid=1024(emma) 1024(emma),20(games),groups=10240(netusers),20480(netadmin)\ncontext=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\nIn the preceding listing, the user ( emma) has identifiers which breakdown as follows:\n•1024 = User ID (UID), followed by the username (common name aka login name) in\nparenthesis.\n•1024 = the primary  Group ID (GID), followed by the groupname (common name) in parenthesis.\n•A list of additional GIDs (groupnames) the user also belongs to.\nListing the last time users have logged into the system is done with the command last:\n$ last\nemma     pts/3        ::1              Fri Jun 14 04:28   still logged in\nreboot   system boot  5.0.17-300.fc30. Fri Jun 14 04:03   still running\nreboot   system boot  5.0.17-300.fc30. Wed Jun  5 14:32 - 15:19  (00:46)\nreboot   system boot  5.0.17-300.fc30. Sat May 25 18:27 - 19:11  (00:43)\nreboot   system boot  5.0.16-100.fc28. Sat May 25 16:44 - 17:06  (00:21)\nreboot   system boot  5.0.9-100.fc28.x Sun May 12 14:32 - 14:46  (00:14)\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n352     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 362,
        "Contenuto": "root     tty2                          Fri May 10 21:55 - 21:55  (00:00)\n    ...\nThe information listed in columns may vary, but some notable entries in the preceding listing are:\n•A user ( emma) logged in via the network (pseudo TTY pts/3) and is still logged in.\n•The time of current boot is listed, along with the kernel. In the example above, about 25\nminutes before the user logged in.\n•The superuser ( root) logged in via a virtual console (TTY tty2), briefly, in mid-May.\nA variant of the last command is the lastb command, which lists all the last bad login attempts.\nThe commands who and w list only the active logins on the system:\n$ who\nemma  pts/3        2019-06-14 04:28 (::1)\n$ w\n 05:43:41 up  1:40,  1 user,  load average: 0.25, 0.53, 0.51\nUSER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT\nemma  pts/3     04:28    1:14m  0.04s  0.04s -bash\nBoth commands list some of the same information. For example, one user ( emma) is logged in with\na pseudo TTY device ( pts/3) and the time of login is 04:28.\nThe w command lists more information, including the following:\n•The current time and how long the system has been up\n•How many users are connected\n•The load averages  for the past 1, 5 and 15 minutes\nAnd the additional information for each active user session.\n•Select, total CPU utilization times ( IDLE, JCPU and PCPU)\n•The current process ( -bash). The total CPU utilization time of that process is the last item (\nPCPU).\nBoth commands have further options to list various, additional information.\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     353"
    },
    {
        "Pagina": 363,
        "Contenuto": "Switching Users and Escalating Privilege\nIn an ideal world, users would never need to escalate privilege to complete their tasks. The system\nwould always “just work” and everything would be configured for various access.\nLuckily for us, Linux — out-of-the-box — works like this for most users who are not system\nadministrators, despite always following the least privilege  security model.\nHowever, there are commands that allow for privilege escalation when needed. Two of the most\nimportant ones are su and sudo.\nOn most Linux systems today, the su command is only used for escalating privileges to root,\nwhich is the default user if a username is not specified after the command name. While it can be\nused to switch to another user, it is not good practice: users should login from another system,\nover the network, or physical console or terminal on the system.\nemma ~$ su -\nPassword:\nroot ~#\nAfter entering the superuser ( root) password, the user has a superuser shell (notice the # at the\nend of the command prompt) and is, for all intents and purposes, the superuser ( root).\nSharing passwords is a very bad security practice, so there should be very few, if any, need for the\nsu command in a modern Linux system.\nThe dollar symbol ( $) should terminate the command line prompt for a non-privileged user shell,\nwhile the pound symbol ( #) should terminate the command line prompt for the superuser ( root)\nshell prompt. It is highly recommend that final character of any prompt never  be changed from\nthis “universally understood” standard, since this nomenclature is used in learning materials,\nincluding these.\nWARNINGNever switch to the superuser ( root) without passing the login shell ( -)\nparameter. Unless explicitly instructed otherwise by the OS or software\nvendor when su is required, always execute su - with extremely limited\nexceptions. User environments may cause undesirable configuration changes\nand issues when used in full privilege mode as superuser.\nWhat is the biggest issue with using su to switch to the superuser ( root)? If a regular user’s\nsession has been compromised, the superuser ( root) password could be captured. That’s where\n“Switch User Do” (or “Superuser Do”) comes in:\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n354     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 364,
        "Contenuto": "$ cat /sys/devices/virtual/dmi/id/board_serial\ncat: /sys/devices/virtual/dmi/id/board_serial: Permission denied\n$ sudo cat /sys/devices/virtual/dmi/id/board_serial\n[sudo] password for emma:\n/6789ABC/\nIn the preceding listing, the user is attempting to look up the serial number of their system board.\nHowever, the permission is denied, as that information is marked privileged.\nHowever, using sudo, the user enters his own password to authenticate who he is. If he has been\nauthorized in the sudoers configuration to run that command with privilege, with the options\nallowed, it will work.\nTIPBy default, the first authorized sudo command will authenticate subsequent sudo\ncommands for a (very short) period of time. This is configurable by the system\nadministrator.\nAccess Control Files\nNearly all operating systems have a set of places used to store access controls. In Linux these are\ntypically text files located under the /etc directory, which is where system configuration files\nshould be stored. By default, this directory is readable by every user on the system, but writable\nonly by root.\nThe main files related to user accounts, attributes and access control are:\n/etc/passwd\nThis file stores basic information about the users on the system, including UID and GID, home\ndirectory, shell, etc. Despite the name, no passwords are stored here.\n/etc/group\nThis file stores basic information about all user groups on the system, like group name and GID\nand members.\n/etc/shadow\nThis is where user passwords are stored. They are hashed, for security.\n/etc/gshadow\nThis file stores more detailed information about groups, including a hashed password which\nlets users temporarily become a member of the group, a list of users who can become a\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     355"
    },
    {
        "Pagina": 365,
        "Contenuto": "member of the group at and time and a list of group administrators.\nWARNINGThese files are not designed to and should never be edited directly. This lesson\nonly covers the information stored in these files, and not editing these files.\nBy default, every user can enter /etc and read the files /etc/passwd  and /etc/group . And also\nby default no user, except root, may read the files /etc/shadow  or /etc/gshadow .\nThere are also files involved with basic privilege escalation on Linux systems, like on the\ncommands su and sudo. By default, these are only accessible by the root user.\n/etc/sudoers\nThis file controls who can use the sudo command, and how.\n/etc/sudoers.d\nThis directory may contain files that supplement the settings on the sudoers file.\nFrom the standpoint of the LPI Linux Essentials exam, just know the path and filename of the\ndefault sudo configuration file, /etc/sudoers . Its configuration is beyond the scope of these\nmaterials.\nWARNINGEven though /etc/sudoers  is a text file, it should never be edited directly. If\nany changes to its contents are needed, they should be made using the visudo\nutility.\n/etc/passwd\nThe file /etc/passwd  is commonly referred to as the “password file”. Each line contains multiple\nfields always delimited by a colon ( :). Despite the name, the actual one-way password hash is\nnowadays not stored in this file.\nThe typical syntax for a line on this file is:\nUSERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL\nWhere:\nUSERNAME\nThe username aka login (name), like root, nobody, emma.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n356     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 366,
        "Contenuto": "PASSWORD\nLegacy location of the password hash. Almost always x, indicating that the password is stored\nin the file /etc/shadow .\nUID\nUser ID (UID), like 0, 99, 1024.\nGID\nDefault Group ID (GID), like 0, 99, 1024.\nGECOS\nA CSV list of user information including name, location, phone number. For example: Emma\nSmith,42 Douglas St,555.555.5555\nHOMEDIR\nPath to the user’s home directory, like /root, /home/emma , etc.\nSHELL\nThe default shell for this user, like /bin/bash , /sbin/nologin , /bin/ksh , etc.\nFor example, the following line describes the user emma:\nemma:x:1000:1000:Emma Smith,42 Douglas St,555.555.5555:/home/emma:/bin/bash\nUnderstanding the GECOS Field\nThe GECOS field contains three (3) or more fields, delimited by a comma ( ,), aka a list of Comma\nSeparated Values  (CSV). Although there is no enforced standard, the fields are usually in the\nfollowing order:\nNAME,LOCATION,CONTACT\nWhere:\nNAME\nis the user’s “Full Name”, or the “Software Name” in the case of a service account.\nLOCATION\nis usually the user’s physical location within a building, room number or the contact\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     357"
    },
    {
        "Pagina": 367,
        "Contenuto": "department or person in the case of a service account.\nCONTACT\nlists contact information such as home or work telephone number.\nAdditional fields may include additional contact information, such as a home number or e-mail\naddress. To change the information on the GECOS field, use the chfn command and answer the\nquestions, like below. If no username is provided after the command name, you will change\ninformation for the current user:\n$ chfn\nChanging the user information for emma\nEnter the new value, or press ENTER for the default\n    Full Name: Emma Smith\n    Room Number []: 42\n    Work Phone []: 555.555.5555\n    Home Phone []: 555.555.6666\n/etc/group\nThe /etc/group  file contains fields always delimited by a colon ( :), storing basic information\nabout the groups on the system. It is sometimes called the “group file”. The syntax for each line is:\nNAME:PASSWORD:GID:MEMBERS\nWhere:\nNAME\nis the group name, like root, users, emma, etc.\nPASSWORD\nlegacy location of an optional group password hash. Almost always x, indicating that the\npassword (if defined) is stored in the file /etc/gshadow .\nGID\nGroup ID (GID), like 0, 99, 1024.\nMEMBERS\na comma-separated list of usernames which are members of the group, like jsmith,emma .\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n358     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 368,
        "Contenuto": "The example below shows a line containing information about the students  group:\nstudents:x:1023:jsmith,emma\nThe user does not need to be listed in the members field when the group is the primary group for\na user. If a user is listed, then it is redundant — i.e., there is no change in functionality, listed or\nnot.\nNOTEUse of passwords for groups are beyond the scope of this section, however if\ndefined the password hash is stored in the file /etc/gshadow . This is also beyond\nthe scope of this section.\n/etc/shadow\nThe following table lists the attributes stored in the file /etc/shadow , commonly referred to as\nthe “shadow file”. The file contains fields always delimited by a colon ( :). Although the file has\nmany fields, most are beyond the scope of this lesson, other than the first two.\nThe basic syntax for a line on this file is:\nUSERNAME:PASSWORD:LASTCHANGE:MINAGE:MAXAGE:WARN:INACTIVE:EXPDATE\nWhere:\nUSERNAME\nThe username (same as /etc/passwd ), like root, nobody, emma.\nPASSWORD\nA one-way hash of the password, including preceding salt. For example: !!,\n!$1$01234567$ABC… , $6$012345789ABCDEF$012… .\nLASTCHANGE\nDate of the last password change in days since the “epoch”, such as 17909.\nMINAGE\nMinimum password age in days.\nMAXAGE\nMaximum password age in days.\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     359"
    },
    {
        "Pagina": 369,
        "Contenuto": "WARN\nWarning period before password expiration, in days.\nINACTIVE\nMaximum password age past expiration, in days.\nEXPDATE\nDate of password expiration, in days since the “epoch”.\nIn the example below you can see a sample entry from the /etc/shadow  file. Note that some\nvalues, like INACTIVE  and EXPDATE are undefined.\nemma:$6$nP532JDDogQYZF8I$bjFNh9eT1xpb9/n6pmjlIwgu7hGjH/eytSdttbmVv0MlyTMFgBIXESFNUmTo9EGxxH1\nOT1HGQzR0so4n1npbE0:18064:0:99999:7:::\nThe “epoch” of a POSIX system is midnight (0000), Universal Coordinate Time (UTC), on Thursday,\nJanuary 1st, 1970. Most POSIX dates and times are in either seconds since “epoch”, or in the case of\nthe file /etc/shadow , days since “epoch”.\nNOTEThe shadow file is designed to be only readable by the superuser, and select, core\nsystem authentication services that check the one-way password hash at login or\nother authentication-time.\nAlthough different authentication solutions exist, the elementary method of password storage is\nthe one-way hash function . This is done so the password is never stored in clear-text on a system,\nas the hashing function is not reversible. You can turn a password into a hash, but (ideally) it is\nnot possible to turn a hash back into a password.\nAt most, a brute force method is required to hash all combinations of a password, until one\nmatches. To mitigate the issue of a password hash being cracked on one system, Linux systems use\na random “salt” on each password hash for a user. So the hash for a user password on one Linux\nsystem will usually not be the same as on another Linux system, even if the password is the same.\nIn the file /etc/shadow , the password may take several forms. These forms typically include the\nfollowing:\n!!\nThis means a “disabled” account (no authentication possible), with no password hash stored.\n!$1$01234567$ABC…\nA “disabled” account (due to the initial exclamation mark), with a prior hash function, hash salt\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n360     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 370,
        "Contenuto": "and hash string stored.\n$1$0123456789ABC$012…\nAn “enabled” account, with a hash function, hash salt and hash string stored.\nThe hash function, hash salt and hash string are preceded and delimited by a dollar symbol ( $).\nThe hash salt length must be between eight and sixteen (8-16) characters. Examples of the three\nmost common are as follows:\n$1$01234567$ABC…\nA hash function of MD5 ( 1), with an example hash length of eight.\n$5$01234567ABCD$012…\nA hash function of SHA256 ( 5), with an example hash length of twelve.\n$6$01234567ABCD$012…\nA hash function of SHA512 ( 6), with an example hash length of twelve.\nNOTEThe MD5 hash function is considered cryptographically insecure with today’s\n(2010s and later) level of ASIC and even general computing SIMD performance. E.g.,\nthe US Federal Information Processing Standards (FIPS) does not allow MD5 to be\nused for any cryptographic functions, only very limited aspects of validation, but\nnot the integrity of digital signatures or similar purposes.\nFrom the standpoint of the LPI Linux Essentials objectives and exam, just understand the\npassword hash for a local user is only stored in the file /etc/shadow  which only select,\nauthentication services can read, or the superuser can modify via other commands.\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     361"
    },
    {
        "Pagina": 371,
        "Contenuto": "Guided Exercises\n1.Consider the following output of the id command:\n$ id emma\nuid=1000(emma) gid=1000(emma)\ngroups=1000(emma),4(adm),5(tty),10(uucp),20(dialout),27(sudo),46(plugdev)\nIn which files are the following attributes stored?\nUID and GID\nGroups\n◦Additionally, in which file is the user password stored?\n2.Which of the following types of cryptography is used by default to store passwords locally on a\nLinux system?\n◦Asymmetric\n◦One-way Hash\n◦Symmetric\n◦ROT13\n3.If an account has a User ID (UID) enumerated under 1000, what type of account is this?\n4.How can you get a list of the active logins in your system, and a count of them as well?\n5.Using the grep command, we got the result below with information about the user emma.\n$ grep emma /etc/passwd\nemma:x:1000:1000:Emma Smith,42 Douglas St,555.555.5555,:/home/emma:/bin/ksh\nFill in the blanks of the chart with the appropriate information using the output of the previous\ncommand.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n362     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 372,
        "Contenuto": "Username\nPassword\nUID\nPrimary GID\nGECOS\nHome Directory\nShell\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     363"
    },
    {
        "Pagina": 373,
        "Contenuto": "Explorational Exercises\n1.Compare the results of last to w and who. What details are missing from each of the commands\ncompared to one another?\n2.Try issuing the commands who and w -his.\n◦What information has been removed from the output of the w command with the “no\nheader” ( -h) and “short” ( -s) options?\n◦What information has been added in the output the w command with the “ip address” ( -i)\noption?\n3.Which file is the file that stores a user account’s one-way password hash?\n4.Which file contains the list of groups a user account is a member of? What logic could be used\nto compile a list of a groups a user account is a member of?\n5.One or more (1+) of the following files are not readable by regular, unprivileged users, by\ndefault. Which ones?\n◦/etc/group\n◦/etc/passwd\n◦/etc/shadow\n◦/etc/sudoers\n6.How would you change the current user’s login shell to the Korn Shell ( /usr/bin/ksh ) in non-\ninteractive mode?\n7.Why is the home directory of the root user not placed within /home directory?\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n364     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 374,
        "Contenuto": "Summary\nIn this lesson we have discovered the Linux user and group databases. We have learned the most\nimportant properties of users and groups, including their names and their numeric IDs. We have\nalso investigated how password hashing works on Linux and how users are assigned to groups.\nAll of this information is stored in the following four files, which provide the most basic, local\nsecurity access controls on a Linux system:\n/etc/passwd\nAll system-local user account POSIX attributes, other than password hash, readable by all.\n/etc/group\nAll system-local group account POSIX attributes, readable by all.\n/etc/shadow\nAll system-local user password hashes (and expiration information), unreadable by any (only\nselect processes).\n/etc/sudoers\nAll system-local privilege escalation information/allowance by the sudo command.\nThe following commands were discussed in this lesson:\nid\nList real (or effective) user and group IDs.\nlast\nList users who logged in last.\nwho\nList users who are currently logged in.\nw\nSimilar to who but with additional context.\nsu\nSwitch to another user with a login shell, or run commands as that user, by passing that user’s\npassword.\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     365"
    },
    {
        "Pagina": 375,
        "Contenuto": "sudo\nSwitch User (or Superuser) Do, if entitled, the current user enters their own password (if\nrequired) to raise privilege.\nchsh\nChange a user’s shell.\nchfn\nChange the user’s information on the GECOS field.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n366     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 376,
        "Contenuto": "Answers to Guided Exercises\n1.Consider the following output of the id command:\n$ id emma\nuid=1000(emma) gid=1000(emma)\ngroups=1000(emma),4(adm),5(tty),10(uucp),20(dialout),27(sudo),46(plugdev)\nIn which files are the following attributes stored?\nUID and GID /etc/passwd\nGroups /etc/group\n◦Additionally, in which file is the user password stored?\nThe hashed user password is stored in /etc/shadow .\n2.Which of the following types of cryptography is used by default to store passwords locally on a\nLinux system?\nBy default, a one-way hash is used to store passwords.\n3.If an account has a User ID (UID) enumerated under 1000, what type of account is this?\nAccounts with a UID lower than 1000 generally are system accounts.\n4.How can you get a list of the active logins in your system, and a count of them as well?\nUse the w command. Besides a list of all active logins, it will also show information like how\nmany users are logged in, along the system load and uptime.\n5.Using the grep command, we got the result below with information about the user emma.\n$ grep emma /etc/passwd\nemma:x:1000:1000:Emma Smith,42 Douglas St,555.555.5555,:/home/emma:/bin/ksh\nFill in the blanks of the chart with the appropriate information using the output of the previous\ncommand.\nUsername emma\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     367"
    },
    {
        "Pagina": 377,
        "Contenuto": "Password x - should always be x for a valid, active user\nlogin\nUID 1000\nPrimary GID 1000\nGECOS Emma Smith,42 Douglas St,555.555.5555\nHome Directory /home/emma\nShell /bin/ksh\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n368     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 378,
        "Contenuto": "Answers to Explorational Exercises\n1.Compare the results of last to w and who. What details are missing from each of the commands\ncompared to one another?\nThe w and who tools only list current users logged into the system, whereas last also lists users\nthat have disconnected. The w command lists system utilization, while who does not.\n2.Try issuing the commands who and w -his.\n◦What information has been removed from the output of the w command with the “no\nheader” ( -h) and “short” ( -s) options?\nThe header is not printed, which is useful for parsing, and the login time and select CPU\ninformation is not listed, respectively.\n◦What information has been added in the output the w command with the “ip address” ( -i)\noption?\nThis prints the IP address, instead of attempting DNS resolution, printing the hostname. This\noption to w better matches the default output of the last command.\n3.Which file is the file that stores a user account’s one-way password hash?\nThe file /etc/shadow  stores a user account’s one-way password hash, since it is not readable\nby a regular, unprivileged user account, unlike file /etc/passwd .\n4.Which file contains the list of groups a user account is a member of? What logic could be used\nto compile a list of a groups a user account is a member of?\nThe file /etc/group  has a CSV list of usernames in the last field, “members”, of any line for a\ngroup.\nAny line in the file /etc/group  where the user is listed in the final field, “members”, would\nmean the user is a member of that group — assuming it is correctly formatted (CSV delimited).\nAdditionally, the user’s primary group membership in the /etc/passwd  file will also have a\nmatching entry in the /etc/group  file for both the group name and GID.\n5.One or more (1+) of the following files are not readable by regular, unprivileged users, by\ndefault. Which ones?\n◦/etc/group\n◦/etc/passwd\nLinux Essentials (Version 1.6) | 5.1 Basic Security and Identifying User Types\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     369"
    },
    {
        "Pagina": 379,
        "Contenuto": "◦/etc/shadow\n◦/etc/sudoers\nThe files /etc/shadow  and /etc/sudoers  are not readable by default, except by select\nservices or the superuser. These answers will be customized, based on the systems and\nusernames used in the laboratory.\n6.How would you change the current user’s login shell to the Korn Shell ( /usr/bin/ksh ) in non-\ninteractive mode?\n$ chsh -s /usr/bin/ksh\n7.Why is the home directory of the root user not placed within /home directory?\nBecause the root account is required to troubleshoot and fix errors, which might include file\nsystem issues related to the /home directory. In such cases, root should be fully functional\neven when the /home file system is not available yet.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n370     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 380,
        "Contenuto": "5.2 Creating Users and Groups\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 5.2\nWeight\n2\nKey knowledge areas\n•User and group commands\n•User IDs\nPartial list of the used files, terms and utilities\n•/etc/passwd , /etc/shadow , /etc/group , /etc/skel/\n•useradd, groupadd\n•passwd\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     371"
    },
    {
        "Pagina": 381,
        "Contenuto": "5.2 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 5 Security and File Permissions\nObjective: 5.2 Creating Users and Groups\nLesson: 1 of 1\nIntroduction\nManaging users and groups on a Linux machine is one of the key aspects of system\nadministration. In fact, Linux is a multi-user operating system in which multiple users can use the\nsame machine at the same time.\nInformation about users and groups is stored in four files within the /etc/ directory tree:\n/etc/passwd\na file of seven colon-delimited fields containing basic information about users\n/etc/group\na file of four colon-delimited fields containing basic information about groups\n/etc/shadow\na file of nine colon-delimited fields containing encrypted user passwords\n/etc/gshadow\na file of four colon-delimited fields file containing encrypted group passwords\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n372     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 382,
        "Contenuto": "All of these files are updated by a suite of command-line tools for user and group management,\nwhich we’ll discuss later in this lesson. They can also be managed by graphical applications,\nspecific to each Linux distribution, which provide simpler and more immediate management\ninterfaces.\nWARNINGEven though the files are plain text, do not edit them directly. Always use the\ntools provided with your distribution for this purpose.\nThe File /etc/passwd\n/etc/passwd  is a world-readable file that contains a list of users, each on a separate line:\nfrank:x:1001:1001::/home/frank:/bin/bash\nEach line consists of seven colon-delimited fields:\nUsername\nThe name used when the user logs into the system.\nPassword\nThe encrypted password (or an x if shadow passwords are used).\nUser ID (UID)\nThe ID number assigned to the user in the system.\nGroup ID (GID)\nThe primary group number of the user in the system.\nGECOS\nAn optional comment field, which is used to add extra information about the user (such as the\nfull name). The field can contain multiple comma-separated entries.\nHome directory\nThe absolute path of the user’s home directory.\nShell\nThe absolute path of the program that is automatically launched when the user logs into the\nsystem (usually an interactive shell such as /bin/bash ).\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     373"
    },
    {
        "Pagina": 383,
        "Contenuto": "The File /etc/group\n/etc/group  is a world-readable file that contains a list of groups, each on a separate line:\ndeveloper:x:1002:\nEach line consists of four colon-delimited fields:\nGroup Name\nThe name of the group.\nGroup Password\nThe encrypted password of the group (or an x if shadow passwords are used).\nGroup ID (GID)\nThe ID number assigned to the group in the system.\nMember list\nA comma-delimited list of users belonging to the group, except those for whom this is the\nprimary group.\nThe File /etc/shadow\n/etc/shadow  is a file readable only by root and users with root privileges and contains the\nencrypted passwords of the users, each on a separate line:\nfrank:$6$i9gjM4Md4MuelZCd$7jJa8Cd2bbADFH4dwtfvTvJLOYCCCBf/.jYbK1IMYx7Wh4fErXcc2xQVU2N1gb97yI\nYaiqH.jjJammzof2Jfr/:18029:0:99999:7:::\nEach line consists of nine colon-delimited fields:\nUsername\nThe name used when user logs into the system.\nEncrypted password\nThe encrypted password of the user (if the value is !, the account is locked).\nDate of last password change\nThe date of the last password change, as number of days since 01/01/1970. A value of 0 means\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n374     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 384,
        "Contenuto": "that the user must change the password at the next access.\nMinimum password age\nThe minimum number of days, after a password change, which must pass before the user will\nbe allowed to change the password again.\nMaximum password age\nThe maximum number of days that must pass before a password change is required.\nPassword warning period\nThe number of days, before the password expires, during which the user is warned that the\npassword must be changed.\nPassword inactivity period\nThe number of days after a password expires during which the user should update the\npassword. After this period, if the user does not change the password, the account will be\ndisabled.\nAccount expiration date\nThe date, as number of days since 01/01/1970, in which the user account will be disabled. An\nempty field means that the user account will never expire.\nA reserved field\nA field that is reserved for future use.\nThe File /etc/gshadow\n/etc/gshadow  is a file readable only by root and by users with root privileges that contains\nencrypted passwords for groups, each on a separate line:\ndeveloper:$6$7QUIhUX1WdO6$H7kOYgsboLkDseFHpk04lwAtweSUQHipoxIgo83QNDxYtYwgmZTCU0qSCuCkErmyR2\n63rvHiLctZVDR7Ya9Ai1::\nEach line consists of four colon-delimited fields:\nGroup name\nThe name of the group.\nEncrypted password\nThe encrypted password for the group (it is used when a user, who is not a member of the\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     375"
    },
    {
        "Pagina": 385,
        "Contenuto": "group, wants to join the group using the newgrp command — if the password starts with !, no\none is allowed to access the group with newgrp).\nGroup administrators\nA comma-delimited list of the administrators of the group (they can change the password of the\ngroup and can add or remove group members with the gpasswd command).\nGroup members\nA comma-delimited list of the members of the group.\nNow that we’ve seen where user and group information is stored, let’s talk about the most\nimportant command-line tools to update these files.\nAdding and Deleting User Accounts\nIn Linux, you add a new user account with the useradd command, and you delete a user account\nwith the userdel command.\nIf you want to create a new user account named frank with a default setting, you can run the\nfollowing:\n# useradd frank\nAfter creating the new user, you can set a password using passwd:\n# passwd frank\nChanging password for user frank.\nNew UNIX password:\nRetype new UNIX password:\npasswd: all authentication tokens updated successfully.\nBoth of these commands require root authority. When you run the useradd command, the user\nand group information stored in password and group databases are updated for the newly\ncreated user account and, if specified, the home directory of the new user is created as well as a\ngroup with the same name as the user account.\nTIPRemember that you can always use the grep utility to filter the password and group\ndatabases, displaying only the entry that refers to a specific user or group. For the\nabove example you can use\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n376     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 386,
        "Contenuto": "cat /etc/passwd | grep frank\nor\ngrep frank /etc/passwd\nto see basic information on the newly created frank account.\nThe most important options which apply to the useradd command are:\n-c\nCreate a new user account with custom comments (for example full name).\n-d\nCreate a new user account with a custom home directory.\n-e\nCreate a new user account by setting a specific date on which it will be disabled.\n-f\nCreate a new user account by setting the number of days after the password expires during\nwhich the user should update the password.\n-g\nCreate a new user account with a specific GID\n-G\nCreate a new user account by adding it to multiple secondary groups.\n-m\nCreate a new user account with its home directory.\n-M\nCreate a new user account without its home directory.\n-s\nCreate a new user account with a specific login shell.\n-u\nCreate a new user account with a specific UID.\nOnce the new user account is created, you can use the id and groups commands to find out its\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     377"
    },
    {
        "Pagina": 387,
        "Contenuto": "UID, GID and the groups to which it belongs.\n# id frank\nuid=1000(frank) gid=1000(frank) groups=1000(frank)\n# groups frank\nfrank : frank\nTIPRemember to check and eventually edit the /etc/login.defs  file, which defines the\nconfiguration parameters that control the creation of users and groups. For example,\nyou can set the range of UIDs and GIDs that can be assigned to new user and group\naccounts, specify that you don’t need to use the -m option to create the new user’s\nhome directory and if the system should automatically create a new group for each\nnew user.\nIf you want to delete a user account, you can use the userdel command. In particular, this\ncommand updates the information stored in the account databases, deleting all entries referring\nto the specified user. The -r option also removes the user’s home directory and all of its contents,\nalong with the user’s mail spool. Other files, located elsewhere, must be searched for and deleted\nmanually.\n# userdel -r frank\nAs before, you need root authority to delete user accounts.\nThe Skeleton Directory\nWhen you add a new user account, even creating its home directory, the newly created home\ndirectory is populated with files and folders that are copied from the skeleton directory (by\ndefault /etc/skel ). The idea behind this is simple: a system administrator wants to add new\nusers having the same files and directories in their home. Therefore, if you want to customize the\nfiles and folders that are created automatically in the home directory of the new user accounts,\nyou must add these new files and folders to the skeleton directory.\nTIPNote that the profile files that are usually found in the skeleton directory are hidden\nfiles. Therefore, if you want to list all the files and folders in the skeleton directory,\nwhich will be copied to the home dir of the newly created users, you must use the ls\n-Al command.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n378     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 388,
        "Contenuto": "Adding and Deleting Groups\nAs for group management, you can add or delete groups using the groupadd  and groupdel \ncommands.\nIf you want to create a new group named developer , you can run the following command as\nroot:\n# groupadd -g 1090 developer\nThe -g option of this command creates a group with a specific GID.\nIf you want to delete the developer  group, you can run the following:\n# groupdel developer\nWARNINGRemember that when you add a new user account, the primary group and the\nsecondary groups to which it belongs must exist before launching the\nuseradd command. Also, you cannot delete a group if it is the primary group\nof a user account.\nThe passwd Command\nThis command is primarily used to change a user’s password. Any user can change their\npassword, but only root can change any user’s password.\nDepending on the passwd option used, you can control specific aspects of password aging:\n-d\nDelete the password of a user account (thus setting an empty password, making it a\npasswordless account).\n-e\nForce the user account to change the password.\n-l\nLock the user account (the encrypted password is prefixed with an exclamation mark).\n-u\nUnlock the user account (it removes the exclamation mark).\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     379"
    },
    {
        "Pagina": 389,
        "Contenuto": "-S\nOutput information about the password status for a specific account.\nThese options are available only for root. To see the full list of options, refer to the man pages.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n380     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 390,
        "Contenuto": "Guided Exercises\n1.For each of the following entries, indicate the file to which it refers:\n◦developer:x:1010:frank,grace,dave\n◦root:x:0:0:root:/root:/bin/bash\n◦henry:$1$.AbCdEfGh123456789A1b2C3d4.:18015:20:90:5:30::\n◦henry:x:1000:1000:User Henry:/home/henry:/bin/bash\n◦staff:!:dave:carol,emma\n2.Observe the following output to answer the next seven questions:\n# cat /etc/passwd | tail -3\ndave:x:1050:1050:User Dave:/home/dave:/bin/bash\ncarol:x:1051:1015:User Carol:/home/carol:/bin/sh\nhenry:x:1052:1005:User Henry:/home/henry:/bin/tcsh\n# cat /etc/group | tail -3\nweb_admin:x:1005:frank,emma\nweb_developer:x:1010:grace,kevin,christian\ndave:x:1050:\n# cat /etc/shadow | tail -3\ndave:$6$AbCdEfGh123456789A1b2C3D4e5F6G7h8i9:0:20:90:7:30::\ncarol:$6$q1w2e3r4t5y6u7i8AbcDeFgHiLmNoPqRsTu:18015:0:60:7:::\nhenry:!$6$123456789aBcDeFgHa1B2c3d4E5f6g7H8I9:18015:0:20:5:::\n# cat /etc/gshadow | tail -3\nweb_admin:!:frank:frank,emma\nweb_developer:!:kevin:grace,kevin,christian\ndave:!::\n◦What is the User ID (UID) and Group ID (GID) of carol?\n◦What shell is set for dave and henry?\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     381"
    },
    {
        "Pagina": 391,
        "Contenuto": "◦What is the name of the primary group of henry?\n◦What are the members of the web_developer  group? Which of these are group\nadministrators?\n◦Which user cannot log into the system?\n◦Which user should change the password the next time he will log into the system?\n◦How many days must pass before a password change is required for carol?\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n382     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 392,
        "Contenuto": "Explorational Exercises\n1.Working as root, run the useradd -m dave  command to add a new user account. What\noperations does this command perform? Assume that CREATE_HOME  and USERGROUPS_ENAB  in\n/etc/login.defs  are set to yes.\n2.Now that you have created the dave account, can this user login to the system?\n3.Identify the User ID (UID) and Group ID (GID) of dave and all members of the dave group.\n4.Create the sys_admin , web_admin  and db_admin  groups and identify their Group IDs (GIDs).\n5.Add a new user account named carol with UID 1035 and set sys_admin  as its primary group\nand web_admin  and db_admin  as its secondary groups.\n6.Delete the dave and carol user accounts and the sys_admin , web_admin  and db_admin \ngroups that you have previously created.\n7.Run the ls -l /etc/passwd /etc/group /etc/shadow /etc/gshadow  command and\ndescribe the output that it gives you in terms of file permissions. Which of these four files are\nshadowed for security reasons? Assume your system uses shadow passwords.\n8.Run the ls -l /usr/bin/passwd  command. Which special bit is set and what is its meaning?\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     383"
    },
    {
        "Pagina": 393,
        "Contenuto": "Summary\nIn this lesson, you learned:\n•The fundamentals of user and group management in Linux\n•Manage user and group information stored in password and group databases\n•Maintain the skeleton directory\n•Add and remove user accounts\n•Add and remove group accounts\n•Change the password of user accounts\nThe following commands were discussed in this lesson:\nuseradd\nCreate a new user account.\ngroupadd\nCreate a new group account.\nuserdel\nDelete a user account.\ngroupdel\nDelete a group account.\npasswd\nChange the password of user accounts and control all aspects of password aging.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n384     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 394,
        "Contenuto": "Answers to Guided Exercises\n1.For each of the following entries, indicate the file to which it refers:\n◦developer:x:1010:frank,grace,dave\n/etc/group\n◦root:x:0:0:root:/root:/bin/bash\n/etc/passwd\n◦henry:$1$.AbCdEfGh123456789A1b2C3d4.:18015:20:90:5:30::\n/etc/shadow\n◦henry:x:1000:1000:User Henry:/home/henry:/bin/bash\n/etc/passwd\n◦staff:!:dave:carol,emma\n/etc/gshadow\n2.Observe the following output to answer the next seven questions:\n# cat /etc/passwd | tail -3\ndave:x:1050:1050:User Dave:/home/dave:/bin/bash\ncarol:x:1051:1015:User Carol:/home/carol:/bin/sh\nhenry:x:1052:1005:User Henry:/home/henry:/bin/tcsh\n# cat /etc/group | tail -3\nweb_admin:x:1005:frank,emma\nweb_developer:x:1010:grace,kevin,christian\ndave:x:1050:\n# cat /etc/shadow | tail -3\ndave:$6$AbCdEfGh123456789A1b2C3D4e5F6G7h8i9:0:20:90:7:30::\ncarol:$6$q1w2e3r4t5y6u7i8AbcDeFgHiLmNoPqRsTu:18015:0:60:7:::\nhenry:!$6$123456789aBcDeFgHa1B2c3d4E5f6g7H8I9:18015:0:20:5:::\n# cat /etc/gshadow | tail -3\nweb_admin:!:frank:frank,emma\nweb_developer:!:kevin:grace,kevin,christian\ndave:!::\n◦What is the User ID (UID) and Group ID (GID) of carol?\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     385"
    },
    {
        "Pagina": 395,
        "Contenuto": "The UID is 1051 and the GID is 1015 (the third and fourth fields in /etc/passwd ).\n◦What shell is set for dave and henry?\ndave uses /bin/bash and henry uses /bin/tcsh (the seventh field in /etc/passwd ).\n◦What is the name of the primary group of henry?\nThe group name is web_admin  (the first field in /etc/group ).\n◦What are the members of the web_developer  group? Which of these are group\nadministrators?\nThe members are grace, kevin and christian  (the fourth field in /etc/group ), but only\nkevin is the administrator of the group (the third field in /etc/gshadow ).\n◦Which user cannot log into the system?\nThe henry user account is locked (it has an exclamation mark in front of the password\nhashes in /etc/shadow ).\n◦Which user should change the password the next time he will log into the system?\nIf the third field (Date of Last Password Change) in /etc/shadow  is 0, the user should\nchange his password the next time he will log into the system. Therefore, dave must change\nhis password.\n◦How many days must pass before a password change is required for carol?\n60 days (the fifth field in /etc/shadow ).\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n386     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 396,
        "Contenuto": "Answers to Explorational Exercises\n1.Working as root, run the useradd -m dave  command to add a new user account. What\noperations does this command perform? Assume that CREATE_HOME  and USERGROUPS_ENAB  in\n/etc/login.defs  are set to yes.\nThe command adds a new user, named dave, to the list of users in the system. The home\ndirectory of dave is created (by default /home/dave ) and the files and directories contained in\nthe skeleton directory are copied to the home directory. Finally, new group is created with the\nsame name as the user account.\n2.Now that you have created the dave account, can this user login to the system?\nNo, because the dave account is locked (see the exclamation mark in /etc/shadow ).\n# cat /etc/shadow | grep dave\ndave:!:18015:0:99999:7:::\nIf you set a password for dave, the account will be unlocked. You can do this using the passwd\ncommand.\n# passwd dave\nChanging password for user dave.\nNew UNIX password:\nRetype new UNIX password:\npasswd: all authentication tokens updated successfully.\n3.Identify the User ID (UID) and Group ID (GID) of dave and all members of the dave group.\n# cat /etc/passwd | grep dave\ndave:x:1015:1019::/home/dave:/bin/sh\n# cat /etc/group | grep 1019\ndave:x:1019:\nThe UID and GID of dave are 1015 and 1019 respectively (the third and fourth fields in\n/etc/passwd ) and the dave group has no members (the fourth field in /etc/group  is empty).\n4.Create the sys_admin , web_admin  and db_admin  groups and identify their Group IDs (GIDs).\n# groupadd sys_admin\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     387"
    },
    {
        "Pagina": 397,
        "Contenuto": "# groupadd web_admin\n# groupadd db_admin\n# cat /etc/group | grep admin\nsys_admin:x:1020:\nweb_admin:x:1021:\ndb_admin:x:1022:\nThe GIDs for the sys_admin , web_admin  and db_admin  groups are 1020, 1021 and 1022\nrespectively.\n5.Add a new user account named carol with UID 1035 and set sys_admin  as its primary group\nand web_admin  and db_admin  as its secondary groups.\n# useradd -u 1035 -g 1020 -G web_admin,db_admin carol\n# id carol\nuid=1035(carol) gid=1020(sys_admin) groups=1020(sys_admin),1021(web_admin),1022(db_admin)\n6.Delete the dave and carol user accounts and the sys_admin , web_admin  and db_admin \ngroups that you have previously created.\n# userdel -r dave\n# userdel -r carol\n# groupdel sys_admin\n# groupdel web_admin\n# groupdel db_admin\n7.Run the ls -l /etc/passwd /etc/group /etc/shadow /etc/gshadow  command and\ndescribe the output that it gives you in terms of file permissions. Which of these four files are\nshadowed for security reasons? Assume your system uses shadow passwords.\n# ls -l /etc/passwd /etc/group /etc/shadow /etc/gshadow\n-rw-r--r-- 1 root root    853 mag  1 08:00 /etc/group\n-rw-r----- 1 root shadow 1203 mag  1 08:00 /etc/gshadow\n-rw-r--r-- 1 root root   1354 mag  1 08:00 /etc/passwd\n-rw-r----- 1 root shadow 1563 mag  1 08:00 /etc/shadow\nThe /etc/passwd  and /etc/group  files are world readable and are shadowed for security\nreasons. When shadow passwords are used, you can see an x in the second field of these files\nbecause the encrypted passwords for users and groups are stored in /etc/shadow  and\n/etc/gshadow , which are readable only by root and, in some systems, also by members\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n388     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 398,
        "Contenuto": "belonging to the shadow group.\n8.Run the ls -l /usr/bin/passwd  command. Which special bit is set and what is its meaning?\n# ls -l /usr/bin/passwd\n-rwsr-xr-x 1 root root 42096 mag 17  2015 /usr/bin/passwd\nThe passwd command has the SUID bit set (the fourth character of this line), which means that\nthe command is executed with the privileges of the file’s owner (thus root). This is how\nordinary users can change their password.\nLinux Essentials (Version 1.6) | 5.2 Creating Users and Groups\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     389"
    },
    {
        "Pagina": 399,
        "Contenuto": "5.3 Managing File Permissions and Ownership\nReference to LPI objectives\nLinux Essentials version 1.6, Exam 010, Objective 5.3\nWeight\n2\nKey knowledge areas\n•File and directory permissions and ownership\nPartial list of the used files, terms and utilities\n•ls -l, ls -a\n•chmod, chown\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n390     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 400,
        "Contenuto": "5.3 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 5 Security and File Permissions\nObjective: 5.3 Managing File Permissions and Ownership\nLesson: 1 of 1\nIntroduction\nBeing a multi-user system, Linux needs some way to track who owns each file and whether or not\na user is allowed to perform actions on that file. This is to ensure the privacy of users who might\nwant to keep the content of their files confidential, as well as to ensure collaboration by making\ncertain files accessible to multiple users.\nThis is done through a three-level permissions system: every file on disk is owned by a user and a\nuser group and has three sets of permissions: one for its owner, one the group who owns the file\nand one for everyone else. In this lesson, you will learn how to query the permissions for a file\nand how to manipulate them.\nQuerying Information about Files and Directories\nThe command ls is used to get a listing of the contents of any directory. In this basic form, all you\nget are the filenames:\n$ ls\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     391"
    },
    {
        "Pagina": 401,
        "Contenuto": "Another_Directory  picture.jpg  text.txt\nBut there is much more information available for each file, including type, size, ownership and\nmore. To see this information you must ask ls for a “long form” listing, using the -l parameter:\n$ ls -l\ntotal 536\ndrwxrwxr-x 2 carol carol   4096 Dec 10 15:57 Another_Directory\n-rw------- 1 carol carol 539663 Dec 10 10:43 picture.jpg\n-rw-rw-r-- 1 carol carol   1881 Dec 10 15:57 text.txt\nEach column on the output above has a meaning:\n•The first column on the listing shows the file type and permissions.\nFor example, on drwxrwxr-x :\n◦The first character, d, indicates the file type.\n◦The next three characters, rwx, indicate the permissions for the owner of the file, also\nreferred to as user  or u.\n◦The next three characters, rwx, indicate the permissions of the group  owning the file, also\nreferred to as g.\n◦The last three characters, r-x, indicate the permissions for anyone else, also known as\nothers  or o.\n•The second  column indicates the number of hard links pointing to that file. For a directory, this\nmeans the number of subdirectories, plus a link to itself ( .) and the parent directory ( ..).\n•The third  and fourth  columns show ownership information: respectively the user and group\nthat own the file.\n•The fifth column shows the filesize, in bytes.\n•The sixth  column shows the precise date and time, or timestamp , when the file was last\nmodified.\n•The seventh  and last column shows the file name.\nIf you wish to see the filesizes in “human readable” format, add the -h parameter to ls. Files less\nthan one kilobyte in size will have the size shown in bytes. Files with more than one kilobyte and\nless than one megabyte will have a K added after the size, indicating the size is in kilobytes. The\nsame follows for filesizes in the megabyte ( M) and gigabyte ( G) ranges:\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n392     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 402,
        "Contenuto": "$ ls -lh\ntotal 1,2G\ndrwxrwxr-x 2 carol carol 4,0K Dec 10 17:59 Another_Directory\n----r--r-- 1 carol carol    0 Dec 11 10:55 foo.bar\n-rw-rw-r-- 1 carol carol 1,2G Dec 20 18:22 HugeFile.zip\n-rw------- 1 carol carol 528K Dec 10 10:43 picture.jpg\n---xr-xr-x 1 carol carol   33 Dec 11 10:36 test.sh\n-rwxr--r-- 1 carol carol 1,9K Dec 20 18:13 text.txt\n-rw-rw-r-- 1 carol carol 2,6M Dec 11 22:14 Zipped.zip\nTo only show information on a specific set of files, add the names of these files to ls:\n$ ls -lh HugeFile.zip test.sh\ntotal 1,2G\n-rw-rw-r-- 1 carol carol 1,2G Dec 20 18:22 HugeFile.zip\n---xr-xr-x 1 carol carol   33 Dec 11 10:36 test.sh\nWhat about Directories?\nIf you try to query information about a directory using ls -l, it will show you a listing of the\ndirectory contents instead:\n$ ls -l Another_Directory/\ntotal 0\n-rw-r--r-- 1 carol carol 0 Dec 10 17:59 another_file.txt\nTo avoid this and query information about the directory itself, add the -d parameter to ls:\n$ ls -l -d Another_Directory/\ndrwxrwxr-x 2 carol carol 4096 Dec 10 17:59 Another_Directory/\nSeeing Hidden Files\nThe directory listing we have retrieved using ls -l before is incomplete:\n$ ls -l\ntotal 544\ndrwxrwxr-x 2 carol carol   4096 Dec 10 17:59 Another_Directory\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     393"
    },
    {
        "Pagina": 403,
        "Contenuto": "-rw------- 1 carol carol 539663 Dec 10 10:43 picture.jpg\n-rw-rw-r-- 1 carol carol   1881 Dec 10 15:57 text.txt\nThere are three other files in that directory, but they are hidden. On Linux, files whose name\nstarts with a period ( .) are automatically hidden. To see them we need to add the -a parameter to\nls:\n$ ls -l -a\ntotal 544\ndrwxrwxr-x 3 carol carol   4096 Dec 10 16:01 .\ndrwxrwxr-x 4 carol carol   4096 Dec 10 15:56 ..\ndrwxrwxr-x 2 carol carol   4096 Dec 10 17:59 Another_Directory\n-rw------- 1 carol carol 539663 Dec 10 10:43 picture.jpg\n-rw-rw-r-- 1 carol carol   1881 Dec 10 15:57 text.txt\n-rw-r--r-- 1 carol carol      0 Dec 10 16:01 .thisIsHidden\nThe file .thisIsHidden  is simply hidden because its name starts with ..\nThe directories . and .. however are special. . is a pointer to the current directory, while .. is a\npointer to the parent directory (the directory which contains the current directory). In Linux,\nevery directory contains at least these two special directories.\nTIPYou can combine multiple parameters for ls (and many other Linux commands). ls\n-l -a can, for example, be written as ls -la.\nUnderstanding Filetypes\nWe have already mentioned that the first letter in each output of ls -l describes the type of the\nfile. The three most common file types are:\n- (normal file)\nA file can contain data of any kind. Files can be modified, moved, copied and deleted.\nd (directory)\nA directory contains other files or directories and helps to organize the file system. Technically,\ndirectories are a special kind of file.\nl (soft link)\nThis “file” is a pointer to another file or directory elsewhere in the filesystem.\nIn addition to those, there are three other file types that you should at least know about, but are\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n394     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 404,
        "Contenuto": "out of scope for this lesson:\nb (block device)\nThis file stands for a virtual or physical device, usually disks or other kinds of storage devices.\nFor example, the first hard disk in the system might be represented by /dev/sda .\nc (character device)\nThis file stands for a virtual or physical device. Terminals (like the main terminal on\n/dev/ttyS0 ) and serial ports are common examples of character devices.\ns (socket)\nSockets serve as “conduits” passing information between two programs.\nWARNINGDo not alter any of the permissions on block devices, character devices or\nsockets, unless you know what you’re doing. This may prevent your system\nfrom working!\nUnderstanding Permissions\nIn the output of ls -l the file permissions are shown right after the filetype, as three groups of\nthree characters each, in the order r, w and x. Here is what they mean. Keep in mind that a dash -\nrepresents the lack of a particular permission.\nPermissions on Files\nr\nStands for read  and has an octal value of 4 (don’t worry, we will discuss octals shortly). This\nmeans permission to open a file and read its contents.\nw\nStands for write  and has an octal value of 2. This means permission to edit or delete a file.\nx\nStands for execute  and has an octal value of 1. This means that the file can be run as an\nexecutable or script.\nSo, for example, a file with permissions rw- can be read and written to, but cannot be executed.\nPermissions on Directories\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     395"
    },
    {
        "Pagina": 405,
        "Contenuto": "r\nStands for read  and has an octal value of 4. This means permission to read the directory’s\ncontents, like filenames. But it does not  imply permission to read the files themselves.\nw\nStands for write  and has an octal value of 2. This means permission to create or delete files in a\ndirectory, or change their names, permissions and owners. If a user has the write permission\non a directory, the user can change permissions of any file in the directory, even if the user has\nno permissions on the file or if the file is owned by another user.\nx\nStands for execute  and has an octal value of 1. This means permission to enter a directory, but\nnot to list its files (for that, the r permission is needed).\nThe last bit about directories may sound a bit confusing. Let’s imagine, for example, that you have\na directory named Another_Directory , with the following permissions:\n$ ls -ld Another_Directory/\nd--xr-xr-x 2 carol carol 4,0K Dec 20 18:46 Another_Directory\nAlso imagine that inside this directory you have a shell script called hello.sh  with the following\npermissions:\n-rwxr-xr-x 1 carol carol 33 Dec 20 18:46 hello.sh\nIf you are the user carol and try to list the contents of Another_Directory , you will get an error\nmessage, as your user lacks read permission for that directory:\n$ ls -l Another_Directory/\nls: cannot open directory 'Another_Directory/': Permission denied\nHowever, the user carol does have  execute permissions, which means that she can enter the\ndirectory. Therefore, the user carol can access files inside the directory, as long as she has the\ncorrect permissions for the respective file . In this example, the user has full permissions for the\nscript hello.sh , so she can run the script, even if she can’t  read the contents of the directory\ncontaining it. All that is needed is the complete filename.\n$ sh Another_Directory/hello.sh\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n396     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 406,
        "Contenuto": "Hello LPI World!\nAs we said before, permissions are specified in sequence: first for the owner of the file, then for\nthe owning group, and then for other users. Whenever someone tries to perform an action on the\nfile, the permissions are checked in the same fashion. First the system checks if the current user\nowns the file, and if this is true it applies the first set of permissions only. Otherwise, it checks if\nthe current user belongs to the group owning the file. In that case, it applies the second set of\npermissions only. In any other case, the system will apply the third set of permissions. This means\nthat if the current user is the owner of the file, only the owner permissions are effective, even if\nthe group or other permissions are more permissive than the owner’s permissions.\nModifying File Permissions\nThe command chmod is used to modify the permissions for a file, and takes at least two\nparameters: the first one describes which permissions to change, and the second one points to the\nfile or directory where the change will be made. However, the permissions to change can be\ndescribed in two different ways, or “modes”.\nThe first one, called symbolic mode  offers fine grained control, allowing you to add or revoke a\nsingle permission without modifying others on the set. The other mode, called numeric mode , is\neasier to remember and quicker to use if you wish to set all permission values at once.\nBoth modes will lead to the same end result. So, for example, the commands:\n$ chmod ug+rw-x,o-rwx text.txt\nand\n$ chmod 660 text.txt\nwill produce exactly the same output, a file with the permissions set:\n-rw-rw---- 1 carol carol  765 Dec 20 21:25 text.txt\nNow, let’s understand how each mode works.\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     397"
    },
    {
        "Pagina": 407,
        "Contenuto": "Symbolic Mode\nWhen describing which permissions to change in symbolic mode  the first character(s) indicate(s)\nwhose permissions you will alter: the ones for the user ( u), for the group ( g), for others ( o) and/or\nfor all the three together ( a).\nThen you need to tell the command what to do: you can grant a permission ( +), revoke a\npermission ( -), or set it to a specific value ( =).\nLastly, you specify which permission you wish to affect: read ( r), write ( w), or execute ( x).\nFor example, imagine we have a file called text.txt  with the following permission set:\n$ ls -l text.txt\n-rw-r--r-- 1 carol carol 765 Dec 20 21:25 text.txt\nIf you wish to grant write permissions to members of the group owning the file, you would use the\ng+w parameter. It is easier if you think about it this way: “For the group ( g), grant ( +) write\npermissions ( w)”. So, the command would be:\n$ chmod g+w text.txt\nLet’s check the result with ls:\n$ ls -l text.txt\n-rw-rw-r-- 1 carol carol 765 Dec 20 21:25 text.txt\nIf you want to remove read permissions for the owner of the same file, think about it as: “For the\nuser ( u) revoke ( -), read permissions ( r)”. So the parameter is u-r, like so:\n$ chmod u-r text.txt\n$ ls -l text.txt\n--w-rw-r-- 1 carol carol 765 Dec 20 21:25 text.txt\nWhat if we want to set the permissions exactly as rw- for everyone? Then think of it as: “For all (\na), set exactly ( =), read ( r), write ( w), and no execute ( -)”. So:\n$ chmod a=rw- text.txt\n$ ls -l text.txt\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n398     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 408,
        "Contenuto": "-rw-rw-rw- 1 carol carol 765 Dec 20 21:25 text.txt\nOf course, it is possible to modify multiple permissions at the same time. In this case, separate\nthem with a comma ( ,):\n$ chmod u+rwx,g-x text.txt\n$ ls -lh text.txt\n-rwxrw-rw- 1 carol carol 765 Dec 20 21:25 text.txt\nThe example above can be read as: “For the user ( u), grant ( +) read, write and execute ( rwx)\npermissions, for the group ( g) revoke ( -), execute permissions ( x)”.\nWhen run on a directory, chmod modifies only the directory’s permissions. chmod has a recursive\nmode, useful when you want to change the permissions for “all files inside a directory and its\nsubdirectories”. To use this, add the parameter -R after the command name and before the\npermissions to change, like so:\n$ chmod -R u+rwx Another_Directory/\nThis command can be read as: “Recursively ( -R), for the user ( u), grant ( +) read, write and execute\n(rwx) permissions”.\nWARNINGBe careful and think twice before using the -R switch, as it is easy to change\npermissions on files and directories which you do not want to change,\nespecially on directories with a large number of files and sub-directories.\nNumeric Mode\nIn numeric mode , the permissions are specified in a different way: as a three-digit numeric value\non octal notation, a base-8 numeric system.\nEach permission has a corresponding value, and they are specified in the following order: first\ncomes read ( r), which is 4, then write ( w), which is 2 and last is execute ( x), represented by 1. If\nthere is no permission, use the value zero ( 0). So, a permission of rwx would be 7 (4+2+1) and r-x\nwould be 5 (4+0+1).\nThe first of the three digits on the permission set represents the permissions for the user ( u), the\nsecond for the group ( g) and the third for the other ( o). If we wanted to set the permissions for a\nfile to rw-rw---- , the octal value would be 660:\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     399"
    },
    {
        "Pagina": 409,
        "Contenuto": "$ chmod 660 text.txt\n$ ls -l text.txt\n-rw-rw---- 1 carol carol 765 Dec 20 21:25 text.txt\nBesides this, the syntax in numeric mode  is the same as in symbolic mode , the first parameter\nrepresents the permissions you wish to change, and the second one points to the file or directory\nwhere the change will be made.\nTIP If a permission value is odd, the file surely is executable!\nWhich syntax to use? The numeric mode  is recommended if you want to change the permissions to\na specific value, for example 640 (rw- r-- --- ).\nThe symbolic mode  is more useful if you want to flip just a specific value, regardless of the current\npermissions for the file. For example, I can add execute permissions for the user using just chmod\nu+x script.sh  without regard to, or even touching, the current permissions for the group and\nothers.\nModifying File Ownership\nThe command chown is used to modify the ownership of a file or directory. The syntax is quite\nsimple:\nchown username:groupname filename\nFor example, let’s check a file called text.txt :\n$ ls -l text.txt\n-rw-rw---- 1 carol carol 1881 Dec 10 15:57 text.txt\nThe user who owns the file is carol, and the group is also carol. Now, let’s modify the group\nowning the file to some other group, like students :\n$ chown carol:students text.txt\n$ ls -l text.txt\n-rw-rw---- 1 carol students 1881 Dec 10 15:57 text.txt\nKeep in mind that the user who owns a file does not need to belong to the group who owns a file.\nIn the example above, the user carol does not need to be a member of the students  group.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n400     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 410,
        "Contenuto": "However, she does have to member of the group in order to transfer the file’s group ownership to\nthat group.\nUser or group can be omitted if you do not wish to change them. So, to change just the group\nowning a file you would use chown :students text.txt . To change just the user, the command\nwould be chown carol text.txt . Alternatively, you could use the command chgrp students\ntext.txt  to change only the group.\nUnless you are the system administrator (root), you cannot change ownership of a file owned by\nanother user or a group that you don’t belong to. If you try to do this, you will get the error\nmessage Operation not permitted .\nQuerying Groups\nBefore changing the ownership of a file, it might be useful to know which groups exist on the\nsystem, which users are members of a group and to which groups a user belongs. Those tasks can\nbe accomplished with two commands, groups and groupmems .\nTo see which groups exist on your system, simply type groups:\n$ groups\ncarol students cdrom sudo dip plugdev lpadmin sambashare\nAnd if you want to know to which groups a user belongs, add the username as a parameter:\n$ groups carol\ncarol : carol students cdrom sudo dip plugdev lpadmin sambashare\nTo do the reverse, displaying which users belong to a group, use groupmems . The parameter -g\nspecifies the group, and -l will list all of its members:\n$ sudo groupmems -g cdrom -l\ncarol\nTIPgroupmems  can only be run as root, the system administrator. If you are not currently\nlogged in as root, add sudo before the command.\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     401"
    },
    {
        "Pagina": 411,
        "Contenuto": "Special Permissions\nBesides the read, write and execute permissions for user, group and others, each file can have\nthree other special permissions  which can alter the way a directory works or how a program runs.\nThey can be specified either in symbolic or numeric mode, and are as follows:\nSticky Bit\nThe sticky bit, also called the restricted deletion flag , has the octal value 1 and in symbolic mode is\nrepresented by a t within the other’s permissions. This applies only to directories, and on Linux it\nprevents users from removing or renaming a file in a directory unless they own that file or\ndirectory.\nDirectories with the sticky bit set show a t replacing the x on the permissions for others  on the\noutput of ls -l:\n$ ls -ld Sample_Directory/\ndrwxr-xr-t 2 carol carol 4096 Dec 20 18:46 Sample_Directory/\nIn numeric mode, the special permissions are specified using a “4-digit notation”, with the first\ndigit representing the special permission to act upon. For example, to set the sticky bit (value 1)\nfor the directory Another_Directory  in numeric mode, with permissions 755, the command\nwould be:\n$ chmod 1755 Another_Directory\n$ ls -ld Another_Directory\ndrwxr-xr-t 2 carol carol 4,0K Dec 20 18:46 Another_Directory\nSet GID\nSet GID, also known as SGID or Set Group ID bit, has the octal value 2 and in symbolic mode is\nrepresented by an s on the group  permissions. This can be applied to executable files or\ndirectories. On executable files, it will grant the process resulting from executing the file access to\nthe privileges of the group who owns the file. When applied to directories, it will make every file\nor directory created under it inherit the group from the parent directory.\nFiles and directories with SGID bit show an s replacing the x on the permissions for the group  on\nthe output of ls -l:\n$ ls -l test.sh\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n402     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 412,
        "Contenuto": "-rwxr-sr-x 1 carol carol 33 Dec 11 10:36 test.sh\nTo add SGID permissions to a file in symbolic mode, the command would be:\n$ chmod g+s test.sh\n$ ls -l test.sh\n-rwxr-sr-x 1 carol root     33 Dec 11 10:36 test.sh\nThe following example will make you better understand the effects of SGID on a directory.\nSuppose we have a directory called Sample_Directory , owned by the user carol and the group\nusers, with the following permission structure:\n$ ls -ldh Sample_Directory/\ndrwxr-xr-x 2 carol users 4,0K Jan 18 17:06 Sample_Directory/\nNow, let’s change to this directory and, using the command touch, create an empty file inside it.\nThe result would be:\n$ cd Sample_Directory/\n$ touch newfile\n$ ls -lh newfile\n-rw-r--r-- 1 carol carol 0 Jan 18 17:11 newfile\nAs we can see, the file is owned by the user carol and group carol. But, if the directory had the\nSGID permission set, the result would be different. First, let’s add the SGID bit to the\nSample_Directory  and check the results:\n$ sudo chmod g+s Sample_Directory/\n$ ls -ldh Sample_Directory/\ndrwxr-sr-x 2 carol users 4,0K Jan 18 17:17 Sample_Directory/\nThe s on the group permissions indicates that the SGID bit is set. Now, let’s change to this\ndirectory and, again, create an empty file with the touch command:\n$ cd Sample_Directory/\n$ touch emptyfile\n$ ls -lh emptyfile\n -rw-r--r-- 1 carol users 0 Jan 18 17:20 emptyfile\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     403"
    },
    {
        "Pagina": 413,
        "Contenuto": "As we can see, the group who owns the file is users. This is because the SGID bit made the file\ninherit the group owner of its parent directory, which is users.\nSet UID\nSUID, also known as Set User ID, has the octal value 4 and is represented by an s on the user \npermissions in symbolic mode. It only applies to files and its behavior is similar to the SGID bit,\nbut the process will run with the privileges of the user  who owns the file. Files with the SUID bit\nshow an s replacing the x on the permissions for the user on the output of ls -l:\n$ ls -ld test.sh\n-rwsr-xr-x 1 carol carol 33 Dec 11 10:36 test.sh\nYou can combine multiple special permissions in one parameter by adding them together. So, to\nset SGID (value 2) and SUID (value 4) in numeric mode for the script test.sh with permissions\n755, you would type:\n$ chmod 6755 test.sh\nAnd the result would be:\n$ ls -lh test.sh\n-rwsr-sr-x 1 carol carol 66 Jan 18 17:29 test.sh\nTIPIf your terminal supports color, and these days most of them do, you can quickly see\nif these special permissions are set by glancing at the output of ls -l. For the sticky\nbit, the directory name might be shown in a black font with blue background. The\nsame applies for files with the SGID (yellow background) and SUID (red background)\nbits. Colors may be different depending on which Linux distribution and terminal\nsettings you use.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n404     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 414,
        "Contenuto": "Guided Exercises\n1.Create a directory named emptydir  using the command mkdir emptydir . Now, using ls, list\nthe permissions for the directory emptydir .\n2.Create an empty file named emptyfile  with the command touch emptyfile . Now, using\nchmod with symbolic notation, add execute permissions for the owner of the file emptyfile ,\nand remove write and execute permissions for everyone else. Do this using only one chmod\ncommand.\n3.What will be the permissions for a file called text.txt  after you use the command chmod 754\ntext.txt ?\n4.Let’s assume a file named test.sh is a shell script with the following permissions and\nownership:\n-rwxr-sr-x 1 carol root     33 Dec 11 10:36 test.sh\n◦What are the permissions for the owner of the file?\n◦If the user john runs this script, under which user’s privileges will it be run?\n◦Using the numeric notation, which should be the syntax of chmod to “unset” the special\npermission granted to this file?\n5.Consider this file:\n$ ls -l /dev/sdb1\nbrw-rw---- 1 root disk 8, 17 Dec 21 18:51 /dev/sdb1\nWhich kind of file is sdb1? And who can write to it?\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     405"
    },
    {
        "Pagina": 415,
        "Contenuto": "6.Consider the following 4 files:\ndrwxr-xr-t 2 carol carol 4,0K Dec 20 18:46 Another_Directory\n----r--r-- 1 carol carol    0 Dec 11 10:55 foo.bar\n-rw-rw-r-- 1 carol carol 1,2G Dec 20 18:22 HugeFile.zip\ndrwxr-sr-x 2 carol users 4,0K Jan 18 17:26 Sample_Directory\nWrite down the corresponding permissions for each file and directory using numeric 4-digit\nnotation.\nAnother_Directory\nfoo.bar\nHugeFile.zip\nSample_Directory\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n406     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 416,
        "Contenuto": "Explorational Exercises\n1.Try this on a terminal: create an empty file called emptyfile  with the command touch\nemptyfile . Now “zero out” the permissions for the file with chmod 000 emptyfile . What will\nhappen if you change the permissions for emptyfile  by passing only one value for chmod in\nnumeric mode, such as chmod 4 emptyfile ? What if we use two, such as chmod 44\nemptyfile ? What can we learn about the way chmod reads the numerical value?\n2.Can you execute a file for which you have execute, but not read permissions ( --x)? Why or\nwhy not?\n3.Consider the permissions for the temporary directory on a Linux system, /tmp:\n$ ls -l /tmp\ndrwxrwxrwt  19 root root  16K Dec 21 18:58 tmp\nUser, group and others have full permissions. But can a regular user delete any files inside this\ndirectory? Why is this?\n4.A file called test.sh has the following permissions: -rwsr-xr-x , meaning the SUID bit is set.\nNow, run the following commands:\n$ chmod u-x test.sh\n$ ls -l test.sh\n-rwSr-xr-x 1 carol carol 33 Dec 11 10:36 test.sh\nWhat did we do? What does the uppercase S mean?\n5.How would you create a directory named Box where all the files are automatically owned by\nthe group users, and can only be deleted by the user who created them?\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     407"
    },
    {
        "Pagina": 417,
        "Contenuto": "Summary\nAs a multi-user system, Linux needs a way to track who owns and who can access each file. This is\ndone through a three-level permissions system, and in this lesson we learned all about how this\nsystem works.\nIn this lesson you have learned how use ls to get information about file permissions, how to\ncontrol or change who can create, delete or modify a file with chmod, both in numeric  and\nsymbolic  notation and how to change the ownership of files with chown and chgrp.\nThe following commands were discussed in this lesson:\nls\nList files, optionally including details such as permissions.\nchmod\nChange the permissions of a file or directory.\nchown\nChange the owning user and/or group of a file or directory.\nchgrp\nChange the owning group of a file or directory.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n408     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 418,
        "Contenuto": "Answers to Guided Exercises\n1.Create a directory named emptydir  using the command mkdir emptydir . Now, using ls, list\nthe permissions for the directory emptydir .\nAdd the -d parameter to ls to see the file attributes of a directory, instead of listing its\ncontents. Therefore the answer is:\nls -l -d emptydir\nBonus points if you merged the two parameters in one, as in ls -ld emptydir .\n2.Create an empty file named emptyfile  with the command touch emptyfile . Now, using\nchmod in symbolic notation, add execute permissions for the owner of the file emptyfile , and\nremove write and execute permissions for everyone else. Do this using only one chmod\ncommand.\nThink about it this way:\n◦“For the user who owns the file ( u) add ( +) execute ( x) permissions”, so u+x.\n◦“For the group ( g) and other users ( o), remove ( -) write ( w) and execute ( x) permissions”, so\ngo-wx.\nTo combine these two sets of permissions, we add a comma between them. So the final\nresult is:\nchmod u+x,go-wx emptyfile\n3.What will be the permissions of a file called text.txt  after I use the command chmod 754\ntext.txt ?\nRemember that in numeric notation each digit represents a set of three permissions, each one\nwith a respective value: read  is 4, write  is 2, execute  is 1 and no permission is 0. We get the\nvalue for a digit by adding the corresponding values for each permission. 7 is 4+2+1, or rwx, 5\nis 4+0+1, so r-x and 4 is just read, or r--. The permissions for text.txt  would be\nrwxr-xr--\n4.Let’s assume a file named test.sh is a shell script with the following permissions and\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     409"
    },
    {
        "Pagina": 419,
        "Contenuto": "ownership:\n-rwxr-sr-x 1 carol root     33 Dec 11 10:36 test.sh\n◦What are the permissions for the owner of the file?\nThe permissions for the owner (2nd to 4th characters in the output of ls -l) are rwx, so the\nanswer is: “to read, to write to and to execute the file”.\n◦If the user john runs this script, under which user’s privileges will it be run?\nPay attention to the permissions for the group . They are r-s, which means the SGID bit is\nset. The group who owns this file is root, so the script, even when started by a regular user,\nwill be run with root privileges.\n◦Using the numeric notation, which should be the syntax of chmod to “unset” the special\npermission granted to this file?\nWe can “unset” the special permissions by passing a 4th digit, 0, to chmod. The current\npermissions are 755, so the command should be chmod 0755 .\n5.Consider this file:\n$ ls -l /dev/sdb1\nbrw-rw---- 1 root disk 8, 17 Dec 21 18:51 /dev/sdb1\nWhich kind of file is sdb1? And who can write to it?\nThe first character of the output from ls -l shows the kind of file. b is a block device , usually a\ndisk (internal or external), connected to the machine. The owner ( root) and any users of the\ngroup disk can write to it.\n6.Consider the following 4 files:\ndrwxr-xr-t 2 carol carol 4,0K Dec 20 18:46 Another_Directory\n----r--r-- 1 carol carol    0 Dec 11 10:55 foo.bar\n-rw-rw-r-- 1 carol carol 1,2G Dec 20 18:22 HugeFile.zip\ndrwxr-sr-x 2 carol users 4,0K Jan 18 17:26 Sample_Directory\nWrite down the corresponding permissions for each file and directory using 4-digit numeric\nnotation.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n410     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 420,
        "Contenuto": "The corresponding permissions, in numeric notation, are as follows:\nAnother_Directory\nAnswer: 1755\n1 for the sticky bit, 755 for the regular permissions ( rwx for the user, r-x for group and\nothers).\nfoo.bar\nAnswer: 0044\nNo special permissions (so the first digit is 0), no permissions for the user ( ---) and just read\n(r—r--) for group and others.\nHugeFile.zip\nAnswer: 0664\nNo special permissions, so the first digit is 0. 6 (rw-) for the user and group, 4 (r--) for the\nothers.\nSample_Directory\nAnswer: 2755\n2 for the SGID bit, 7 (rwx) for the user, 5 (r-x) for the group and others.\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     411"
    },
    {
        "Pagina": 421,
        "Contenuto": "Answers to Explorational Exercises\n1.Try this on a terminal: create an empty file called emptyfile  with the command touch\nemptyfile . Now “zero out” the permissions for the file with chmod 000 emptyfile . What will\nhappen if you change the permissions for emptyfile  by passing only one value for chmod in\nnumeric notation, such as chmod 4 emptyfile ? What if we use two, such as chmod 44\nemptyfile ? What can we learn about the way chmod reads the numerical value?\nRemember that we “zeroed out” the permissions for emptyfile . So, its initial state would be:\n---------- 1 carol carol    0 Dec 11 10:55 emptyfile\nNow, let’s try the first command, chmod 4 emptyfile :\n$ chmod 4 emptyfile\n$ ls -l emptyfile\n-------r-- 1 carol carol 0 Dec 11 10:55 emptyfile\nThe permissions for others  were changed. And what if we try two digits, such as chmod 44\nemptyfile ?\n$ chmod 44 emptyfile\n$ ls -l emptyfile\n----r--r-- 1 carol carol 0 Dec 11 10:55 emptyfile\nNow, the permissions for group  and others  were affected. From this, we can conclude that in\nnumeric notation chmod reads the value “backwards”, from the least significant digit ( others ) to\nthe most significant one ( user ). If you pass one digit, you modify the permissions for others .\nWith two digits you modify group  and others , and with three you modify user , group  and others\nand with four digits you modify user , group , others  and the special permissions.\n2.Can you execute a file for which you have execute, but not read permissions ( --x)? Why or\nwhy not?\nAt first, the answer seems obvious: If you have execute permission, the file should run. This\napplies to programs in binary format that are executed directly by the kernel. However, there\nare programs (e.g. shell scripts) that must first be read and interpreted, so in these cases the\nread permission ( r) must also be set.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n412     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 422,
        "Contenuto": "3.Consider the permissions for the temporary directory on a Linux system, /tmp:\n$ ls -l /tmp\ndrwxrwxrwt  19 root root  16K Dec 21 18:58 tmp\nUser, group and others have full permissions. But can a regular user delete any files inside this\ndirectory? Why is this?\n/tmp is what we call a world writeable  directory, meaning that any user can write to it. But we\ndon’t want one user modifying files created by others, so the sticky bit_ is set (as indicated by\nthe t on the permissions for others ). This means that a user can delete files in /tmp, but only if\nthey created that file.\n4.A file called test.sh has the following permissions: -rwsr-xr-x , meaning the SUID bit is set.\nNow, run the following commands:\n$ chmod u-x test.sh\n$ ls -l test.sh\n-rwSr-xr-x 1 carol carol 33 Dec 11 10:36 test.sh\nWhat did we do? What does the uppercase S mean?\nWe removed execute permissions for the user who owns the file. The s (or t) takes the place of\nthe x on the output of ls -l, so the system needs a way to show if the user has execute\npermissions or not. It does this by changing the case of the special character.\nA lowercase s on the first group of permissions means that the user who owns the file has\nexecute permissions and that the SUID bit is set. An uppercase S means that the user who owns\nthe file lacks ( -) execute permissions and that the SUID bit is set.\nThe same can be said for SGID. A lowercase s on the second group of permissions means that\nthe group who owns the file has execute permissions and that the SGID bit is set. An uppercase\nS means that the group who owns the file lacks ( -) execute permissions and that the SGID bit is\nset.\nThis is also true for the sticky bit, represented by the t in the third group of permissions.\nLowercase t means the sticky bit is set and that others have execute permissions. Uppercase T\nmeans the sticky bit is set and that others do not have execute permissions.\n5.How would you create a directory named Box where all the files are automatically owned by\nthe group users, and can only be deleted by the user who created them?\nLinux Essentials (Version 1.6) | 5.3 Managing File Permissions and Ownership\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     413"
    },
    {
        "Pagina": 423,
        "Contenuto": "This is a multi-step process. The first step is to create the directory:\n$ mkdir Box\nWe want every file created inside this directory to be automatically assigned to the group\nusers. We can do this by setting this group as the owner of the directory, and then by setting\nthe SGID bit on it. We also need to make sure that any member of the group can write to that\ndirectory.\nSince we do not care about what the other permissions are, and want to “flip” only the special\nbits, it makes sense to use the symbolic mode:\n$ chown :users Box/\n$ chmod g+wxs Box/\nNote that if you current user does not belong to the group users, you will have to use the\ncommand sudo before the commands above to do the change as root.\nNow for the last part, making sure that only the user who created a file is allowed to delete it.\nThis is done by setting the sticky bit (represented by a t) on the directory. Remember that it is\nset on the permissions for others ( o).\n$ chmod o+t Box/\nThe permissions on the directory Box should appear as follows:\ndrwxrwsr-t 2 carol users  4,0K Jan 18 19:09 Box\nOf course, you can specify SGID and the sticky bit using only one chmod command:\n$ chmod g+wxs,o+t Box/\nBonus points if you thought of that.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n414     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 424,
        "Contenuto": "5.4 Special Directories and Files\nReference to LPI objectives\nLinux Essentials v1.6, Exam 010, Objective 5.4\nWeight\n1\nKey knowledge areas\n•Using temporary files and directories\n•Symbolic links\nPartial list of the used files, terms and utilities\n•/tmp/, /var/tmp/  and Sticky Bit\n•ls -d\n•ln -s\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     415"
    },
    {
        "Pagina": 425,
        "Contenuto": "5.4 Lesson 1\nCertificate: Linux Essentials\nVersion: 1.6\nTopic: 5 Security and File Permissions\nObjective: 5.4 Special Directories and Files\nLesson: 1 of 1\nIntroduction\nOn Linux, everything is treated as a file. However, some files get a special treatment, either\nbecause of the place they are stored, such as temporary files, or the way they interact with the\nfilesystem, such as links. In this lesson, we will learn where such files are located, how they work\nand how to manage them.\nTemporary Files\nTemporary files are files used by programs to store data that is only needed for a short time. These\ncan be the data of running processes, crash logs, scratch files from an autosave, intermediary files\nused during a file conversion, cache files and so on.\nLocation of temporary files\nVersion 3.0 of the Filesystem Hierarchy Standard  (FHS) defines standard locations for temporary\nfiles on Linux systems. Each location has a different purpose and behavior, and it is\nrecommended that developers follow the conventions set by the FHS when writing temporary\ndata to disk.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n416     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 426,
        "Contenuto": "/tmp\nAccording to the FHS, programs should not assume that files written here will be preserved\nbetween invocations of a program. The recommendation  is that this directory be cleared (all\nfiles erased) during system boot-up, although this is not mandatory .\n/var/tmp\nAnother location for temporary files, but this one should not be cleared  during the system boot-\nup, i.e. files stored here will usually persist between reboots.\n/run\nThis directory contains run-time variable data used by running processes, such as process\nidentifier files ( .pid). Programs that need more than one run-time file may create\nsubdirectories here. This location must be cleared  during system boot-up. The purpose of this\ndirectory was once served by /var/run , and on some systems /var/run  may be a symbolic\nlink to /run.\nNote that there is nothing which prevents a program to create temporary files elsewhere on the\nsystem, but it is good practice to respect the conventions set by the FHS.\nPermissions on temporary files\nHaving system-wide temporary directories on a multiuser system presents some challenges\nregarding access permissions. At first thought one may think that such directories would be\n“world-writable”, i.e. any user could write or delete data in it. But if this were to be true, how\ncould we prevent a user from erasing or modifying files created by another?\nThe solution is a special permission called the sticky bit , which applies both to directories and\nfiles. However, for security reasons, the Linux kernel ignores the sticky bit when it is applied to\nfiles. When this special bit is set for a directory, it prevents users from removing or renaming a\nfile within that directory unless they own the file.\nDirectories with the sticky bit set show a t replacing the x on the permission for others  in the\noutput of ls -l. For example, let’s check the permissions for the /tmp and /var/tmp  directories:\n$ ls -ldh /tmp/ /var/tmp/\ndrwxrwxrwt 25 root root 4,0K Jun  7 18:52 /tmp/\ndrwxrwxrwt 16 root root 4,0K Jun  7 09:15 /var/tmp/\nAs you can see by the t replacing the x on the permission for others , both directories have the\nsticky bit set.\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     417"
    },
    {
        "Pagina": 427,
        "Contenuto": "To set the sticky bit on a directory using chmod in numeric mode, use the four-digit notation and 1\nas the first digit. For example:\n$ chmod 1755 temp\nwill set the sticky bit for the directory named temp and the permissions as rwxr-xr-t .\nWhen using the symbolic mode, use the parameter t. So, +t to set the sticky bit, and -t to disable\nit. Like so:\n$ chmod +t temp\nUnderstanding Links\nWe have already said that on Linux everything is treated as a file. But there is a special  kind of\nfile, called a link, and there are two types of links on a Linux system:\nSymbolic links\nAlso called soft links , they point to the path of another file. If you delete the file the link points\nto (called target ) the link will still exist, but it “stops working”, as it now points to “nothing”.\nHard links\nThink of a hard link as a second name for the original file. They are not duplicates, but instead\nare an additional entry in the file system pointing to the same place (inode) on the disk.\nTIPAn inode  is a data structure that stores attributes for an object (like a file or directory)\non a filesystem. Among those attributes are the filename, permissions, ownership and\non which blocks of the disk the data for the object is stored. Think of it as an entry on\nan index, hence the name, which comes from “index node”.\nWorking with Hard Links\nCreating Hard Links\nThe command to create a hard link on Linux is ln. The basic syntax is:\n$ ln TARGET LINK_NAME\nThe TARGET must exist already (this is the file the link will point to), and if the target is not on the\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n418     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 428,
        "Contenuto": "current directory, or if you want to create the link elsewhere, you must  specify the full path to it.\nFor example, the command\n$ ln target.txt /home/carol/Documents/hardlink\nwill create a file named hardlink  on the directory /home/carol/Documents/ , linked to the file\ntarget.txt  on the current directory.\nIf you leave out the last parameter ( LINK_NAME ), a link with the same name as the target will be\ncreated in the current directory.\nManaging Hard Links\nHard links are entries in the filesystem which have different names but point to the same data on\ndisk. All such names are equal and can be used to refer to a file. If you change the contents of one\nof the names, the contents of all other names pointing to that file change since all these names\npoint to the very same data. If you delete one of the names, the other names will still work.\nThis happens because when you “delete” a file the data is not actually erased from the disk. The\nsystem simply deletes the entry on the filesystem table pointing to the inode corresponding to the\ndata on the disk. But if you have a second entry pointing to the same inode, you can still get to the\ndata. Think of it as two roads converging on the same point. Even if you block or redirect one of\nthe roads, you can still reach the destination using the other.\nYou can check this by using the -i parameter of ls. Consider the following contents of a directory:\n$ ls -li\ntotal 224\n3806696 -r--r--r-- 2 carol carol 111702 Jun  7 10:13 hardlink\n3806696 -r--r--r-- 2 carol carol 111702 Jun  7 10:13 target.txt\nThe number before the permissions is the inode number. See that both the file hardlink  and the\nfile target.txt  have the same number ( 3806696)? This is because one is a hard link of the other.\nBut which one is the original and which one is the link? You can’t really tell, as for all practical\npurposes they are the same.\nNote that every hard link pointing to a file increases the link count  of the file. This is the number\nright after the permissions on the output of ls -l. By default, every file has a link count of 1\n(directories have a count of 2), and every hard link to it increases the count by one. So, that is the\nreason for the link count of 2 on the files in the listing above.\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     419"
    },
    {
        "Pagina": 429,
        "Contenuto": "In contrast to symbolic links, you can only create hard links to files, and both the link and target\nmust reside in the same file system.\nMoving and Removing Hard Links\nSince hard links are treated as regular files, they can be deleted with rm and renamed or moved\naround the filesystem with mv. And since a hard link points to the same inode of the target, it can\nbe moved around freely, without fear of “breaking” the link.\nSymbolic links\nCreating Symbolic Links\nThe command used to create a symbolic link is also ln, but with the -s parameter added. Like so:\n$ ln -s target.txt /home/carol/Documents/softlink\nThis will create a file named softlink  in the directory /home/carol/Documents/ , pointing to\nthe file target.txt  in the current directory.\nAs with hard links, you can omit the link name to create a link with the same name as the target in\nthe current directory.\nManaging Symbolic Links\nSymbolic links point to another path in the filesystem. You can create soft links to files and\ndirectories, even on different partitions. It is pretty easy to spot a symbolic link on the output of\nls:\n$ ls -lh\ntotal 112K\n-rw-r--r-- 1 carol carol 110K Jun  7 10:13 target.txt\nlrwxrwxrwx 1 carol carol   12 Jun  7 10:14 softlink -> target.txt\nIn the example above, the first character on the permissions for the file softlink  is l, indicating\na symbolic link. Furthermore, just after the filename we see the name of the target the link points\nto, the file target.txt .\nNote that on file and directory listings, soft links themselves always show the permissions rwx for\nthe user, the group and others, but in practice the access permissions for them are the same as\nthose for the target.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n420     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 430,
        "Contenuto": "Moving and Removing Symbolic Links\nLike hard links, symbolic links can be removed using rm and moved around or renamed using mv.\nHowever, special care should be taken when creating them, to avoid “breaking” the link if it is\nmoved from its original location.\nWhen creating symbolic links you should be aware that unless a path is fully specified the location\nof the target is interpreted as relative  to the location of the link. This may create problems if the\nlink, or the file it points to, is moved.\nThis is easier to understand with an example. Say that we have a file named original.txt  in the\ncurrent directory, and we want to create a symbolic link to it called softlink . We could use:\n$ ln -s original.txt softlink\nAnd apparently all would be well. Let’s check with ls:\n$ ls -lh\ntotal 112K\n-r--r--r-- 1 carol carol 110K Jun  7 10:13 original.txt\nlrwxrwxrwx 1 carol carol   12 Jun  7 19:23 softlink -> original.txt\nSee how the link is constructed: softlink  points to ( →) original.txt . However, let’s see what\nhappens if we move the link to the parent directory and try to display its contents using the\ncommand less:\n$ mv softlink ../\n$ less ../softlink\n../softlink: No such file or directory\nSince the path to original.txt  was not specified, the system assumes that it is in the same\ndirectory as the link. When this is no longer true, the link stops working.\nThe way to prevent this is to always specify the full path to the target when creating the link:\n$ ln -s /home/carol/Documents/original.txt softlink\nThis way, no matter where you move the link it will still work, because it points to the absolute\nlocation of the target. Check with ls:\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     421"
    },
    {
        "Pagina": 431,
        "Contenuto": "$ ls -lh\ntotal 112K\nlrwxrwxrwx 1 carol carol   40 Jun  7 19:34 softlink -> /home/carol/Documents/original.txt\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n422     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 432,
        "Contenuto": "Guided Exercises\n1.Imagine a program needs to create a one-use temporary file that will never be needed again\nafter the program is closed. What would be the correct directory in which to to create this file?\n2.Which is the temporary directory that must  be cleared during the boot process?\n3.What is the parameter for chmod in symbolic  mode to enable the sticky bit on a directory?\n4.Imagine there is a file named document.txt  on the directory /home/carol/Documents . What\nis the command to create a symbolic link to it named text.txt  on the current directory?\n5.Explain the difference between a hard link to a file and a copy of this file.\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     423"
    },
    {
        "Pagina": 433,
        "Contenuto": "Explorational Exercises\n1.Imagine that inside a directory you create a file called recipes.txt . Inside this directory, you\nwill also create a hard link to this file, called receitas.txt , and a symbolic (or soft) link to this\ncalled rezepte.txt .\n$ touch recipes.txt\n$ ln recipes.txt receitas.txt\n$ ln -s receitas.txt rezepte.txt\nThe contents of the directory should appear like so:\n$ ls -lhi\ntotal 160K\n5388833 -rw-r--r-- 4 carol carol 77K jun 17 17:25 receitas.txt\n5388833 -rw-r--r-- 4 carol carol 77K jun 17 17:25 recipes.txt\n5388837 lrwxrwxrwx 1 carol carol  12 jun 24 10:12 rezepte.txt -> receitas.txt\nRemember that, as a hard link, receitas.txt  points to the same inode that recipes.txt .\nWhat would happen to the soft link rezepte.txt  if the name receitas.txt  is deleted? Why?\n2.Imagine you have a flash drive plugged into your system, and mounted on\n/media/youruser/FlashA . You want to create in your home directory a link called\nschematics.pdf , pointing to the file esquema.pdf  in the root directory of the flash drive. So,\nyou type the command:\n$ ln /media/youruser/FlashA/esquema.pdf ~/schematics.pdf\nWhat would happen? Why?\n3.Consider the following output of ls -lah:\n$ ls -lah\ntotal 3,1M\ndrwxr-xr-x 2 carol carol 4,0K jun 17 17:27 .\ndrwxr-xr-x 5 carol carol 4,0K jun 17 17:29 ..\n-rw-rw-r-- 1 carol carol 2,8M jun 17 15:45 compressed.zip\n-rw-r--r-- 4 carol carol  77K jun 17 17:25 document.txt\n-rw-rw-r-- 1 carol carol 216K jun 17 17:25 image.png\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n424     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 434,
        "Contenuto": "-rw-r--r-- 4 carol carol  77K jun 17 17:25 text.txt\n◦How many links point to the file document.txt ?\n◦Are they soft or hard links?\n◦Which parameter should you pass to ls to see which inode each file occupies?\n4.Imagine you have in your ~/Documents  directory a file named clients.txt  containing some\nclient names, and a directory named somedir. Inside this there is a different  file also named\nclients.txt  with different names. To replicate this structure, use the following commands.\n$ cd ~/Documents\n$ echo \"John, Michael, Bob\" > clients.txt\n$ mkdir somedir\n$ echo \"Bill, Luke, Karl\" > somedir/clients.txt\nYou then create a link inside somedir named partners.txt  pointing to this file, with the\ncommands:\n$ cd somedir/\n$ ln -s clients.txt partners.txt\nSo, the directory structure is:\nDocuments\n|-- clients.txt\n`-- somedir\n    |-- clients.txt\n    `-- partners.txt -> clients.txt\nNow, you move partners.txt  from somedir to ~/Documents , and list its contents.\n$ cd ~/Documents/\n$ mv somedir/partners.txt .\n$ less partners.txt\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     425"
    },
    {
        "Pagina": 435,
        "Contenuto": "Will the link still work? If so, which file will have its contents listed? Why?\n5.Consider the following files:\n-rw-r--r-- 1 carol carol 19 Jun 24 11:12 clients.txt\nlrwxrwxrwx 1 carol carol 11 Jun 24 11:13 partners.txt -> clients.txt\nWhat are the access permissions for partners.txt ? Why?\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n426     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 436,
        "Contenuto": "Summary\nIn this lesson, you learned:\n•Where temporary files are stored.\n•What is the special permission applied to them.\n•What links are.\n•The difference between symbolic  and hard  links.\n•How to create links.\n•How to move, rename or remove them.\nThe following commands were discussed in this lesson:\n•ln\n•The -i parameter to ls\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     427"
    },
    {
        "Pagina": 437,
        "Contenuto": "Answers to Guided Exercises\n1.Imagine a program needs to create a one-use temporary file that will never be needed again\nafter the program is closed. What would be the correct directory in which to create this file?\nSince we don’t care about the file after the program finishes running, the correct directory is\n/tmp.\n2.Which is the temporary directory that must  be cleared during the boot process?\nThe directory is /run or, on some systems, /var/run .\n3.What is the parameter for chmod in symbolic  mode to enable the sticky bit on a directory?\nThe symbol for the sticky bit in symbolic mode is t. Since we want to enable (add) this\npermission to the directory, the parameter should be +t.\n4.Imagine there is a file named document.txt  on the directory /home/carol/Documents . What\nis the command to create a symbolic link to it named text.txt  in the current directory?\nln -s is the command to create a symbolic link. Since you should specify the full path to the\nfile you are linking to, the command is:\n$ ln -s /home/carol/Documents/document.txt text.txt\n5.Explain the difference between a hard link to a file and a copy of this file.\nA hard link is just another name for a file. Even though it looks like a duplicate of the original\nfile, for all purposes both the link and the original are the same, as they point to the same data\non disk. Changes made to the contents of the link will be reflected on the original, and vice-\nversa. A copy is a completely independent entity, occupying a different place on disk. Changes\nto the copy will not be reflected on the original, and vice-versa.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n428     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 438,
        "Contenuto": "Answers to Explorational Exercises\n1.Imagine that inside a directory you create a file called recipes.txt . Inside this directory, you\nwill also create a hard link to this file, called receitas.txt , and a symbolic (or soft) link to this\ncalled rezepte.txt .\n$ touch recipes.txt\n$ ln recipes.txt receitas.txt\n$ ln -s receitas.txt rezepte.txt\nThe contents of the directory should be like so:\n$ ls -lhi\ntotal 160K\n5388833 -rw-r--r-- 4 carol carol 77K jun 17 17:25 receitas.txt\n5388833 -rw-r--r-- 4 carol carol 77K jun 17 17:25 recipes.txt\n5388837 lrwxrwxrwx 1 carol carol  12 jun 24 10:12 rezepte.txt -> receitas.txt\nRemember that, as a hard link, receitas.txt  points to the same inode that recipes.txt .\nWhat would happen to the soft link rezepte.txt  if the name receitas.txt  is deleted? Why?\nThe soft link rezepte.txt  would stop working. This is because soft links point to names, not\ninodes, and the name receitas.txt  no longer exists, even if the data is still on the disk under\nthe name recipes.txt .\n2.Imagine you have a flash drive plugged into your system, and mounted on\n/media/youruser/FlashA . You want to create in your home directory a link called\nschematics.pdf , pointing to the file esquema.pdf  in the root directory of the flash drive. So,\nyou type the command:\n$ ln /media/youruser/FlashA/esquema.pdf ~/schematics.pdf\nWhat would happen? Why?\nThe command would fail. The error message would be Invalid cross-device link , and it\nmakes the reason clear: hard links cannot point to a target in a different partition or device.\nThe only way to create a link like this is to use a symbolic  or soft link, adding the -s parameter\nto ln.\n3.Consider the following output of ls -lah:\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     429"
    },
    {
        "Pagina": 439,
        "Contenuto": "$ ls -lah\ntotal 3,1M\ndrwxr-xr-x 2 carol carol 4,0K jun 17 17:27 .\ndrwxr-xr-x 5 carol carol 4,0K jun 17 17:29 ..\n-rw-rw-r-- 1 carol carol 2,8M jun 17 15:45 compressed.zip\n-rw-r--r-- 4 carol carol  77K jun 17 17:25 document.txt\n-rw-rw-r-- 1 carol carol 216K jun 17 17:25 image.png\n-rw-r--r-- 4 carol carol  77K jun 17 17:25 text.txt\n◦How many links point to the file document.txt ?\nEvery file starts with a link count of 1. Since the link count for the file is 4, there are three\nlinks pointing to that file.\n◦Are they soft or hard links?\nThey are hard links, since soft links do not increase the link count of a file.\n◦Which parameter should you pass to ls to see which inode each file occupies?\nThe parameter is -i. The inode will be shown as the first column in the output of ls, like\nbelow:\n$ ls -lahi\ntotal 3,1M\n5388773 drwxr-xr-x 2 rigues rigues 4,0K jun 17 17:27 .\n5245554 drwxr-xr-x 5 rigues rigues 4,0K jun 17 17:29 ..\n5388840 -rw-rw-r-- 1 rigues rigues 2,8M jun 17 15:45 compressed.zip\n5388833 -rw-r--r-- 4 rigues rigues  77K jun 17 17:25 document.txt\n5388837 -rw-rw-r-- 1 rigues rigues 216K jun 17 17:25 image.png\n5388833 -rw-r--r-- 4 rigues rigues  77K jun 17 17:25 text.txt\n4.Imagine you have in your ~/Documents  directory a file named clients.txt  containing some\nclient names, and a directory named somedir. Inside this there is a different  file also named\nclients.txt  with different names. To replicate this structure, use the following commands.\n$ cd ~/Documents\n$ echo \"John, Michael, Bob\" > clients.txt\n$ mkdir somedir\n$ echo \"Bill, Luke, Karl\" > somedir/clients.txt\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n430     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 440,
        "Contenuto": "You then create a link inside somedir named partners.txt  pointing to this file, with the\ncommands:\n$ cd somedir/\n$ ln -s clients.txt partners.txt\nSo, the directory structure is:\nDocuments\n|-- clients.txt\n`-- somedir\n    |-- clients.txt\n    `-- partners.txt -> clients.txt\nNow, you move partners.txt  from somedir to ~/Documents , and list its contents.\n$ cd ~/Documents/\n$ mv somedir/partners.txt .\n$ less partners.txt\nWill the link still work? If so, which file will have its contents listed? Why?\nThis is a “tricky” one, but the link will work, and the file listed will be the one in ~/Documents ,\ncontaining the names John, Michael, Bob.\nRemember that since you did not specify the full path to the target clients.txt  when creating\nthe soft link partners.txt , the target location will be interpreted as being relative to the\nlocation of the link, which in this case is the current directory.\nWhen the link was moved from ~/Documents/somedir  to ~/Documents , it should stop\nworking, since the target was no longer in the same directory as the link. However, it just so\nhappens that there is a file named clients.txt  on ~/Documents , so the link will point to this\nfile, instead of the original target inside ~/somedir .\nTo avoid this, always specify the full path to the target when creating a symbolic link.\n5.Consider the following files:\n-rw-r--r-- 1 rigues rigues 19 Jun 24 11:12 clients.txt\nlrwxrwxrwx 1 rigues rigues 11 Jun 24 11:13 partners.txt -> clients.txt\nLinux Essentials (Version 1.6) | 5.4 Special Directories and Files\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     431"
    },
    {
        "Pagina": 441,
        "Contenuto": "What are the access permissions for partners.txt ? Why?\nThe access permissions for partners.txt  are rw-r—r-- , as links always inherit the same\naccess permissions as the target.\nLinux Essentials (Version 1.6) | Topic 5: Security and File Permissions\n432     |     \n      learning.lpi.org      |     Licensed under CC BY-NC-ND 4.0 .     |     Version: 2024-10-27"
    },
    {
        "Pagina": 442,
        "Contenuto": "Imprint\n© 2024 by Linux Professional Institute: Learning Materials, “Linux Essentials (Version 1.6)”.\nPDF generated: 2024-10-27\nThis work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0\nInternational License (CC BY-NC-ND 4.0). To view a copy of this license, visit\nhttps://creativecommons.org/licenses/by-nc-nd/4.0/\nWhile Linux Professional Institute has used good faith efforts to ensure that the information and\ninstructions contained in this work are accurate, Linux Professional Institute disclaims all\nresponsibility for errors or omissions, including without limitation responsibility for damages\nresulting from the use of or reliance on this work. Use of the information and instructions\ncontained in this work is at your own risk. If any code samples or other technology this work\ncontains or describes is subject to open source licenses or the intellectual property rights of\nothers, it is your responsibility to ensure that your use thereof complies with such licenses and/or\nrights.\nThe LPI Learning Materials are an initiative of Linux Professional Institute ( https://lpi.org ).\nLearning Materials and their translations can be found at https://learning.lpi.org .\nFor questions and comments on this edition as well as on the entire project write an email to:\nlearning@lpi.org .\nLinux Essentials (Version 1.6) | Imprint\nVersion: 2024-10-27     |     Licensed under CC BY-NC-ND 4.0 .     |     learning.lpi.org      \n      |     433"
    }
]